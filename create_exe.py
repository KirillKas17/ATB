#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è exe —Ñ–∞–π–ª–∞ ATB Trading System
"""

import os
import sys
import subprocess
from pathlib import Path

def check_pyinstaller():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PyInstaller"""
    try:
        import PyInstaller
        print("‚úÖ PyInstaller –Ω–∞–π–¥–µ–Ω")
        return True
    except ImportError:
        print("‚ùå PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyInstaller...")
        
        try:
            subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"], 
                         check=True)
            print("‚úÖ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except subprocess.CalledProcessError:
            print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ PyInstaller")
            return False

def create_exe():
    """–°–æ–∑–¥–∞–Ω–∏–µ exe —Ñ–∞–π–ª–∞"""
    project_root = Path(__file__).parent
    launcher_file = project_root / "atb_launcher.py"
    
    if not launcher_file.exists():
        print(f"‚ùå –§–∞–π–ª {launcher_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print("üî® –°–æ–∑–¥–∞–Ω–∏–µ exe —Ñ–∞–π–ª–∞...")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PyInstaller
    cmd = [
        sys.executable, "-m", "PyInstaller",
        "--onefile",                    # –û–¥–∏–Ω exe —Ñ–∞–π–ª
        "--windowed",                   # –ë–µ–∑ –∫–æ–Ω—Å–æ–ª–∏ (–º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–æ–Ω—Å–æ–ª—å)
        "--name=ATB_Trading_System",    # –ò–º—è exe —Ñ–∞–π–ª–∞
        "--icon=icon.ico",              # –ò–∫–æ–Ω–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        "--add-data=interfaces;interfaces",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É interfaces
        "--add-data=domain;domain",     # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É domain
        "--add-data=application;application",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É application
        "--add-data=infrastructure;infrastructure",  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É infrastructure
        "--hidden-import=tkinter",      # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç tkinter
        "--hidden-import=numpy",        # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç numpy
        "--hidden-import=pandas",       # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç pandas
        "--hidden-import=matplotlib",   # –Ø–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç matplotlib
        "--clean",                      # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        str(launcher_file)
    ]
    
    try:
        # –£–¥–∞–ª—è–µ–º –∏–∫–æ–Ω–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if not (project_root / "icon.ico").exists():
            cmd.remove("--icon=icon.ico")
        
        result = subprocess.run(cmd, cwd=project_root, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ exe —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            exe_file = project_root / "dist" / "ATB_Trading_System.exe"
            if exe_file.exists():
                print(f"üìÅ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {exe_file}")
                print(f"üìè –†–∞–∑–º–µ—Ä: {exe_file.stat().st_size / (1024*1024):.1f} MB")
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π bat —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞
                create_launcher_bat(project_root)
                
                return True
            else:
                print("‚ùå exe —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è exe —Ñ–∞–π–ª–∞:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ exe: {e}")
        return False

def create_launcher_bat(project_root):
    """–°–æ–∑–¥–∞–Ω–∏–µ bat —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ exe"""
    bat_content = """@echo off
title ATB Trading System v2.0
color 0A

echo.
echo ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
echo ‚ïë                        ATB TRADING SYSTEM v2.0                              ‚ïë
echo ‚ïë                           EXE LAUNCHER                                      ‚ïë
echo ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
echo.

set EXE_PATH=%~dp0dist\\ATB_Trading_System.exe

if not exist "%EXE_PATH%" (
    echo [ERROR] ATB_Trading_System.exe –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ dist\\
    echo [INFO] –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ exe —Ñ–∞–π–ª –±—ã–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
    echo.
    pause
    exit /b 1
)

echo [INFO] –ó–∞–ø—É—Å–∫ ATB Trading System...
echo [INFO] EXE —Ñ–∞–π–ª: %EXE_PATH%
echo.

"%EXE_PATH%"

echo.
echo [INFO] –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
pause"""

    bat_file = project_root / "START_ATB_EXE.bat"
    with open(bat_file, 'w', encoding='utf-8') as f:
        f.write(bat_content)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω launcher: {bat_file}")

def create_icon():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –∏–∫–æ–Ω–∫–∏"""
    try:
        from PIL import Image, ImageDraw
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        img = Image.new('RGBA', (64, 64), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª
        draw.rectangle([10, 10, 54, 54], fill=(55, 66, 250, 255))
        draw.text((25, 25), "ATB", fill=(255, 255, 255, 255))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ ico
        icon_path = Path(__file__).parent / "icon.ico"
        img.save(icon_path, format='ICO')
        
        print(f"‚úÖ –ò–∫–æ–Ω–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {icon_path}")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–∫–æ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∫–æ–Ω–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ ATB Trading System - –°–æ–∑–¥–∞–Ω–∏–µ EXE —Ñ–∞–π–ª–∞")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ PyInstaller
    if not check_pyinstaller():
        print("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å exe –±–µ–∑ PyInstaller")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
    create_icon()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ exe
    success = create_exe()
    
    if success:
        print("\n" + "=" * 60)
        print("üéâ EXE —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –§–∞–π–ª—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
        print("   ‚Ä¢ dist/ATB_Trading_System.exe - –û—Å–Ω–æ–≤–Ω–æ–π exe —Ñ–∞–π–ª")
        print("   ‚Ä¢ START_ATB_EXE.bat - Bat —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ exe")
        print("   ‚Ä¢ ATB_START.bat - Bat —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑ –∏—Å—Ö–æ–¥–Ω–∏–∫–æ–≤")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   ‚Ä¢ –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ATB_START.bat")
        print("   ‚Ä¢ –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ START_ATB_EXE.bat")
        print("   ‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Å—é –ø–∞–ø–∫—É dist/ –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –∫–æ–º–ø—å—é—Ç–µ—Ä")
        
        return True
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å exe —Ñ–∞–π–ª")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ pip install pyinstaller")
        print("   ‚Ä¢ pip install pillow (–¥–ª—è –∏–∫–æ–Ω–∫–∏)")
        print("   ‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å")
        
        return False

if __name__ == "__main__":
    try:
        success = main()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        sys.exit(1)