#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –Ω–æ–≤–æ—Å—Ç–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞
–∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç—Å—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π.
"""

import asyncio
import logging
from datetime import datetime
from decimal import Decimal
from typing import Dict, List

from application.di_container_refactored import get_service_locator
from application.use_cases.trading_orchestrator import (
    ExecuteStrategyRequest,
    ProcessSignalRequest,
    PortfolioRebalanceRequest
)
from domain.entities.strategy import Signal, SignalType
from domain.entities.trading import OrderSide, OrderType
from shared.config import get_config


class EnhancedTradingExample:
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""

    def __init__(self) -> None:
        self.container = get_service_locator()
        self.orchestrator = self.container.get("trading_orchestrator_use_case")
        self.enhanced_trading_service = self.container.get("enhanced_trading_service")
        self.logger = logging.getLogger(__name__)

    async def run_comprehensive_example(self) -> None:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
        try:
            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
            
            # 1. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            await self._demonstrate_sentiment_analysis()
            
            # 2. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            await self._demonstrate_strategy_execution()
            
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
            await self._demonstrate_signal_processing()
            
            # 4. –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É—á–µ—Ç–æ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            await self._demonstrate_portfolio_rebalancing()
            
            # 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
            await self._demonstrate_monitoring()
            
            self.logger.info("‚úÖ –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ: {e}")
            raise

    async def _demonstrate_sentiment_analysis(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞."""
        self.logger.info("üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–≥–æ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞...")
        
        trading_pairs = ["BTC/USDT", "ETH/USDT", "ADA/USDT"]
        
        for pair in trading_pairs:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
                sentiment_analysis = await self.enhanced_trading_service.get_market_sentiment_analysis(
                    trading_pair=pair,
                    include_news=True,
                    include_social=True
                )
                
                if sentiment_analysis.get('error'):
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {pair}: {sentiment_analysis['error']}")
                    continue
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                self.logger.info(f"üìà {pair}:")
                self.logger.info(f"   –û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment_analysis.get('overall_sentiment', 0):.3f}")
                self.logger.info(f"   –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏: {sentiment_analysis.get('fear_greed_index', 50):.1f}")
                self.logger.info(f"   –ù–æ–≤–æ—Å—Ç–Ω–æ–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment_analysis.get('news_sentiment', 0):.3f}")
                self.logger.info(f"   –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment_analysis.get('social_sentiment', 0):.3f}")
                self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {sentiment_analysis.get('news_count', 0)}")
                self.logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {sentiment_analysis.get('social_posts_count', 0)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = sentiment_analysis.get('recommendations', [])
                if recommendations:
                    self.logger.info(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in recommendations:
                        self.logger.info(f"      - {rec}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã
                trending_topics = sentiment_analysis.get('trending_topics', [])
                if trending_topics:
                    self.logger.info(f"   üî• –¢—Ä–µ–Ω–¥–æ–≤—ã–µ —Ç–µ–º—ã: {', '.join(trending_topics[:5])}")
                
                self.logger.info("")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è {pair}: {e}")

    async def _demonstrate_strategy_execution(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å —É—á–µ—Ç–æ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞."""
        self.logger.info("üéØ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        request = ExecuteStrategyRequest(
            strategy_id="sentiment_aware_strategy",
            portfolio_id="demo_portfolio",
            symbol="BTC/USDT",
            amount=Decimal("0.001"),
            risk_level="moderate",
            use_sentiment_analysis=True  # –í–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            response = await self.orchestrator.execute_strategy(request)
            
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:")
            self.logger.info(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {response.executed}")
            self.logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(response.orders_created)}")
            self.logger.info(f"   –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: {len(response.signals_generated)}")
            self.logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            if response.sentiment_analysis:
                sentiment = response.sentiment_analysis
                self.logger.info(f"   üìà –ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞:")
                self.logger.info(f"      –û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment.get('overall_sentiment', 0):.3f}")
                self.logger.info(f"      –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏: {sentiment.get('fear_greed_index', 50):.1f}")
                self.logger.info(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {sentiment.get('confidence', 0):.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
            for i, order in enumerate(response.orders_created):
                self.logger.info(f"   üìã –û—Ä–¥–µ—Ä {i+1}:")
                self.logger.info(f"      ID: {order.id}")
                self.logger.info(f"      –ü–∞—Ä–∞: {order.symbol}")
                self.logger.info(f"      –°—Ç–æ—Ä–æ–Ω–∞: {order.side}")
                self.logger.info(f"      –†–∞–∑–º–µ—Ä: {order.amount}")
                self.logger.info(f"      –°—Ç–∞—Ç—É—Å: {order.status}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
                if hasattr(order, 'metadata') and order.metadata:
                    sentiment_meta = order.metadata.get('sentiment_score')
                    if sentiment_meta is not None:
                        self.logger.info(f"      –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment_meta:.3f}")
                
            self.logger.info("")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {e}")

    async def _demonstrate_signal_processing(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π."""
        self.logger.info("üì° –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
        test_signal = Signal(
            signal_type=SignalType.BUY,
            symbol="ETH/USDT",
            strength=0.7,
            confidence=0.8,
            timestamp=datetime.now(),
            metadata={
                'technical_sentiment': 0.6,
                'market_volatility': 0.3,
                'source': 'technical_analysis'
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–∞
        request = ProcessSignalRequest(
            signal=test_signal,
            portfolio_id="demo_portfolio",
            auto_execute=True,
            use_sentiment_analysis=True  # –í–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏–≥–Ω–∞–ª
            response = await self.orchestrator.process_signal(request)
            
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞:")
            self.logger.info(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω: {response.processed}")
            self.logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(response.orders_created)}")
            self.logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            if response.sentiment_analysis:
                sentiment = response.sentiment_analysis
                self.logger.info(f"   üìà –ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞:")
                self.logger.info(f"      –û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment.get('overall_sentiment', 0):.3f}")
                self.logger.info(f"      –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏: {sentiment.get('fear_greed_index', 50):.1f}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                recommendations = sentiment.get('recommendations', [])
                if recommendations:
                    self.logger.info(f"      üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in recommendations:
                        self.logger.info(f"         - {rec}")
            
            self.logger.info("")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")

    async def _demonstrate_portfolio_rebalancing(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å —É—á–µ—Ç–æ–º —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞."""
        self.logger.info("‚öñÔ∏è –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è —Å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        target_weights = {
            "BTC/USDT": Decimal("0.5"),
            "ETH/USDT": Decimal("0.3"),
            "ADA/USDT": Decimal("0.2")
        }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
        request = PortfolioRebalanceRequest(
            portfolio_id="demo_portfolio",
            target_weights=target_weights,
            tolerance=Decimal("0.05"),  # 5% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
            use_sentiment_analysis=True  # –í–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
        )
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫—É
            response = await self.orchestrator.rebalance_portfolio(request)
            
            self.logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
            self.logger.info(f"   –†–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω: {response.rebalanced}")
            self.logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(response.orders_created)}")
            self.logger.info(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {response.message}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏ —Ü–µ–ª–µ–≤—ã–µ –≤–µ—Å–∞
            self.logger.info(f"   üìà –í–µ—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è:")
            for symbol in target_weights.keys():
                current_weight = response.current_weights.get(symbol, Decimal("0"))
                target_weight = response.target_weights.get(symbol, Decimal("0"))
                self.logger.info(f"      {symbol}: {current_weight:.3f} ‚Üí {target_weight:.3f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã
            if response.sentiment_analysis:
                self.logger.info(f"   üìä –ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –ø–æ –ø–∞—Ä–∞–º:")
                for symbol, sentiment in response.sentiment_analysis.items():
                    if not sentiment.get('error'):
                        overall_sentiment = sentiment.get('overall_sentiment', 0)
                        fear_greed = sentiment.get('fear_greed_index', 50)
                        self.logger.info(f"      {symbol}: —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç={overall_sentiment:.3f}, F/G={fear_greed:.1f}")
            
            self.logger.info("")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

    async def _demonstrate_monitoring(self) -> None:
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏."""
        self.logger.info("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
        active_sessions = list(self.orchestrator.active_sessions.values())
        
        self.logger.info(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: {len(active_sessions)}")
        
        for session in active_sessions:
            self.logger.info(f"   üìã –°–µ—Å—Å–∏—è {session.session_id}:")
            self.logger.info(f"      –ü–æ—Ä—Ç—Ñ–µ–ª—å: {session.portfolio_id}")
            self.logger.info(f"      –°—Ç–∞—Ç—É—Å: {session.status}")
            self.logger.info(f"      –ù–∞—á–∞–ª–æ: {session.start_time}")
            self.logger.info(f"      –°–æ–∑–¥–∞–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(session.orders_created)}")
            self.logger.info(f"      –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(session.trades_executed)}")
            self.logger.info(f"      P&L: {session.pnl}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ä–¥–µ—Ä–∞–º
        try:
            active_orders = await self.orchestrator.get_active_orders()
            self.logger.info(f"   üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: {len(active_orders)}")
            
            for order in active_orders:
                self.logger.info(f"      {order.symbol}: {order.side} {order.amount} @ {order.status}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if hasattr(order, 'metadata') and order.metadata:
                    sentiment_score = order.metadata.get('sentiment_score')
                    if sentiment_score is not None:
                        self.logger.info(f"         –°–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment_score:.3f}")
        
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞: {e}")
        
        self.logger.info("")

    async def run_simple_example(self) -> None:
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞...")
        
        try:
            # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞
            sentiment = await self.enhanced_trading_service.get_market_sentiment_analysis(
                trading_pair="BTC/USDT",
                include_news=True,
                include_social=True
            )
            
            self.logger.info(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç–∞ BTC/USDT:")
            self.logger.info(f"   –û–±—â–∏–π —Å–µ–Ω—Ç–∏–º–µ–Ω—Ç: {sentiment.get('overall_sentiment', 0):.3f}")
            self.logger.info(f"   –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞/–∂–∞–¥–Ω–æ—Å—Ç–∏: {sentiment.get('fear_greed_index', 50):.1f}")
            
            if sentiment.get('recommendations'):
                self.logger.info(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {sentiment['recommendations'][0]}")
            
            self.logger.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ: {e}")


async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
    example = EnhancedTradingExample()
    
    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await example.run_simple_example()
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
    # await example.run_comprehensive_example()


if __name__ == "__main__":
    asyncio.run(main()) 