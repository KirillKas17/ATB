#!/usr/bin/env python3
"""
ATB Trading System Launcher v2.0
–ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sys
import os
import subprocess
import threading
import time
import json
import logging
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

class ATBSystemLauncher:
    """–ì–ª–∞–≤–Ω—ã–π launcher –¥–ª—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã ATB Trading"""
    
    def __init__(self):
        self.project_root = PROJECT_ROOT
        self.config_file = self.project_root / "launcher_config.json"
        self.log_file = self.project_root / "logs" / "launcher.log"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self.setup_directories()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.system_status = {
            'database': False,
            'redis': False,
            'api_server': False,
            'trading_engine': False,
            'dashboard': False,
            'monitoring': False
        }
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        self.processes = {}
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        self.config = self.load_config()
        
        self.logger.info("üöÄ ATB Trading System Launcher –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        dirs = [
            "logs",
            "data",
            "config", 
            "temp",
            "backups"
        ]
        
        for dir_name in dirs:
            dir_path = self.project_root / dir_name
            dir_path.mkdir(exist_ok=True)
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = self.project_root / "logs"
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(levelname)s | %(message)s',
            handlers=[
                logging.FileHandler(self.log_file, encoding='utf-8'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        
        self.logger = logging.getLogger(__name__)
    
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ launcher'–∞"""
        default_config = {
            "auto_start_components": [
                "database",
                "trading_engine", 
                "dashboard"
            ],
            "startup_delay": 2,
            "health_check_interval": 30,
            "auto_restart": True,
            "max_restart_attempts": 3,
            "dashboard_port": 8080,
            "api_port": 8000,
            "monitoring_port": 9090,
            "enable_monitoring": True,
            "enable_auto_backup": True,
            "backup_interval_hours": 24,
            "python_executable": "python",
            "environment": "development"
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                    default_config.update(config)
                    return default_config
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.save_config(default_config)
        return default_config
    
    def save_config(self, config: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python
        python_version = sys.version_info
        if python_version < (3, 8):
            self.logger.error(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8+, –Ω–∞–π–¥–µ–Ω {python_version}")
            return False
        
        self.logger.info(f"‚úÖ Python {python_version.major}.{python_version.minor}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        required_packages = {
            'asyncio': True,
            'threading': True,
            'decimal': True,
            'datetime': True,
            'pathlib': True,
            'json': True,
            'logging': True
        }
        
        optional_packages = {
            'tkinter': 'GUI –¥–∞—à–±–æ—Ä–¥',
            'numpy': '–ß–∏—Å–ª–µ–Ω–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è',
            'pandas': '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
            'matplotlib': '–ì—Ä–∞—Ñ–∏–∫–∏',
            'fastapi': 'API —Å–µ—Ä–≤–µ—Ä',
            'uvicorn': 'ASGI —Å–µ—Ä–≤–µ—Ä',
            'redis': '–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
            'psycopg2': 'PostgreSQL',
            'sqlalchemy': 'ORM'
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        missing_required = []
        for package in required_packages:
            try:
                __import__(package)
                self.logger.info(f"‚úÖ {package}")
            except ImportError:
                self.logger.error(f"‚ùå {package} - –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô")
                missing_required.append(package)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        missing_optional = []
        for package, description in optional_packages.items():
            try:
                __import__(package)
                self.logger.info(f"‚úÖ {package} - {description}")
            except ImportError:
                self.logger.warning(f"‚ö†Ô∏è {package} - {description} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
                missing_optional.append(package)
        
        if missing_required:
            self.logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏!")
            return False
        
        if missing_optional:
            self.logger.info("‚ÑπÔ∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤")
            self.offer_install_optional(missing_optional)
        
        return True
    
    def offer_install_optional(self, packages: List[str]):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"""
        try:
            import tkinter as tk
            from tkinter import messagebox
            
            root = tk.Tk()
            root.withdraw()  # –°–∫—Ä—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
            
            message = f"""
–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:
{', '.join(packages)}

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏?
–≠—Ç–æ —É–ª—É—á—à–∏—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã.
            """
            
            if messagebox.askyesno("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", message.strip()):
                self.install_packages(packages)
            
            root.destroy()
            
        except ImportError:
            # –ï—Å–ª–∏ tkinter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å
            print(f"\n–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: {', '.join(packages)}")
            response = input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö? (y/n): ").lower().strip()
            if response in ['y', 'yes', '–¥–∞']:
                self.install_packages(packages)
    
    def install_packages(self, packages: List[str]):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤"""
        self.logger.info(f"üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {', '.join(packages)}")
        
        for package in packages:
            try:
                self.logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], capture_output=True, text=True)
                
                if result.returncode == 0:
                    self.logger.info(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                else:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {result.stderr}")
                    
            except Exception as e:
                self.logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ {package}: {e}")
    
    def start_component(self, component: str) -> bool:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: {component}")
        
        try:
            if component == "database":
                return self.start_database()
            elif component == "redis":
                return self.start_redis()
            elif component == "api_server":
                return self.start_api_server()
            elif component == "trading_engine":
                return self.start_trading_engine()
            elif component == "dashboard":
                return self.start_dashboard()
            elif component == "monitoring":
                return self.start_monitoring()
            else:
                self.logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component}")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {component}: {e}")
            return False
    
    def start_database(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL –∏–ª–∏ SQLite
            db_file = self.project_root / "data" / "atb_trading.db"
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã
            import sqlite3
            conn = sqlite3.connect(str(db_file))
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_status (
                    id INTEGER PRIMARY KEY,
                    component TEXT,
                    status TEXT,
                    last_update TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS trading_sessions (
                    id INTEGER PRIMARY KEY,
                    session_id TEXT UNIQUE,
                    start_time TIMESTAMP,
                    end_time TIMESTAMP,
                    mode TEXT,
                    status TEXT,
                    config TEXT
                )
            """)
            
            conn.commit()
            conn.close()
            
            self.system_status['database'] = True
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False
    
    def start_redis(self) -> bool:
        """–ó–∞–ø—É—Å–∫ Redis (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
        try:
            import redis
            
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
            r = redis.Redis(host='localhost', port=6379, db=0)
            r.ping()
            
            self.system_status['redis'] = True
            self.logger.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return True
            
        except ImportError:
            self.logger.info("‚ÑπÔ∏è Redis –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
            return True
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    def start_api_server(self) -> bool:
        """–ó–∞–ø—É—Å–∫ API —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π API —Å–µ—Ä–≤–µ—Ä
            api_script = self.project_root / "api_server.py"
            
            if not api_script.exists():
                self.create_api_server_script()
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen([
                sys.executable, str(api_script)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes['api_server'] = process
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(2)
            
            if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
                self.system_status['api_server'] = True
                self.logger.info(f"‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                self.logger.error("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            return False
    
    def start_trading_engine(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
            engine_script = self.project_root / "trading_engine.py"
            
            if not engine_script.exists():
                self.create_trading_engine_script()
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
            process = subprocess.Popen([
                sys.executable, str(engine_script)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.processes['trading_engine'] = process
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(2)
            
            if process.poll() is None:
                self.system_status['trading_engine'] = True
                self.logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                return True
            else:
                self.logger.error("‚ùå –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                return False
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞: {e}")
            return False
    
    def start_dashboard(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            # –ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            dashboard_thread = threading.Thread(
                target=self.run_dashboard,
                daemon=True
            )
            dashboard_thread.start()
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
            time.sleep(3)
            
            self.system_status['dashboard'] = True
            self.logger.info("‚úÖ –î–∞—à–±–æ—Ä–¥ –∑–∞–ø—É—â–µ–Ω")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            return False
    
    def run_dashboard(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            dashboard_files = [
                "interfaces/desktop/integrated_dashboard.py",
                "interfaces/desktop/trading_dashboard.py",
                "run_dashboard.py"
            ]
            
            dashboard_file = None
            for file_path in dashboard_files:
                full_path = self.project_root / file_path
                if full_path.exists():
                    dashboard_file = full_path
                    break
            
            if dashboard_file:
                self.logger.info(f"–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞: {dashboard_file}")
                
                # –ò–º–ø–æ—Ä—Ç –∏ –∑–∞–ø—É—Å–∫
                if "integrated_dashboard" in str(dashboard_file):
                    from interfaces.desktop.integrated_dashboard import IntegratedTradingDashboard
                    dashboard = IntegratedTradingDashboard()
                    dashboard.run()
                elif "trading_dashboard" in str(dashboard_file):
                    from interfaces.desktop.trading_dashboard import ModernTradingDashboard
                    dashboard = ModernTradingDashboard()
                    dashboard.run()
                else:
                    # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ subprocess
                    subprocess.run([sys.executable, str(dashboard_file)])
            else:
                self.logger.error("‚ùå –§–∞–π–ª—ã –¥–∞—à–±–æ—Ä–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                self.create_simple_dashboard()
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            self.create_simple_dashboard()
    
    def start_monitoring(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            monitoring_thread = threading.Thread(
                target=self.run_monitoring,
                daemon=True
            )
            monitoring_thread.start()
            
            self.system_status['monitoring'] = True
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            return False
    
    def run_monitoring(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        while True:
            try:
                time.sleep(self.config.get('health_check_interval', 30))
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                for component, process in self.processes.items():
                    if process and process.poll() is not None:
                        # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                        self.logger.warning(f"‚ö†Ô∏è –ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                        self.system_status[component] = False
                        
                        if self.config.get('auto_restart', True):
                            self.logger.info(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ {component}")
                            self.start_component(component)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                active_components = sum(1 for status in self.system_status.values() if status)
                total_components = len(self.system_status)
                
                self.logger.info(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {active_components}/{total_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ")
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
    
    def create_api_server_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ API —Å–µ—Ä–≤–µ—Ä–∞"""
        api_content = '''#!/usr/bin/env python3
"""
ATB Trading API Server
"""

import asyncio
import json
from datetime import datetime
from typing import Dict, Any

try:
    from fastapi import FastAPI
    from uvicorn import run
    FASTAPI_AVAILABLE = True
except ImportError:
    FASTAPI_AVAILABLE = False

if FASTAPI_AVAILABLE:
    app = FastAPI(title="ATB Trading API", version="2.0")
    
    @app.get("/")
    async def root():
        return {"message": "ATB Trading API Server", "status": "running", "time": datetime.now().isoformat()}
    
    @app.get("/health")
    async def health():
        return {"status": "healthy", "timestamp": datetime.now().isoformat()}
    
    @app.get("/system/status")
    async def system_status():
        return {
            "database": True,
            "trading_engine": True,
            "dashboard": True,
            "timestamp": datetime.now().isoformat()
        }
    
    if __name__ == "__main__":
        run(app, host="127.0.0.1", port=8000, log_level="info")

else:
    # –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä
    import http.server
    import socketserver
    
    class SimpleHandler(http.server.BaseHTTPRequestHandler):
        def do_GET(self):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            
            response = {
                "message": "ATB Trading API Server (Simple)",
                "status": "running",
                "time": datetime.now().isoformat()
            }
            
            self.wfile.write(json.dumps(response).encode())
    
    if __name__ == "__main__":
        PORT = 8000
        with socketserver.TCPServer(("", PORT), SimpleHandler) as httpd:
            print(f"API Server running on port {PORT}")
            httpd.serve_forever()
'''
        
        api_file = self.project_root / "api_server.py"
        with open(api_file, 'w', encoding='utf-8') as f:
            f.write(api_content)
        
        self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç API —Å–µ—Ä–≤–µ—Ä–∞")
    
    def create_trading_engine_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        engine_content = '''#!/usr/bin/env python3
"""
ATB Trading Engine
"""

import asyncio
import logging
import time
from datetime import datetime
from decimal import Decimal

class TradingEngine:
    def __init__(self):
        self.is_running = False
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | TRADING ENGINE | %(levelname)s | %(message)s'
        )
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.is_running = True
        self.logger.info("üöÄ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_running:
            try:
                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
                await self.process_trading_cycle()
                await asyncio.sleep(5)  # –¶–∏–∫–ª –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(10)
    
    async def process_trading_cycle(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        # –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        current_time = datetime.now()
        self.logger.info(f"üìä –¢–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª: {current_time.strftime('%H:%M:%S')}")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
        # - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        # - –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
        # - –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
        # - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞"""
        self.is_running = False
        self.logger.info("‚èπÔ∏è –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    engine = TradingEngine()
    
    try:
        await engine.start()
    except KeyboardInterrupt:
        engine.stop()
    except Exception as e:
        engine.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
'''
        
        engine_file = self.project_root / "trading_engine.py"
        with open(engine_file, 'w', encoding='utf-8') as f:
            f.write(engine_content)
        
        self.logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞")
    
    def create_simple_dashboard(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –∫–∞–∫ fallback"""
        try:
            import tkinter as tk
            from tkinter import ttk
            
            class SimpleDashboard:
                def __init__(self):
                    self.root = tk.Tk()
                    self.root.title("ATB Trading System - –°—Ç–∞—Ç—É—Å")
                    self.root.geometry("600x400")
                    self.root.configure(bg='#1e1e1e')
                    
                    self.create_ui()
                
                def create_ui(self):
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
                    title = tk.Label(self.root, text="‚ö° ATB Trading System",
                                   font=('Arial', 18, 'bold'),
                                   fg='#00ff88', bg='#1e1e1e')
                    title.pack(pady=20)
                    
                    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    status_frame = tk.Frame(self.root, bg='#1e1e1e')
                    status_frame.pack(pady=20)
                    
                    tk.Label(status_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:",
                           font=('Arial', 14, 'bold'),
                           fg='white', bg='#1e1e1e').pack()
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
                    for component, status in launcher.system_status.items():
                        color = '#00ff88' if status else '#ff4757'
                        status_text = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if status else "‚ùå –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                        
                        tk.Label(status_frame, 
                               text=f"{component.replace('_', ' ').title()}: {status_text}",
                               font=('Arial', 10),
                               fg=color, bg='#1e1e1e').pack(pady=2)
                    
                    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                    btn_frame = tk.Frame(self.root, bg='#1e1e1e')
                    btn_frame.pack(pady=20)
                    
                    tk.Button(btn_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                             bg='#3742fa', fg='white',
                             command=self.refresh_status).pack(side='left', padx=10)
                    
                    tk.Button(btn_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                             bg='#2d2d2d', fg='white',
                             command=self.show_settings).pack(side='left', padx=10)
                
                def refresh_status(self):
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                    self.root.destroy()
                    self.__init__()
                
                def show_settings(self):
                    tk.messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —Ñ–∞–π–ª launcher_config.json")
                
                def run(self):
                    self.root.mainloop()
            
            dashboard = SimpleDashboard()
            dashboard.run()
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
    
    def shutdown_system(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for component, process in self.processes.items():
            if process and process.poll() is None:
                self.logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ {component}...")
                process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    process.wait(timeout=5)
                    self.logger.info(f"‚úÖ {component} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.TimeoutExpired:
                    self.logger.warning(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {component}")
                    process.kill()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        for component in self.system_status:
            self.system_status[component] = False
        
        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def launch_system(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("=" * 60)
        self.logger.info("üéØ ATB Trading System Launcher v2.0")
        self.logger.info("=" * 60)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        if not self.check_dependencies():
            self.logger.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!")
            return False
        
        self.logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")
        
        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        components_to_start = self.config.get('auto_start_components', [
            'database', 'trading_engine', 'dashboard'
        ])
        
        self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {', '.join(components_to_start)}")
        
        success_count = 0
        for component in components_to_start:
            self.logger.info(f"–ó–∞–ø—É—Å–∫ {component}...")
            
            if self.start_component(component):
                success_count += 1
                self.logger.info(f"‚úÖ {component} –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {component}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
            time.sleep(self.config.get('startup_delay', 2))
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if self.config.get('enable_monitoring', True):
            self.start_component('monitoring')
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        total_components = len(components_to_start)
        self.logger.info("=" * 60)
        self.logger.info(f"üìä –ò–¢–û–ì: {success_count}/{total_components} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
        if success_count > 0:
            self.logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞! –î–∞—à–±–æ—Ä–¥ –¥–æ–ª–∂–µ–Ω –æ—Ç–∫—Ä—ã—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
            if self.system_status.get('api_server'):
                self.logger.info(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω: http://localhost:{self.config.get('api_port', 8000)}")
            
            return True
        else:
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞!")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
launcher = None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è launcher'–∞"""
    global launcher
    
    try:
        launcher = ATBSystemLauncher()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
        success = launcher.launch_system()
        
        if success:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç)
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                launcher.logger.info("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
                launcher.shutdown_system()
        
        return 0 if success else 1
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ launcher'–∞: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)