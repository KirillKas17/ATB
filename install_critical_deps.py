#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è ATB Trading System
"""

import subprocess
import sys
import os
from typing import List, Tuple

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
CRITICAL_DEPENDENCIES = [
    # –û—Å–Ω–æ–≤–∞ Python
    "typing_extensions",
    "pydantic",
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    "pandas",
    "numpy", 
    "scipy",
    
    # –í–µ–± –∏ —Å–µ—Ç—å
    "requests",
    "aiohttp",
    "websockets",
    
    # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    "sqlalchemy",
    "psycopg2-binary",
    "redis",
    "alembic",
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    "python-dotenv",
    "pyyaml",
    
    # –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (–±–∞–∑–æ–≤–æ–µ)
    "scikit-learn",
    "joblib",
    
    # –£—Ç–∏–ª–∏—Ç—ã
    "tqdm",
    "pytest",
    "black",
    "isort",
]

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
TRADING_DEPENDENCIES = [
    "ccxt",
    "yfinance",
]

# ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (—Ç—è–∂–µ–ª—ã–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ –∂–µ–ª–∞–Ω–∏—é)
HEAVY_ML_DEPENDENCIES = [
    "tensorflow",
    "torch", 
    "transformers",
    "xgboost",
    "catboost",
]

def run_command(command: List[str]) -> Tuple[bool, str]:
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        result = subprocess.run(
            command, 
            capture_output=True, 
            text=True, 
            timeout=300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞–∫–µ—Ç
        )
        return result.returncode == 0, result.stdout + result.stderr
    except subprocess.TimeoutExpired:
        return False, "Timeout: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞: {e}"

def install_package(package: str, use_break_system: bool = True) -> bool:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–∏–Ω –ø–∞–∫–µ—Ç."""
    print(f"üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {package}...")
    
    command = ["pip3", "install"]
    if use_break_system:
        command.append("--break-system-packages")
    command.append(package)
    
    success, output = run_command(command)
    
    if success:
        print(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}")
        print(f"   –í—ã–≤–æ–¥: {output[:200]}...")
        return False

def check_package(package: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ –ø–∞–∫–µ—Ç."""
    try:
        __import__(package.replace("-", "_"))
        return True
    except ImportError:
        return False

def install_dependencies(deps: List[str], category: str) -> Tuple[int, int]:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π."""
    print(f"\nüîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {category}...")
    
    installed = 0
    failed = 0
    
    for package in deps:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ —É–∂–µ
        package_import_name = package.replace("-", "_")
        if check_package(package_import_name):
            print(f"‚úÖ {package} —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            installed += 1
            continue
            
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
        if install_package(package):
            installed += 1
        else:
            failed += 1
            # –ü—ã—Ç–∞–µ–º—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
            print(f"üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è {package}...")
            if install_package(package, use_break_system=False):
                installed += 1
                failed -= 1
    
    return installed, failed

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π ATB Trading System")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –∏ pip
    try:
        python_version = sys.version_info
        print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Python: {e}")
        return False
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs("logs", exist_ok=True)
    os.makedirs("models", exist_ok=True)
    
    total_installed = 0
    total_failed = 0
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    installed, failed = install_dependencies(CRITICAL_DEPENDENCIES, "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
    total_installed += installed
    total_failed += failed
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print(f"\nü§î –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (–º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º—ã)")
    install_trading = input("y/N: ").lower().startswith('y')
    
    if install_trading:
        installed, failed = install_dependencies(TRADING_DEPENDENCIES, "—Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        total_installed += installed
        total_failed += failed
    
    # ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —Ç–æ–ª—å–∫–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É
    print(f"\nü§î –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏? (—Ç—Ä–µ–±—É—é—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –º–µ—Å—Ç–∞)")
    install_ml = input("y/N: ").lower().startswith('y')
    
    if install_ml:
        installed, failed = install_dependencies(HEAVY_ML_DEPENDENCIES, "ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        total_installed += installed
        total_failed += failed
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {total_installed}")
    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: {total_failed}")
    
    if total_failed == 0:
        print("üéâ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        test_imports = ["pandas", "numpy", "requests", "pydantic", "sqlalchemy"]
        
        for package in test_imports:
            try:
                __import__(package)
                print(f"‚úÖ {package}")
            except ImportError as e:
                print(f"‚ùå {package}: {e}")
                
        return True
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç—å pip: pip3 install --upgrade pip")
        print("   2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å virtual environment")
        print("   3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞–∫–µ—Ç—ã: apt install python3-dev")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)