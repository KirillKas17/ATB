from typing import Any, List, Optional, Tuple, Union, overload
import numpy as np

class ndarray:
    def __init__(self, shape: Tuple[int, ...], dtype: Any = None, buffer: Any = None, offset: int = 0, strides: Optional[Tuple[int, ...]] = None, order: Optional[str] = None) -> None: ...
    
    @property
    def shape(self) -> Tuple[int, ...]: ...
    @property
    def dtype(self) -> Any: ...
    @property
    def size(self) -> int: ...
    @property
    def ndim(self) -> int: ...
    
    def __len__(self) -> int: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def __add__(self, other: Any) -> 'ndarray': ...
    def __sub__(self, other: Any) -> 'ndarray': ...
    def __mul__(self, other: Any) -> 'ndarray': ...
    def __rmul__(self, other: Any) -> 'ndarray': ...
    def __truediv__(self, other: Any) -> 'ndarray': ...
    def __rtruediv__(self, other: Any) -> 'ndarray': ...
    def __pow__(self, other: Any) -> 'ndarray': ...
    def __lt__(self, other: Any) -> 'ndarray': ...
    def __le__(self, other: Any) -> 'ndarray': ...
    def __gt__(self, other: Any) -> 'ndarray': ...
    def __ge__(self, other: Any) -> 'ndarray': ...
    def __eq__(self, other: Any) -> 'ndarray': ...  # type: ignore[override]
    def __ne__(self, other: Any) -> 'ndarray': ...  # type: ignore[override]
    
    def sum(self, axis: Optional[int] = None, dtype: Any = None, out: Optional['ndarray'] = None, keepdims: bool = False, initial: Any = 0, where: Optional['ndarray'] = None) -> Union[float, 'ndarray']: ...
    def mean(self, axis: Optional[int] = None, dtype: Any = None, out: Optional['ndarray'] = None, keepdims: bool = False) -> Union[float, 'ndarray']: ...
    def std(self, axis: Optional[int] = None, dtype: Any = None, out: Optional['ndarray'] = None, ddof: int = 0, keepdims: bool = False) -> Union[float, 'ndarray']: ...
    def min(self, axis: Optional[int] = None, out: Optional['ndarray'] = None, keepdims: bool = False, initial: Any = None, where: Optional['ndarray'] = None) -> Union[float, 'ndarray']: ...
    def max(self, axis: Optional[int] = None, out: Optional['ndarray'] = None, keepdims: bool = False, initial: Any = None, where: Optional['ndarray'] = None) -> Union[float, 'ndarray']: ...
    def abs(self) -> 'ndarray': ...
    def clip(self, min: Optional[float] = None, max: Optional[float] = None, out: Optional['ndarray'] = None) -> 'ndarray': ...

# Array creation functions
def array(object: Any, dtype: Any = None, copy: bool = True, order: Optional[str] = None, subok: bool = False, ndmin: int = 0, like: Any = None) -> ndarray: ...
def asarray(a: Any, dtype: Any = None, order: Optional[str] = None) -> ndarray: ...
def zeros(shape: Union[int, Tuple[int, ...]], dtype: Any = None, order: str = 'C') -> ndarray: ...
def ones(shape: Union[int, Tuple[int, ...]], dtype: Any = None, order: str = 'C') -> ndarray: ...
def arange(start: Union[int, float], stop: Optional[Union[int, float]] = None, step: Union[int, float] = 1, dtype: Any = None) -> ndarray: ...

# Mathematical functions  
def linspace(start: float, stop: float, num: int = 50, endpoint: bool = True, retstep: bool = False, dtype: Any = None, axis: int = 0) -> Union[ndarray, Tuple[ndarray, float]]: ...
def sqrt(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def exp(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def log(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def sin(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def cos(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def tan(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arcsin(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arccos(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arctan(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def sinh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def cosh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def tanh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arcsinh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arccosh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def arctanh(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def sign(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def abs(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def absolute(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def fabs(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def ceil(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def floor(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def rint(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def trunc(x: Union[float, ndarray]) -> Union[float, ndarray]: ...
def around(a: Union[float, ndarray], decimals: int = 0, out: Optional[ndarray] = None) -> Union[float, ndarray]: ...
def round_(a: Union[float, ndarray], decimals: int = 0, out: Optional[ndarray] = None) -> Union[float, ndarray]: ...
def isnan(x: Union[float, ndarray]) -> Union[bool, ndarray]: ...
def isinf(x: Union[float, ndarray]) -> Union[bool, ndarray]: ...
def isfinite(x: Union[float, ndarray]) -> Union[bool, ndarray]: ...
def clip(a: Union[float, ndarray], a_min: Optional[float] = None, a_max: Optional[float] = None, out: Optional[ndarray] = None) -> Union[float, ndarray]: ...
def histogram(a: ndarray, bins: Union[int, ndarray] = 10, range: Optional[Tuple[float, float]] = None, normed: Optional[bool] = None, weights: Optional[ndarray] = None, density: Optional[bool] = None) -> Tuple[ndarray, ndarray]: ...
def polyfit(x: ndarray, y: ndarray, deg: int, rcond: Optional[float] = None, full: bool = False, w: Optional[ndarray] = None, cov: bool = False) -> Union[ndarray, Tuple[ndarray, ndarray, int, float, ndarray]]: ... 