"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã print() –≤ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª—è—Ö.
"""

import logging
import sys
from datetime import datetime
from typing import Any, Optional


class SmartAnalyticsLogger:
    """–£–º–Ω—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π."""
    
    def __init__(self, module_name: str, level: int = logging.INFO) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞.
        
        Args:
            module_name: –ò–º—è –º–æ–¥—É–ª—è
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        self.logger = logging.getLogger(f"analytics.{module_name}")
        self.logger.setLevel(level)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not self.logger.handlers:
            handler = logging.StreamHandler(sys.stdout)
            formatter = logging.Formatter(
                '%(asctime)s | %(name)s | %(levelname)s | %(message)s',
                datefmt='%H:%M:%S'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
    
    def analysis_start(self, message: str) -> None:
        """–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞."""
        self.logger.info(f"üîç [–ê–ù–ê–õ–ò–ó] {message}")
    
    def analysis_progress(self, message: str, progress: Optional[float] = None) -> None:
        """–ü—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞."""
        if progress is not None:
            self.logger.info(f"‚è≥ [–ü–†–û–ì–†–ï–°–° {progress:.1%}] {message}")
        else:
            self.logger.info(f"‚è≥ [–ü–†–û–ì–†–ï–°–°] {message}")
    
    def analysis_result(self, message: str) -> None:
        """–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞."""
        self.logger.info(f"üìä [–†–ï–ó–£–õ–¨–¢–ê–¢] {message}")
    
    def analysis_complete(self, message: str) -> None:
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞."""
        self.logger.info(f"‚úÖ [–ó–ê–í–ï–†–®–ï–ù–û] {message}")
    
    def analysis_error(self, message: str, error: Optional[Exception] = None) -> None:
        """–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."""
        if error:
            self.logger.error(f"‚ùå [–û–®–ò–ë–ö–ê] {message}: {error}")
        else:
            self.logger.error(f"‚ùå [–û–®–ò–ë–ö–ê] {message}")
    
    def analysis_warning(self, message: str) -> None:
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞."""
        self.logger.warning(f"‚ö†Ô∏è [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] {message}")
    
    def debug(self, message: str) -> None:
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è."""
        self.logger.debug(f"üêõ [DEBUG] {message}")
    
    def metric(self, name: str, value: Any, unit: str = "") -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏."""
        unit_str = f" {unit}" if unit else ""
        self.logger.info(f"üìà [–ú–ï–¢–†–ò–ö–ê] {name}: {value}{unit_str}")
    
    def statistics(self, stats: dict) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."""
        self.logger.info("üìã [–°–¢–ê–¢–ò–°–¢–ò–ö–ê]")
        for key, value in stats.items():
            self.logger.info(f"  - {key}: {value}")
    
    def separator(self, title: str = "") -> None:
        """–†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –ª–æ–≥–∞—Ö."""
        if title:
            self.logger.info(f"{'='*20} {title} {'='*20}")
        else:
            self.logger.info("="*60)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
_loggers = {}


def get_analytics_logger(module_name: str) -> SmartAnalyticsLogger:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è."""
    if module_name not in _loggers:
        _loggers[module_name] = SmartAnalyticsLogger(module_name)
    return _loggers[module_name]


def smart_print(*args: Any, module: str = "general", level: str = "info", **kwargs: Any) -> None:
    """
    –£–º–Ω–∞—è –∑–∞–º–µ–Ω–∞ print() —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    Args:
        *args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
        module: –ò–º—è –º–æ–¥—É–ª—è
        level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    """
    logger = get_analytics_logger(module)
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
    message = " ".join(str(arg) for arg in args)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
    message_lower = message.lower()
    
    if any(word in message_lower for word in ["–æ—à–∏–±–∫–∞", "error", "failed", "‚ùå"]):
        logger.analysis_error(message)
    elif any(word in message_lower for word in ["–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "warning", "‚ö†Ô∏è"]):
        logger.analysis_warning(message)
    elif any(word in message_lower for word in ["–∑–∞–≤–µ—Ä—à–µ–Ω", "complete", "–≥–æ—Ç–æ–≤", "‚úÖ"]):
        logger.analysis_complete(message)
    elif any(word in message_lower for word in ["–∞–Ω–∞–ª–∏–∑", "analysis", "üîç"]):
        logger.analysis_start(message)
    elif any(word in message_lower for word in ["—Ä–µ–∑—É–ª—å—Ç–∞—Ç", "result", "üìä"]):
        logger.analysis_result(message)
    elif any(word in message_lower for word in ["–ø—Ä–æ–≥—Ä–µ—Å—Å", "progress", "‚è≥"]):
        logger.analysis_progress(message)
    else:
        # –û–±—ã—á–Ω–æ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if level == "debug":
            logger.debug(message)
        elif level == "warning":
            logger.analysis_warning(message)
        elif level == "error":
            logger.analysis_error(message)
        else:
            logger.logger.info(message)


# –£–¥–æ–±–Ω—ã–µ –∞–ª–∏–∞—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
analysis_logger = get_analytics_logger
smart_log = smart_print