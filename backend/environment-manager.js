const fs = require('fs').promises;
const path = require('path');
require('dotenv').config();

class EnvironmentManager {
    constructor() {
        this.envPath = path.join(process.cwd(), '.env');
        this.defaultConfig = {
            // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            NODE_ENV: 'production',
            ENVIRONMENT: 'development',
            DEBUG: 'true',
            ATB_MODE: 'simulation',
            
            // –°–µ—Ä–≤–µ—Ä
            BACKEND_PORT: '3001',
            FRONTEND_PORT: '3000',
            
            // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            DB_HOST: 'localhost',
            DB_PORT: '5432',
            DB_NAME: 'atb_trading',
            DB_USER: 'atb_user',
            DB_PASS: '',
            
            // –ë–∏—Ä–∂–∞
            EXCHANGE_API_KEY: '',
            EXCHANGE_API_SECRET: '',
            EXCHANGE_TESTNET: 'true',
            
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            MONITORING_ENABLED: 'true',
            MONITORING_INTERVAL: '10000',
            ALERT_EMAIL: '',
            
            // –≠–≤–æ–ª—é—Ü–∏—è
            EVOLUTION_ENABLED: 'true',
            EVOLUTION_INTERVAL: '3600000',
            AUTO_EVOLUTION: 'false',
            
            // –¢–æ—Ä–≥–æ–≤–ª—è
            DEFAULT_POSITION_SIZE: '1.0',
            DEFAULT_STOP_LOSS: '2.0',
            MAX_DRAWDOWN: '5.0',
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            LOG_LEVEL: 'info',
            LOG_FILE: 'logs/atb.log',
            
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            ENABLE_CORS: 'true',
            JWT_SECRET: 'your-secret-key'
        };
    }

    async getConfig() {
        try {
            const exists = await this.fileExists(this.envPath);
            
            if (!exists) {
                console.log('üìÑ .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...');
                await this.createDefaultEnvFile();
            }

            const envContent = await fs.readFile(this.envPath, 'utf8');
            const config = this.parseEnvContent(envContent);
            
            return {
                success: true,
                config: config,
                path: this.envPath
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:', error);
            return {
                success: false,
                error: error.message,
                config: this.defaultConfig
            };
        }
    }

    async saveConfig(config) {
        try {
            const envContent = this.generateEnvContent(config);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            await this.createBackup();
            
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            await fs.writeFile(this.envPath, envContent, 'utf8');
            
            console.log('‚úÖ .env —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
            
            return {
                success: true,
                message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .env —Ñ–∞–π–ª–∞:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async resetToDefaults() {
        try {
            await this.createBackup();
            await this.createDefaultEnvFile();
            
            console.log('‚úÖ .env —Ñ–∞–π–ª —Å–±—Ä–æ—à–µ–Ω –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            
            return {
                success: true,
                message: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                config: this.defaultConfig
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ .env —Ñ–∞–π–ª–∞:', error);
            return {
                success: false,
                error: error.message
            };
        }
    }

    async createDefaultEnvFile() {
        const content = this.generateEnvContent(this.defaultConfig);
        await fs.writeFile(this.envPath, content, 'utf8');
    }

    generateEnvContent(config) {
        let content = '# ATB Trading System Enhanced Configuration\n';
        content += `# –°–æ–∑–¥–∞–Ω–æ: ${new Date().toISOString()}\n\n`;

        // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        const groups = {
            '–û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏': [
                'NODE_ENV', 'ENVIRONMENT', 'DEBUG', 'ATB_MODE'
            ],
            '–°–µ—Ä–≤–µ—Ä': [
                'BACKEND_PORT', 'FRONTEND_PORT'
            ],
            '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö': [
                'DB_HOST', 'DB_PORT', 'DB_NAME', 'DB_USER', 'DB_PASS'
            ],
            '–ë–∏—Ä–∂–∞': [
                'EXCHANGE_API_KEY', 'EXCHANGE_API_SECRET', 'EXCHANGE_TESTNET'
            ],
            '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥': [
                'MONITORING_ENABLED', 'MONITORING_INTERVAL', 'ALERT_EMAIL'
            ],
            '–≠–≤–æ–ª—é—Ü–∏—è': [
                'EVOLUTION_ENABLED', 'EVOLUTION_INTERVAL', 'AUTO_EVOLUTION'
            ],
            '–¢–æ—Ä–≥–æ–≤–ª—è': [
                'DEFAULT_POSITION_SIZE', 'DEFAULT_STOP_LOSS', 'MAX_DRAWDOWN'
            ],
            '–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ': [
                'LOG_LEVEL', 'LOG_FILE'
            ],
            '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å': [
                'ENABLE_CORS', 'JWT_SECRET'
            ]
        };

        for (const [groupName, keys] of Object.entries(groups)) {
            content += `# ${groupName}\n`;
            
            for (const key of keys) {
                const value = config[key] || this.defaultConfig[key] || '';
                const comment = this.getConfigComment(key);
                
                if (comment) {
                    content += `# ${comment}\n`;
                }
                
                content += `${key}=${value}\n`;
            }
            
            content += '\n';
        }

        return content;
    }

    parseEnvContent(content) {
        const config = {};
        const lines = content.split('\n');

        for (const line of lines) {
            const trimmed = line.trim();
            
            // –ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
            if (trimmed.startsWith('#') || trimmed === '') {
                continue;
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            const equalIndex = trimmed.indexOf('=');
            if (equalIndex !== -1) {
                const key = trimmed.substring(0, equalIndex).trim();
                const value = trimmed.substring(equalIndex + 1).trim();
                
                // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                config[key] = value.replace(/^["']|["']$/g, '');
            }
        }

        return config;
    }

    getConfigComment(key) {
        const comments = {
            NODE_ENV: '–†–µ–∂–∏–º Node.js (production, development)',
            ENVIRONMENT: '–°—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏',
            DEBUG: '–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É (true/false)',
            ATB_MODE: '–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ (simulation, paper, live)',
            
            BACKEND_PORT: '–ü–æ—Ä—Ç –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞',
            FRONTEND_PORT: '–ü–æ—Ä—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞',
            
            DB_HOST: '–•–æ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            DB_PORT: '–ü–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            DB_NAME: '–ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            DB_USER: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            DB_PASS: '–ü–∞—Ä–æ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
            
            EXCHANGE_API_KEY: 'API –∫–ª—é—á –±–∏—Ä–∂–∏',
            EXCHANGE_API_SECRET: 'API —Å–µ–∫—Ä–µ—Ç –±–∏—Ä–∂–∏',
            EXCHANGE_TESTNET: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Ç—å (true/false)',
            
            MONITORING_ENABLED: '–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (true/false)',
            MONITORING_INTERVAL: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö',
            ALERT_EMAIL: 'Email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            
            EVOLUTION_ENABLED: '–í–∫–ª—é—á–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é —Å—Ç—Ä–∞—Ç–µ–≥–∏–π (true/false)',
            EVOLUTION_INTERVAL: '–ò–Ω—Ç–µ—Ä–≤–∞–ª —ç–≤–æ–ª—é—Ü–∏–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö',
            AUTO_EVOLUTION: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —ç–≤–æ–ª—é—Ü–∏—è (true/false)',
            
            DEFAULT_POSITION_SIZE: '–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
            DEFAULT_STOP_LOSS: '–°—Ç–æ–ø-–ª–æ—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (%)',
            MAX_DRAWDOWN: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (%)',
            
            LOG_LEVEL: '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (debug, info, warn, error)',
            LOG_FILE: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤',
            
            ENABLE_CORS: '–í–∫–ª—é—á–∏—Ç—å CORS (true/false)',
            JWT_SECRET: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤'
        };

        return comments[key] || null;
    }

    async createBackup() {
        try {
            const exists = await this.fileExists(this.envPath);
            if (!exists) return;

            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const backupPath = path.join(process.cwd(), `.env.backup.${timestamp}`);
            
            const content = await fs.readFile(this.envPath, 'utf8');
            await fs.writeFile(backupPath, content, 'utf8');
            
            console.log(`üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: ${backupPath}`);

        } catch (error) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:', error.message);
        }
    }

    async fileExists(filePath) {
        try {
            await fs.access(filePath);
            return true;
        } catch {
            return false;
        }
    }

    async validateConfig(config) {
        const errors = [];
        const warnings = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        const required = ['NODE_ENV', 'ATB_MODE', 'BACKEND_PORT'];
        for (const field of required) {
            if (!config[field]) {
                errors.push(`–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ '${field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        const numeric = ['BACKEND_PORT', 'FRONTEND_PORT', 'DB_PORT', 'MONITORING_INTERVAL', 'EVOLUTION_INTERVAL'];
        for (const field of numeric) {
            if (config[field] && isNaN(Number(config[field]))) {
                errors.push(`–ü–æ–ª–µ '${field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—É–ª–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        const boolean = ['DEBUG', 'EXCHANGE_TESTNET', 'MONITORING_ENABLED', 'EVOLUTION_ENABLED', 'AUTO_EVOLUTION', 'ENABLE_CORS'];
        for (const field of boolean) {
            if (config[field] && !['true', 'false'].includes(config[field].toLowerCase())) {
                errors.push(`–ü–æ–ª–µ '${field}' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true –∏–ª–∏ false`);
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–æ–≤
        const validModes = ['simulation', 'paper', 'live'];
        if (config.ATB_MODE && !validModes.includes(config.ATB_MODE)) {
            errors.push(`ATB_MODE –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: ${validModes.join(', ')}`);
        }

        // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (config.ATB_MODE === 'live' && (!config.EXCHANGE_API_KEY || !config.EXCHANGE_API_SECRET)) {
            warnings.push('–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á–∏ –±–∏—Ä–∂–∏');
        }

        if (config.JWT_SECRET === 'your-secret-key') {
            warnings.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å JWT_SECRET –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É');
        }

        return {
            isValid: errors.length === 0,
            errors,
            warnings
        };
    }

    async getConfigInfo() {
        try {
            const config = await this.getConfig();
            const validation = await this.validateConfig(config.config);
            
            const stats = await fs.stat(this.envPath);
            
            return {
                success: true,
                info: {
                    path: this.envPath,
                    size: stats.size,
                    modified: stats.mtime,
                    created: stats.birthtime,
                    variablesCount: Object.keys(config.config).length,
                    validation: validation
                }
            };

        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    getCurrentEnv() {
        const filtered = {};
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ ATB-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        for (const [key, value] of Object.entries(process.env)) {
            if (key.startsWith('ATB_') || 
                key.startsWith('DB_') || 
                key.startsWith('EXCHANGE_') ||
                key.startsWith('MONITORING_') ||
                key.startsWith('EVOLUTION_') ||
                ['NODE_ENV', 'ENVIRONMENT', 'DEBUG', 'LOG_LEVEL'].includes(key)) {
                filtered[key] = value;
            }
        }

        return filtered;
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∫ process.env
    applyToProcess(config) {
        for (const [key, value] of Object.entries(config)) {
            process.env[key] = value;
        }
    }
}

module.exports = { EnvironmentManager };