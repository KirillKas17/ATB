const { app, BrowserWindow, Menu, Tray, ipcMain, dialog, shell } = require('electron');
const path = require('path');
const isDev = process.env.NODE_ENV === 'development';

// –ò–º–ø–æ—Ä—Ç –±—ç–∫–µ–Ω–¥–∞
let startBackendServer, SystemMonitor, EvolutionManager, EnvironmentManager;

try {
    ({ startBackendServer } = require('./backend/server'));
    ({ SystemMonitor } = require('./backend/system-monitor'));
    ({ EnvironmentManager } = require('./backend/environment-manager'));
    
    // EvolutionManager –∑–∞–≥–ª—É—à–∫–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω
    EvolutionManager = class {
        async getStatus() {
            return {
                enabled: true,
                running: false,
                strategies: [],
                timestamp: new Date().toISOString()
            };
        }
        async start() { return { success: true }; }
        async stop() { return { success: true }; }
    };
} catch (error) {
    console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ backend –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã:', error.message);
    
    // –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
    startBackendServer = async () => ({ success: false, error: 'Backend not available' });
    SystemMonitor = class {
        async getMetrics() { return {}; }
        async getProcesses() { return []; }
    };
    EvolutionManager = class {
        async getStatus() { return { enabled: false }; }
        async start() { return { success: false }; }
        async stop() { return { success: false }; }
    };
    EnvironmentManager = class {
        async getConfig() { return { success: false }; }
        async saveConfig() { return { success: false }; }
        async resetToDefaults() { return { success: false }; }
    };
}

class ATBDesktopApp {
    constructor() {
        this.mainWindow = null;
        this.tray = null;
        this.backendServer = null;
        this.systemMonitor = null;
        this.evolutionManager = null;
        this.environmentManager = null;
    }

    async init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—ç–∫–µ–Ω–¥–∞
        this.environmentManager = new EnvironmentManager();
        this.systemMonitor = new SystemMonitor();
        this.evolutionManager = new EvolutionManager();
        
        // –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥ —Å–µ—Ä–≤–µ—Ä–∞
        this.backendServer = await startBackendServer();
        
        console.log('üöÄ ATB Trading System Enhanced Desktop v3.1 - Starting...');
    }

    createMainWindow() {
        // –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        this.mainWindow = new BrowserWindow({
            width: 1920,
            height: 1200,
            minWidth: 1400,
            minHeight: 900,
            icon: path.join(__dirname, 'assets', 'icon.png'),
            webPreferences: {
                nodeIntegration: false,
                contextIsolation: true,
                enableRemoteModule: false,
                preload: path.join(__dirname, 'preload.js')
            },
            titleBarStyle: 'default',
            frame: true,
            show: false,
            backgroundColor: '#0a0a0a'
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        const startUrl = isDev 
            ? 'http://localhost:3000' 
            : `file://${path.join(__dirname, 'renderer/index.html')}`;
        
        this.mainWindow.loadURL(startUrl);

        // –ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤–æ
        this.mainWindow.once('ready-to-show', () => {
            this.mainWindow.show();
            
            if (isDev) {
                this.mainWindow.webContents.openDevTools();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        this.mainWindow.on('close', (event) => {
            if (!app.isQuiting) {
                event.preventDefault();
                this.mainWindow.hide();
                this.showTrayNotification('ATB Trading System', '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–≤–µ—Ä–Ω—É—Ç–æ –≤ —Ç—Ä–µ–π');
            }
        });

        this.mainWindow.on('closed', () => {
            this.mainWindow = null;
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö —Å—Å—ã–ª–æ–∫
        this.mainWindow.webContents.setWindowOpenHandler(({ url }) => {
            shell.openExternal(url);
            return { action: 'deny' };
        });
    }

    createTray() {
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
        const iconPath = path.join(__dirname, 'assets', 'tray-icon.png');
        this.tray = new Tray(iconPath);

        const contextMenu = Menu.buildFromTemplate([
            {
                label: '‚ö° ATB Trading System v3.1',
                enabled: false
            },
            { type: 'separator' },
            {
                label: 'üìä –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥',
                click: () => {
                    if (this.mainWindow) {
                        this.mainWindow.show();
                        this.mainWindow.focus();
                    }
                }
            },
            {
                label: 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏',
                click: () => {
                    this.showSystemMetrics();
                }
            },
            {
                label: 'üß¨ –≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π',
                click: () => {
                    this.showEvolutionStatus();
                }
            },
            {
                label: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ .env',
                click: () => {
                    this.openEnvSettings();
                }
            },
            { type: 'separator' },
            {
                label: 'üö™ –í—ã—Ö–æ–¥',
                click: () => {
                    app.isQuiting = true;
                    app.quit();
                }
            }
        ]);

        this.tray.setContextMenu(contextMenu);
        this.tray.setToolTip('ATB Trading System Enhanced v3.1');

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞ –ø–æ —Ç—Ä–µ—é
        this.tray.on('double-click', () => {
            if (this.mainWindow) {
                this.mainWindow.show();
                this.mainWindow.focus();
            }
        });
    }

    createMenu() {
        const template = [
            {
                label: 'üìÅ –§–∞–π–ª',
                submenu: [
                    {
                        label: 'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è',
                        click: () => this.openEnvSettings()
                    },
                    { type: 'separator' },
                    {
                        label: 'üì• –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                        click: () => this.importData()
                    },
                    {
                        label: 'üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
                        click: () => this.exportData()
                    },
                    { type: 'separator' },
                    {
                        label: 'üö™ –í—ã—Ö–æ–¥',
                        accelerator: 'CmdOrCtrl+Q',
                        click: () => {
                            app.isQuiting = true;
                            app.quit();
                        }
                    }
                ]
            },
            {
                label: 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞',
                submenu: [
                    {
                        label: 'üìä –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏',
                        click: () => this.showSystemMetrics()
                    },
                    {
                        label: '‚öôÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã',
                        click: () => this.showProcesses()
                    },
                    { type: 'separator' },
                    {
                        label: 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å',
                        accelerator: 'CmdOrCtrl+R',
                        click: () => this.mainWindow.reload()
                    }
                ]
            },
            {
                label: 'üß¨ –≠–≤–æ–ª—é—Ü–∏—è',
                submenu: [
                    {
                        label: 'üìà –°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏',
                        click: () => this.showEvolutionStatus()
                    },
                    {
                        label: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é',
                        click: () => this.startEvolution()
                    },
                    {
                        label: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é',
                        click: () => this.stopEvolution()
                    }
                ]
            },
            {
                label: 'üíº –¢–æ—Ä–≥–æ–≤–ª—è',
                submenu: [
                    {
                        label: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é',
                        click: () => this.startTrading()
                    },
                    {
                        label: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é',
                        click: () => this.stopTrading()
                    },
                    { type: 'separator' },
                    {
                        label: 'üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å',
                        click: () => this.showPortfolio()
                    }
                ]
            },
            {
                label: '‚ùì –°–ø—Ä–∞–≤–∫–∞',
                submenu: [
                    {
                        label: 'üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
                        click: () => shell.openExternal('https://github.com/atb-trading/docs')
                    },
                    {
                        label: 'üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ',
                        click: () => shell.openExternal('https://github.com/atb-trading/issues')
                    },
                    { type: 'separator' },
                    {
                        label: '‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ',
                        click: () => this.showAbout()
                    }
                ]
            }
        ];

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (isDev) {
            template.push({
                label: 'üîß –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞',
                submenu: [
                    {
                        label: 'üîç –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞',
                        accelerator: 'F12',
                        click: () => this.mainWindow.webContents.openDevTools()
                    },
                    {
                        label: 'üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',
                        accelerator: 'CmdOrCtrl+Shift+R',
                        click: () => this.mainWindow.webContents.reloadIgnoringCache()
                    }
                ]
            });
        }

        const menu = Menu.buildFromTemplate(template);
        Menu.setApplicationMenu(menu);
    }

    setupIPC() {
        // IPC –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å —Ä–µ–Ω–¥–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–º

        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        ipcMain.handle('get-system-metrics', async () => {
            return await this.systemMonitor.getMetrics();
        });

        // –≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        ipcMain.handle('get-evolution-status', async () => {
            return await this.evolutionManager.getStatus();
        });

        ipcMain.handle('start-evolution', async () => {
            return await this.evolutionManager.start();
        });

        ipcMain.handle('stop-evolution', async () => {
            return await this.evolutionManager.stop();
        });

        // .env —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        ipcMain.handle('get-env-config', async () => {
            return await this.environmentManager.getConfig();
        });

        ipcMain.handle('save-env-config', async (event, config) => {
            return await this.environmentManager.saveConfig(config);
        });

        ipcMain.handle('reset-env-config', async () => {
            return await this.environmentManager.resetToDefaults();
        });

        // –¢–æ—Ä–≥–æ–≤–ª—è
        ipcMain.handle('start-trading', async () => {
            return await this.startTradingSystem();
        });

        ipcMain.handle('stop-trading', async () => {
            return await this.stopTradingSystem();
        });

        // –î–∏–∞–ª–æ–≥–∏
        ipcMain.handle('show-message-box', async (event, options) => {
            const result = await dialog.showMessageBox(this.mainWindow, options);
            return result;
        });

        ipcMain.handle('show-save-dialog', async (event, options) => {
            const result = await dialog.showSaveDialog(this.mainWindow, options);
            return result;
        });

        ipcMain.handle('show-open-dialog', async (event, options) => {
            const result = await dialog.showOpenDialog(this.mainWindow, options);
            return result;
        });

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        ipcMain.handle('show-notification', (event, title, body) => {
            this.showTrayNotification(title, body);
        });

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        ipcMain.on('log', (event, level, message) => {
            console.log(`[${level.toUpperCase()}] ${message}`);
        });
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
    async showSystemMetrics() {
        if (this.mainWindow) {
            this.mainWindow.show();
            this.mainWindow.focus();
            this.mainWindow.webContents.send('navigate-to-tab', 'system');
        }
    }

    async showEvolutionStatus() {
        if (this.mainWindow) {
            this.mainWindow.show();
            this.mainWindow.focus();
            this.mainWindow.webContents.send('navigate-to-tab', 'evolution');
        }
    }

    async openEnvSettings() {
        if (this.mainWindow) {
            this.mainWindow.show();
            this.mainWindow.focus();
            this.mainWindow.webContents.send('navigate-to-tab', 'settings');
        }
    }

    async showPortfolio() {
        if (this.mainWindow) {
            this.mainWindow.show();
            this.mainWindow.focus();
            this.mainWindow.webContents.send('navigate-to-tab', 'portfolio');
        }
    }

    async showProcesses() {
        const processes = await this.systemMonitor.getProcesses();
        dialog.showMessageBox(this.mainWindow, {
            type: 'info',
            title: '–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã',
            message: '–¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ CPU',
            detail: processes.map(p => `${p.name}: ${p.cpu}%`).join('\n')
        });
    }

    async startEvolution() {
        try {
            await this.evolutionManager.start();
            this.showTrayNotification('–≠–≤–æ–ª—é—Ü–∏—è', '–≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∑–∞–ø—É—â–µ–Ω–∞');
        } catch (error) {
            dialog.showErrorBox('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é: ${error.message}`);
        }
    }

    async stopEvolution() {
        try {
            await this.evolutionManager.stop();
            this.showTrayNotification('–≠–≤–æ–ª—é—Ü–∏—è', '–≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
        } catch (error) {
            dialog.showErrorBox('–û—à–∏–±–∫–∞', `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–≤–æ–ª—é—Ü–∏—é: ${error.message}`);
        }
    }

    async startTrading() {
        if (this.mainWindow) {
            this.mainWindow.webContents.send('start-trading');
        }
    }

    async stopTrading() {
        if (this.mainWindow) {
            this.mainWindow.webContents.send('stop-trading');
        }
    }

    async importData() {
        const result = await dialog.showOpenDialog(this.mainWindow, {
            title: '–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
            filters: [
                { name: 'JSON —Ñ–∞–π–ª—ã', extensions: ['json'] },
                { name: 'CSV —Ñ–∞–π–ª—ã', extensions: ['csv'] },
                { name: '–í—Å–µ —Ñ–∞–π–ª—ã', extensions: ['*'] }
            ]
        });

        if (!result.canceled && result.filePaths.length > 0) {
            this.mainWindow.webContents.send('import-data', result.filePaths[0]);
        }
    }

    async exportData() {
        const result = await dialog.showSaveDialog(this.mainWindow, {
            title: '–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö',
            defaultPath: `atb-export-${new Date().toISOString().split('T')[0]}.json`,
            filters: [
                { name: 'JSON —Ñ–∞–π–ª—ã', extensions: ['json'] },
                { name: 'CSV —Ñ–∞–π–ª—ã', extensions: ['csv'] }
            ]
        });

        if (!result.canceled && result.filePath) {
            this.mainWindow.webContents.send('export-data', result.filePath);
        }
    }

    showAbout() {
        dialog.showMessageBox(this.mainWindow, {
            type: 'info',
            title: '–û –ø—Ä–æ–≥—Ä–∞–º–º–µ',
            message: '‚ö° ATB Trading System Enhanced v3.1',
            detail: 'üöÄ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞ Electron\n\n' +
                   '‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n' +
                   '‚Ä¢ ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –ò–ò\n' +
                   '‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤\n' +
                   '‚Ä¢ üß¨ –≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n' +
                   '‚Ä¢ üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ .env –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n' +
                   '‚Ä¢ üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º\n' +
                   '‚Ä¢ üîÆ ML –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n' +
                   '¬© 2024 ATB Trading Team'
        });
    }

    showTrayNotification(title, body) {
        if (this.tray) {
            this.tray.displayBalloon({
                title: title,
                content: body,
                icon: path.join(__dirname, 'assets', 'icon.png')
            });
        }
    }

    async startTradingSystem() {
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        console.log('üöÄ Starting trading system...');
        return { success: true, message: 'Trading system started' };
    }

    async stopTradingSystem() {
        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        console.log('‚èπÔ∏è Stopping trading system...');
        return { success: true, message: 'Trading system stopped' };
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const atbApp = new ATBDesktopApp();

app.whenReady().then(async () => {
    await atbApp.init();
    atbApp.createMainWindow();
    atbApp.createTray();
    atbApp.createMenu();
    atbApp.setupIPC();

    app.on('activate', () => {
        if (BrowserWindow.getAllWindows().length === 0) {
            atbApp.createMainWindow();
        }
    });
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('before-quit', () => {
    app.isQuiting = true;
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = { ATBDesktopApp };