// ============================================================================
// ATB Trading System - Main JavaScript
// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è Electron –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ============================================================================

class ATBApp {
    constructor() {
        this.isConnected = false;
        this.currentTab = 'overview';
        this.updateInterval = null;
        this.charts = {};
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
        document.addEventListener('DOMContentLoaded', () => {
            this.init();
        });
    }

    async init() {
        console.log('üöÄ ATB Trading System Enhanced Desktop v3.1 - Initializing...');
        
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            this.initEventListeners();
            this.initTabNavigation();
            this.initCharts();
            
            // –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            this.startDataUpdates();
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Electron API
            this.checkElectronAPI();
            
            console.log('‚úÖ ATB App initialized successfully');
            this.showNotification('–°–∏—Å—Ç–µ–º–∞', 'ATB Trading System Enhanced –∑–∞–ø—É—â–µ–Ω');
            
        } catch (error) {
            console.error('‚ùå Error initializing ATB App:', error);
            this.showError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error.message);
        }
    }

    checkElectronAPI() {
        if (window.electronAPI) {
            console.log('‚úÖ Electron API –¥–æ—Å—Ç—É–ø–µ–Ω');
            this.isConnected = true;
            this.updateConnectionStatus(true);
            
            // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            window.electronAPI.onNavigateToTab((event, tabName) => {
                this.switchTab(tabName);
            });
            
            window.electronAPI.onStartTrading((event) => {
                this.startTrading();
            });
            
            window.electronAPI.onStopTrading((event) => {
                this.stopTrading();
            });
            
        } else {
            console.warn('‚ö†Ô∏è Electron API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ä–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ');
            this.isConnected = false;
            this.updateConnectionStatus(false);
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
            this.loadDemoData();
        }
    }

    initEventListeners() {
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        const settingsBtn = document.getElementById('settingsBtn');
        const minimizeBtn = document.getElementById('minimizeBtn');
        const closeBtn = document.getElementById('closeBtn');

        if (settingsBtn) {
            settingsBtn.addEventListener('click', () => this.openSettings());
        }

        if (minimizeBtn) {
            minimizeBtn.addEventListener('click', () => this.minimizeWindow());
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', () => this.closeWindow());
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        const tradingToggle = document.getElementById('tradingToggle');
        const evolutionBtn = document.getElementById('evolutionBtn');
        const envBtn = document.getElementById('envBtn');
        const tradingMode = document.getElementById('tradingMode');

        if (tradingToggle) {
            tradingToggle.addEventListener('click', () => this.toggleTrading());
        }

        if (evolutionBtn) {
            evolutionBtn.addEventListener('click', () => this.openEvolution());
        }

        if (envBtn) {
            envBtn.addEventListener('click', () => this.openEnvSettings());
        }

        if (tradingMode) {
            tradingMode.addEventListener('change', (e) => this.changeTradingMode(e.target.value));
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        const priceSymbol = document.getElementById('priceSymbol');
        if (priceSymbol) {
            priceSymbol.addEventListener('change', (e) => this.changePriceSymbol(e.target.value));
        }
    }

    initTabNavigation() {
        const tabButtons = document.querySelectorAll('.tab-btn');
        
        tabButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                const tabName = button.getAttribute('data-tab');
                this.switchTab(tabName);
            });
        });
    }

    switchTab(tabName) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const activeButton = document.querySelector(`[data-tab="${tabName}"]`);
        if (activeButton) {
            activeButton.classList.add('active');
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        document.querySelectorAll('.tab-pane').forEach(pane => {
            pane.classList.remove('active');
        });
        
        const activePane = document.getElementById(tabName);
        if (activePane) {
            activePane.classList.add('active');
            
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∫–ª–∞–¥–∫–∏
            this.onTabSwitch(tabName);
        }

        this.currentTab = tabName;
        console.log(`üìã –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É: ${tabName}`);
    }

    onTabSwitch(tabName) {
        switch (tabName) {
            case 'overview':
                this.updateOverviewData();
                break;
            case 'system':
                this.updateSystemData();
                break;
            case 'evolution':
                this.updateEvolutionData();
                break;
            case 'trading':
                this.updateTradingData();
                break;
            case 'portfolio':
                this.updatePortfolioData();
                break;
            case 'settings':
                this.updateSettingsData();
                break;
        }
    }

    initCharts() {
        this.initPriceChart();
        this.initPnlChart();
        this.initSystemChart();
    }

    initPriceChart() {
        const canvas = document.getElementById('priceChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        
        this.charts.price = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'BTC/USDT',
                    data: [],
                    borderColor: '#e94560',
                    backgroundColor: 'rgba(233, 69, 96, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#eee'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#ccc' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    },
                    y: {
                        ticks: { color: '#ccc' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    }
                }
            }
        });
    }

    initPnlChart() {
        const canvas = document.getElementById('pnlChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        
        this.charts.pnl = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [{
                    label: 'P&L',
                    data: [],
                    borderColor: '#00ff88',
                    backgroundColor: 'rgba(0, 255, 136, 0.1)',
                    borderWidth: 2,
                    fill: true,
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#eee'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#ccc' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    },
                    y: {
                        ticks: { color: '#ccc' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    }
                }
            }
        });
    }

    initSystemChart() {
        const canvas = document.getElementById('systemChart');
        if (!canvas) return;

        const ctx = canvas.getContext('2d');
        
        this.charts.system = new Chart(ctx, {
            type: 'line',
            data: {
                labels: [],
                datasets: [
                    {
                        label: 'CPU %',
                        data: [],
                        borderColor: '#e94560',
                        backgroundColor: 'rgba(233, 69, 96, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4
                    },
                    {
                        label: 'Memory %',
                        data: [],
                        borderColor: '#45b7d1',
                        backgroundColor: 'rgba(69, 183, 209, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        labels: {
                            color: '#eee'
                        }
                    }
                },
                scales: {
                    x: {
                        ticks: { color: '#ccc' },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    },
                    y: {
                        beginAtZero: true,
                        max: 100,
                        ticks: { 
                            color: '#ccc',
                            callback: function(value) {
                                return value + '%';
                            }
                        },
                        grid: { color: 'rgba(255, 255, 255, 0.1)' }
                    }
                }
            }
        });
    }

    startDataUpdates() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        this.updateInterval = setInterval(() => {
            this.updateData();
        }, 5000);

        // –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
        this.updateData();
    }

    async updateData() {
        try {
            if (this.isConnected && window.electronAPI) {
                // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Electron API
                await this.updateRealData();
            } else {
                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
                this.updateDemoData();
            }
            
            this.updateLastUpdateTime();
            
        } catch (error) {
            console.error('‚ùå Error updating data:', error);
        }
    }

    async updateRealData() {
        try {
            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            const systemMetrics = await window.electronAPI.getSystemMetrics();
            this.updateSystemMetrics(systemMetrics);

            // –°—Ç–∞—Ç—É—Å —ç–≤–æ–ª—é—Ü–∏–∏
            const evolutionStatus = await window.electronAPI.getEvolutionStatus();
            this.updateEvolutionStatus(evolutionStatus);

            // ENV –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            const envConfig = await window.electronAPI.getEnvConfig();
            this.updateEnvStatus(envConfig);

        } catch (error) {
            console.error('‚ùå Error fetching real data:', error);
            this.fallbackToDemoData();
        }
    }

    loadDemoData() {
        console.log('üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        this.generateDemoChartData();
        
        // –î–µ–º–æ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        this.updateSystemMetrics({
            cpu: { percent: 25, cores: 8, frequency: 3200 },
            memory: { percent: 45, total: 16000000000, free: 8800000000 },
            disk: { percent: 60, total: 500000000000, free: 200000000000 },
            network: { bytes_sent: 1024000, bytes_recv: 2048000 }
        });
    }

    updateDemoData() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        const currentTime = new Date().toLocaleTimeString();
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        const cpu = Math.random() * 30 + 20;
        const memory = Math.random() * 20 + 40;
        const disk = 60 + Math.random() * 5;
        
        this.updateSystemMetrics({
            cpu: { percent: Math.round(cpu), cores: 8, frequency: 3200 },
            memory: { percent: Math.round(memory), total: 16000000000, free: 8800000000 },
            disk: { percent: Math.round(disk), total: 500000000000, free: 200000000000 },
            network: { bytes_sent: 1024000 + Math.random() * 100000, bytes_recv: 2048000 + Math.random() * 200000 }
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        this.updateChartData(cpu, memory);
        
        // P&L –¥–∞–Ω–Ω—ã–µ
        const pnl = (Math.random() - 0.5) * 100;
        this.updatePnlData(pnl);
    }

    updateSystemMetrics(metrics) {
        // CPU
        const cpuPercent = document.getElementById('cpuPercent');
        const cpuMini = document.getElementById('cpuMini');
        const cpuCores = document.getElementById('cpuCores');
        const cpuFreq = document.getElementById('cpuFreq');
        
        if (cpuPercent) cpuPercent.textContent = `${metrics.cpu.percent}%`;
        if (cpuMini) cpuMini.textContent = `${metrics.cpu.percent}%`;
        if (cpuCores) cpuCores.textContent = metrics.cpu.cores;
        if (cpuFreq) cpuFreq.textContent = `${metrics.cpu.frequency} MHz`;

        // Memory
        const memoryPercent = document.getElementById('memoryPercent');
        const ramMini = document.getElementById('ramMini');
        const memoryTotal = document.getElementById('memoryTotal');
        const memoryFree = document.getElementById('memoryFree');
        
        if (memoryPercent) memoryPercent.textContent = `${metrics.memory.percent}%`;
        if (ramMini) ramMini.textContent = `${metrics.memory.percent}%`;
        if (memoryTotal) memoryTotal.textContent = this.formatBytes(metrics.memory.total);
        if (memoryFree) memoryFree.textContent = this.formatBytes(metrics.memory.free);

        // Disk
        const diskPercent = document.getElementById('diskPercent');
        const diskTotal = document.getElementById('diskTotal');
        const diskFree = document.getElementById('diskFree');
        
        if (diskPercent) diskPercent.textContent = `${metrics.disk.percent}%`;
        if (diskTotal) diskTotal.textContent = this.formatBytes(metrics.disk.total);
        if (diskFree) diskFree.textContent = this.formatBytes(metrics.disk.free);

        // Network
        const networkSent = document.getElementById('networkSent');
        const networkRecv = document.getElementById('networkRecv');
        
        if (networkSent) networkSent.textContent = this.formatBytes(metrics.network.bytes_sent);
        if (networkRecv) networkRecv.textContent = this.formatBytes(metrics.network.bytes_recv);
    }

    updateChartData(cpu, memory) {
        const currentTime = new Date().toLocaleTimeString();
        
        if (this.charts.system) {
            const chart = this.charts.system;
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            chart.data.labels.push(currentTime);
            chart.data.datasets[0].data.push(cpu);
            chart.data.datasets[1].data.push(memory);
            
            // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ—á–µ–∫
            if (chart.data.labels.length > 20) {
                chart.data.labels.shift();
                chart.data.datasets[0].data.shift();
                chart.data.datasets[1].data.shift();
            }
            
            chart.update('none');
        }
    }

    updatePnlData(pnl) {
        const currentPnl = document.getElementById('currentPnl');
        if (currentPnl) {
            currentPnl.textContent = `$${pnl.toFixed(2)}`;
            currentPnl.className = `pnl-value ${pnl >= 0 ? 'positive' : 'negative'}`;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ P&L
        if (this.charts.pnl) {
            const chart = this.charts.pnl;
            const currentTime = new Date().toLocaleTimeString();
            
            chart.data.labels.push(currentTime);
            chart.data.datasets[0].data.push(pnl);
            
            if (chart.data.labels.length > 20) {
                chart.data.labels.shift();
                chart.data.datasets[0].data.shift();
            }
            
            chart.update('none');
        }
    }

    generateDemoChartData() {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω
        if (this.charts.price) {
            const chart = this.charts.price;
            const basePrice = 45000;
            
            for (let i = 0; i < 20; i++) {
                const time = new Date(Date.now() - (20 - i) * 60000).toLocaleTimeString();
                const price = basePrice + (Math.random() - 0.5) * 2000;
                
                chart.data.labels.push(time);
                chart.data.datasets[0].data.push(price);
            }
            
            chart.update();
        }
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∫–ª–∞–¥–∫–∞–º
    updateOverviewData() {
        console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±–∑–æ—Ä–∞');
    }

    updateSystemData() {
        console.log('üñ•Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }

    updateEvolutionData() {
        console.log('üß¨ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç–≤–æ–ª—é—Ü–∏–∏');
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Evolution UI –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.evolutionUI) {
            window.evolutionUI.updateEvolutionData();
        }
    }

    updateTradingData() {
        console.log('üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }

    updatePortfolioData() {
        console.log('üíº –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è');
    }

    updateSettingsData() {
        console.log('‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    toggleTrading() {
        const button = document.getElementById('tradingToggle');
        const icon = button.querySelector('i');
        const text = button.querySelector('span');
        
        if (button.dataset.active === 'true') {
            // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
            button.dataset.active = 'false';
            icon.className = 'fas fa-play';
            text.textContent = '–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é';
            button.classList.remove('active');
            
            this.updateSystemStatus(false);
            this.showNotification('–¢–æ—Ä–≥–æ–≤–ª—è', '–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
            
        } else {
            // –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
            button.dataset.active = 'true';
            icon.className = 'fas fa-stop';
            text.textContent = '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é';
            button.classList.add('active');
            
            this.updateSystemStatus(true);
            this.showNotification('–¢–æ—Ä–≥–æ–≤–ª—è', '–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞');
        }
    }

    updateSystemStatus(isActive) {
        const statusDot = document.querySelector('#systemStatus .status-dot');
        const statusText = document.querySelector('#systemStatus span');
        const systemStatusText = document.getElementById('systemStatusText');
        
        if (isActive) {
            statusDot.className = 'status-dot online';
            statusText.textContent = '–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞';
            if (systemStatusText) systemStatusText.textContent = '–ê–∫—Ç–∏–≤–Ω–∞';
        } else {
            statusDot.className = 'status-dot offline';
            statusText.textContent = '–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
            if (systemStatusText) systemStatusText.textContent = '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞';
        }
    }

    updateConnectionStatus(isConnected) {
        const connectionDot = document.querySelector('#connectionStatus .connection-dot');
        const connectionText = document.querySelector('#connectionStatus span');
        const connectionIndicator = document.querySelector('.connection-indicator');
        const connectionTextEl = document.getElementById('connectionText');
        
        if (isConnected) {
            if (connectionDot) connectionDot.className = 'connection-dot online';
            if (connectionText) connectionText.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
            if (connectionIndicator) connectionIndicator.className = 'connection-indicator online';
            if (connectionTextEl) connectionTextEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –ê–∫—Ç–∏–≤–Ω–æ';
        } else {
            if (connectionDot) connectionDot.className = 'connection-dot offline';
            if (connectionText) connectionText.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
            if (connectionIndicator) connectionIndicator.className = 'connection-indicator offline';
            if (connectionTextEl) connectionTextEl.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: –û—Ç–∫–ª—é—á–µ–Ω–æ';
        }
    }

    changeTradingMode(mode) {
        const envModeStatus = document.getElementById('envModeStatus');
        const modeText = document.getElementById('modeText');
        
        const modeNames = {
            simulation: 'üéÆ –°–∏–º—É–ª—è—Ü–∏—è',
            paper: 'üìù –ë—É–º–∞–∂–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è',
            live: 'üí∞ –†–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è'
        };
        
        const modeName = modeNames[mode] || 'üéÆ –°–∏–º—É–ª—è—Ü–∏—è';
        
        if (envModeStatus) envModeStatus.textContent = modeName;
        if (modeText) modeText.textContent = modeName.substring(2);
        
        this.showNotification('–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞: ${modeName}`);
    }

    changePriceSymbol(symbol) {
        if (this.charts.price) {
            this.charts.price.data.datasets[0].label = symbol;
            this.charts.price.update();
        }
        
        this.showNotification('–ì—Ä–∞—Ñ–∏–∫', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ –ø–∞—Ä—É: ${symbol}`);
    }

    // –î–µ–π—Å—Ç–≤–∏—è —Å –æ–∫–Ω–æ–º
    minimizeWindow() {
        console.log('‚ûñ –°–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ –æ–∫–Ω–∞');
        // –í —Ä–µ–∞–ª—å–Ω–æ–º Electron —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è main –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    }

    closeWindow() {
        console.log('‚ùå –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞');
        // –í —Ä–µ–∞–ª—å–Ω–æ–º Electron —ç—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è main –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    }

    openSettings() {
        this.switchTab('settings');
    }

    openEvolution() {
        this.switchTab('evolution');
    }

    openEnvSettings() {
        this.switchTab('settings');
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ü–∏–∏ ENV
    }

    // –£—Ç–∏–ª–∏—Ç—ã
    formatBytes(bytes) {
        if (bytes === 0) return '0 B';
        
        const k = 1024;
        const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    updateLastUpdateTime() {
        const lastUpdateTime = document.getElementById('lastUpdateTime');
        if (lastUpdateTime) {
            const now = new Date().toLocaleTimeString();
            lastUpdateTime.textContent = `–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${now}`;
        }
    }

    showNotification(title, message) {
        console.log(`üîî ${title}: ${message}`);
        
        // –í —Ä–µ–∞–ª—å–Ω–æ–º Electron –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (window.electronAPI) {
            window.electronAPI.showNotification(title, message);
        } else {
            // –í–µ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ fallback
            if (Notification.permission === 'granted') {
                new Notification(title, { body: message });
            }
        }
    }

    showError(title, message) {
        console.error(`‚ùå ${title}: ${message}`);
        
        // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        this.addLogEntry('error', `${title}: ${message}`);
    }

    addLogEntry(level, message) {
        const logContainer = document.getElementById('logContainer');
        if (!logContainer) return;
        
        const time = new Date().toLocaleTimeString();
        const entry = document.createElement('div');
        entry.className = 'log-entry';
        entry.innerHTML = `
            <span class="log-time">${time}</span>
            <span class="log-level ${level}">${level.toUpperCase()}</span>
            <span class="log-message">${message}</span>
        `;
        
        logContainer.appendChild(entry);
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π
        while (logContainer.children.length > 50) {
            logContainer.removeChild(logContainer.firstChild);
        }
        
        // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    fallbackToDemoData() {
        console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
        this.isConnected = false;
        this.updateConnectionStatus(false);
        this.loadDemoData();
    }

    destroy() {
        // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        if (this.updateInterval) {
            clearInterval(this.updateInterval);
        }
        
        // –û—á–∏—Å—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        Object.values(this.charts).forEach(chart => {
            if (chart) chart.destroy();
        });
        
        // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π Electron
        if (window.electronAPI) {
            window.electronAPI.removeAllListeners('navigate-to-tab');
            window.electronAPI.removeAllListeners('start-trading');
            window.electronAPI.removeAllListeners('stop-trading');
        }
        
        console.log('üßπ ATB App destroyed');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.atbApp = new ATBApp();

// –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    if (window.atbApp) {
        window.atbApp.destroy();
    }
});

console.log('‚ö° ATB Trading System Enhanced Desktop v3.1 - Main script loaded');