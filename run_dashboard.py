#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ ATB Trading Dashboard
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
"""

import sys
import os
from pathlib import Path
from typing import Any, Dict, List, Optional, Tuple

def check_python_version() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    if sys.version_info < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        print(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: {sys.version}")
        return False
    return True

def check_dependencies() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages: Dict[str, str] = {
        'tkinter': 'tkinter (–≤—Å—Ç—Ä–æ–µ–Ω –≤ Python)',
        'numpy': 'numpy',
        'pandas': 'pandas', 
        'matplotlib': 'matplotlib',
        'decimal': 'decimal (–≤—Å—Ç—Ä–æ–µ–Ω –≤ Python)'
    }
    
    missing_packages: List[str] = []
    
    for package, install_name in required_packages.items():
        try:
            if package == 'tkinter':
                import tkinter
            elif package == 'numpy':
                from shared.numpy_utils import np
            elif package == 'pandas':
                import pandas
            elif package == 'matplotlib':
                import matplotlib
            elif package == 'decimal':
                import decimal
                
            print(f"‚úÖ {package} - —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except ImportError:
            print(f"‚ùå {package} - –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(install_name)
    
    if missing_packages:
        print("\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        for package in missing_packages:
            print(f"   pip install {package}")
        return False
    
    return True

def setup_environment() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
    current_dir = Path(__file__).parent.absolute()
    if str(current_dir) not in sys.path:
        sys.path.insert(0, str(current_dir))
    
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for directory in ['logs', 'data', 'temp']:
        dir_path: Path = current_dir / directory
        dir_path.mkdir(exist_ok=True)

def run_dashboard() -> None:
    """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    try:
        import tkinter as tk
        from tkinter import ttk, messagebox
        import numpy as np
        import matplotlib.pyplot as plt
        from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
        from datetime import datetime, timedelta
        import threading
        import queue
        import time
        
        print("üöÄ –ó–∞–ø—É—Å–∫ ATB Trading Dashboard...")
        
        class TradingDashboard:
            def __init__(self) -> None:
                self.root: tk.Tk = tk.Tk()
                self.root.title("ATB Trading Dashboard")
                self.root.geometry("1200x800")
                self.root.configure(bg='#1e1e1e')
                
                # –û—á–µ—Ä–µ–¥—å –¥–ª—è –º–µ–∂–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
                self.data_queue: queue.Queue[Dict[str, Any]] = queue.Queue()
                self.running: bool = True
                
                # –î–∞–Ω–Ω—ã–µ
                self.market_data: List[Dict[str, Any]] = []
                self.positions: List[Dict[str, Any]] = []
                
                self.create_ui()
                self.start_data_simulation()
            
            def create_ui(self) -> None:
                """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
                # –°—Ç–∏–ª–∏
                style = ttk.Style()
                style.theme_use('default')
                
                # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç–∏–ª–µ–π
                style.configure('Title.TLabel', 
                              background='#1e1e1e', 
                              foreground='#ffffff',
                              font=('Helvetica', 16, 'bold'))
                
                style.configure('Heading.TLabel',
                              background='#1e1e1e',
                              foreground='#00ff88',
                              font=('Helvetica', 12, 'bold'))
                
                style.configure('Info.TLabel',
                              background='#1e1e1e',
                              foreground='#ffffff',
                              font=('Helvetica', 10))
                
                # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title_frame = tk.Frame(self.root, bg='#1e1e1e', height=60)
                title_frame.pack(fill='x', padx=10, pady=5)
                title_frame.pack_propagate(False)
                
                title_label = ttk.Label(title_frame, 
                                      text="ü§ñ ATB Trading Dashboard", 
                                      style='Title.TLabel')
                title_label.pack(side='left', pady=10)
                
                status_label = ttk.Label(title_frame, 
                                       text="üü¢ ONLINE", 
                                       style='Heading.TLabel')
                status_label.pack(side='right', pady=10)
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
                notebook = ttk.Notebook(self.root)
                notebook.pack(fill='both', expand=True, padx=10, pady=5)
                
                # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
                analytics_frame = ttk.Frame(notebook)
                notebook.add(analytics_frame, text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
                self.create_analytics_tab(analytics_frame)
                
                # –í–∫–ª–∞–¥–∫–∞ –ø–æ–∑–∏—Ü–∏–π
                positions_frame = ttk.Frame(notebook)
                notebook.add(positions_frame, text="üíº –ü–æ–∑–∏—Ü–∏–∏")
                self.create_positions_tab(positions_frame)
                
                # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                settings_frame = ttk.Frame(notebook)
                notebook.add(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
                self.create_settings_tab(settings_frame)
            
            def create_analytics_tab(self, parent: ttk.Frame) -> None:
                """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
                # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
                self.create_price_chart(parent)
                
            def create_positions_tab(self, parent: ttk.Frame) -> None:
                """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
                columns = ('Symbol', 'Side', 'Size', 'Entry Price', 'Current Price', 'PnL')
                tree = ttk.Treeview(parent, columns=columns, show='headings', height=10)
                
                for col in columns:
                    tree.heading(col, text=col)
                    tree.column(col, width=120)
                
                tree.pack(fill='both', expand=True, padx=10, pady=10)
                
                # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
                sample_positions = [
                    ('BTC/USDT', 'LONG', '0.1', '45000', '46500', '+150.00'),
                    ('ETH/USDT', 'SHORT', '1.0', '3200', '3150', '+50.00'),
                ]
                
                for position in sample_positions:
                    tree.insert('', 'end', values=position)
            
            def create_settings_tab(self, parent: ttk.Frame) -> None:
                """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
                settings_label = ttk.Label(parent, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", style='Heading.TLabel')
                settings_label.pack(pady=20)
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞
                risk_frame = ttk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", padding=10)
                risk_frame.pack(fill='x', padx=20, pady=10)
                
                ttk.Label(risk_frame, text="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%):").pack(anchor='w')
                risk_scale = ttk.Scale(risk_frame, from_=0.1, to=5.0, orient='horizontal')
                risk_scale.set(2.0)
                risk_scale.pack(fill='x', pady=5)
                
            def create_price_chart(self, parent: ttk.Frame) -> None:
                """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã"""
                # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib —Ñ–∏–≥—É—Ä—ã
                fig, ax = plt.subplots(figsize=(10, 6), facecolor='#1e1e1e')
                ax.set_facecolor('#1e1e1e')
                
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                dates = [datetime.now() - timedelta(hours=i) for i in range(100, 0, -1)]
                prices = np.cumsum(np.random.randn(100) * 0.01) + 100
                
                ax.plot(dates, prices, color='#00ff88', linewidth=2)
                ax.set_title('BTC/USDT Price Chart', color='white', fontsize=14, fontweight='bold')
                ax.set_xlabel('Time', color='white')
                ax.set_ylabel('Price (USDT)', color='white')
                ax.tick_params(colors='white')
                ax.grid(True, alpha=0.3)
                
                # –í—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –≤ tkinter
                canvas = FigureCanvasTkAgg(fig, parent)
                canvas.draw()
                canvas.get_tk_widget().pack(fill='both', expand=True, padx=10, pady=10)
            
            def start_data_simulation(self) -> None:
                """–ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
                def data_worker() -> None:
                    while self.running:
                        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                        new_data = {
                            'timestamp': datetime.now(),
                            'price': np.random.uniform(45000, 47000),
                            'volume': np.random.uniform(100, 1000)
                        }
                        self.data_queue.put(new_data)
                        time.sleep(1)
                
                # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                data_thread = threading.Thread(target=data_worker, daemon=True)
                data_thread.start()
            
            def run(self) -> None:
                """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
                try:
                    self.root.mainloop()
                finally:
                    self.running = False
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
        dashboard = TradingDashboard()
        dashboard.run()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        run_simple_dashboard()

def run_simple_dashboard() -> None:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –±–µ–∑ matplotlib"""
    print("üîÑ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–∞—à–±–æ—Ä–¥–∞...")
    
    import tkinter as tk
    from tkinter import ttk
    
    class SimpleDashboard:
        def __init__(self) -> None:
            self.root: tk.Tk = tk.Tk()
            self.root.title("ATB Simple Dashboard")
            self.root.geometry("800x600")
            self.root.configure(bg='#2b2b2b')
            
            self.create_ui()
        
        def create_ui(self) -> None:
            """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            title = tk.Label(self.root, 
                           text="ü§ñ ATB Trading System", 
                           font=('Helvetica', 18, 'bold'),
                           bg='#2b2b2b', 
                           fg='#00ff88')
            title.pack(pady=20)
            
            # –°—Ç–∞—Ç—É—Å
            status = tk.Label(self.root, 
                            text="‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", 
                            font=('Helvetica', 12),
                            bg='#2b2b2b', 
                            fg='white')
            status.pack(pady=10)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            button_frame = tk.Frame(self.root, bg='#2b2b2b')
            button_frame.pack(pady=20)
            
            tk.Button(button_frame, 
                     text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", 
                     command=self.show_analytics,
                     bg='#0066cc', 
                     fg='white',
                     font=('Helvetica', 10, 'bold'),
                     padx=20, 
                     pady=10).pack(side='left', padx=10)
            
            tk.Button(button_frame, 
                     text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", 
                     command=self.show_settings,
                     bg='#666666', 
                     fg='white',
                     font=('Helvetica', 10, 'bold'),
                     padx=20, 
                     pady=10).pack(side='left', padx=10)
            
            tk.Button(button_frame, 
                     text="‚ùì –ü–æ–º–æ—â—å", 
                     command=self.show_help,
                     bg='#009900', 
                     fg='white',
                     font=('Helvetica', 10, 'bold'),
                     padx=20, 
                     pady=10).pack(side='left', padx=10)
            
            # –¢–µ–∫—Å—Ç–æ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ª–æ–≥–æ–≤
            log_frame = tk.LabelFrame(self.root, 
                                    text="–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", 
                                    bg='#2b2b2b', 
                                    fg='white',
                                    font=('Helvetica', 10, 'bold'))
            log_frame.pack(fill='both', expand=True, padx=20, pady=20)
            
            self.log_text = tk.Text(log_frame, 
                                  bg='#1a1a1a', 
                                  fg='#00ff88',
                                  font=('Courier', 9),
                                  wrap='word')
            self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
            self.log_text.insert('end', "[–°–ò–°–¢–ï–ú–ê] ATB Trading System –∑–∞–ø—É—â–µ–Ω–∞\n")
            self.log_text.insert('end', "[–ö–û–ù–§–ò–ì] –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n")
            self.log_text.insert('end', "[–°–ï–¢–¨] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∏—Ä–∂–∞–º: –í –û–ñ–ò–î–ê–ù–ò–ò\n")
            self.log_text.insert('end', "[–°–¢–†–ê–¢–ï–ì–ò–ò] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: 0\n")
        
        def show_analytics(self) -> None:
            """–ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É"""
            self.log_text.insert('end', "[–ê–ù–ê–õ–ò–¢–ò–ö–ê] –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏\n")
            self.log_text.see('end')
        
        def show_settings(self) -> None:
            """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
            self.log_text.insert('end', "[–ù–ê–°–¢–†–û–ô–ö–ò] –û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–∫\n")
            self.log_text.see('end')
        
        def show_help(self) -> None:
            """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
            help_text = """
ATB Trading System - –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞—Ö
- –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å–º. —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ docs/
            """
            self.log_text.insert('end', f"[–ü–û–ú–û–©–¨] {help_text}\n")
            self.log_text.see('end')
        
        def run(self) -> None:
            """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
            self.root.mainloop()
    
    dashboard = SimpleDashboard()
    dashboard.run()

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ ATB Trading Dashboard")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if not check_python_version():
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    setup_environment()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("\n‚ö†Ô∏è –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∞—à–±–æ—Ä–¥
    try:
        run_dashboard()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")

if __name__ == "__main__":
    main()