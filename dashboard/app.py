import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Trading Bot Dashboard",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded",
)

# –°—Ç–∏–ª–∏
st.markdown(
    """
<style>
    .main {
        background-color: #0E1117;
        color: #FAFAFA;
    }
    .stButton>button {
        width: 100%;
        background-color: #1E88E5;
        color: white;
        border: none;
        padding: 10px;
        border-radius: 5px;
    }
    .stButton>button:hover {
        background-color: #1565C0;
    }
    .metric-card {
        background-color: #1E1E1E;
        padding: 20px;
        border-radius: 10px;
        margin: 10px 0;
    }
    .positive {
        color: #4CAF50;
    }
    .negative {
        color: #F44336;
    }
</style>
""",
    unsafe_allow_html=True,
)


class Dashboard:
    def __init__(self):
        self.data_dir = Path("data")
        self.stats_dir = Path("stats")
        self.config_dir = Path("config")

    def load_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            stats_file = self.stats_dir / "trading_stats.json"
            if stats_file.exists():
                with open(stats_file, "r") as f:
                    return json.load(f)
            return {}
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}

    def load_positions(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        try:
            positions_file = self.data_dir / "positions.json"
            if positions_file.exists():
                with open(positions_file, "r") as f:
                    return json.load(f)
            return []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–∑–∏—Ü–∏–π: {e}")
            return []

    def load_pairs_stats(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –ø–∞—Ä–∞–º"""
        try:
            pairs_file = self.stats_dir / "pairs_stats.json"
            if pairs_file.exists():
                with open(pairs_file, "r") as f:
                    return json.load(f)
            return {}
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä: {e}")
            return {}


def main():
    dashboard = Dashboard()

    # –°–∞–π–¥–±–∞—Ä
    with st.sidebar:
        st.title("ü§ñ Trading Bot")

        # –í—ã–±–æ—Ä –ø–∞—Ä—ã
        pairs_stats = dashboard.load_pairs_stats()
        selected_pair = st.selectbox(
            "–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞", options=list(pairs_stats.keys()) if pairs_stats else ["BTCUSDT"]
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
        col1, col2 = st.columns(2)
        with col1:
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å"):
                st.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        with col2:
            if st.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"):
                st.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")

        st.markdown("### –î–µ–π—Å—Ç–≤–∏—è")
        if st.button("üîÑ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"):
            st.info("–ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
        if st.button("üìä –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥"):
            st.info("–ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
        if selected_pair in pairs_stats:
            st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—ã")
            pair_stats = pairs_stats[selected_pair]
            st.metric("PNL", f"{pair_stats.get('pnl', 0):.2f}%")
            st.metric("Win Rate", f"{pair_stats.get('win_rate', 0):.2f}%")
            st.metric("–¢–æ—Ä–≥–æ–≤", pair_stats.get("trades", 0))

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    stats = dashboard.load_stats()
    positions = dashboard.load_positions()

    # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            "PNL (24—á)",
            f"{stats.get('pnl_24h', 0):.2f}%",
            delta=f"{stats.get('pnl_24h_change', 0):.2f}%",
        )
    with col2:
        st.metric(
            "Win Rate",
            f"{stats.get('win_rate', 0):.2f}%",
            delta=f"{stats.get('win_rate_change', 0):.2f}%",
        )
    with col3:
        st.metric("–¢–æ—Ä–≥–æ–≤", stats.get("total_trades", 0), delta=stats.get("trades_24h", 0))
    with col4:
        st.metric("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π", len(positions), delta=stats.get("positions_change", 0))

    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### PNL –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º")
        periods = {
            "–î–µ–Ω—å": stats.get("pnl_24h", 0),
            "–ù–µ–¥–µ–ª—è": stats.get("pnl_7d", 0),
            "–ú–µ—Å—è—Ü": stats.get("pnl_30d", 0),
            "3 –º–µ—Å—è—Ü–∞": stats.get("pnl_90d", 0),
        }
        fig = px.bar(
            x=list(periods.keys()),
            y=list(periods.values()),
            color=list(periods.values()),
            color_continuous_scale=["red", "green"],
        )
        fig.update_layout(
            showlegend=False,
            margin=dict(l=0, r=0, t=0, b=0),
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)",
        )
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏")
        if "pnl_distribution" in stats:
            fig = px.histogram(
                x=stats["pnl_distribution"], nbins=50, color_discrete_sequence=["#1E88E5"]
            )
            fig.update_layout(
                showlegend=False,
                margin=dict(l=0, r=0, t=0, b=0),
                paper_bgcolor="rgba(0,0,0,0)",
                plot_bgcolor="rgba(0,0,0,0)",
            )
            st.plotly_chart(fig, use_container_width=True)

    # –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    st.markdown("### –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
    if positions:
        df = pd.DataFrame(positions)
        st.dataframe(
            df.style.background_gradient(subset=["pnl"], cmap="RdYlGn"), use_container_width=True
        )
    else:
        st.info("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π")

    # –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞
    st.markdown("### –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞")
    if "current_task" in stats:
        task = stats["current_task"]
        st.markdown(
            f"""
        <div class="metric-card">
            <h4>{task['name']}</h4>
            <p>{task['description']}</p>
            <div class="progress">
                <div class="progress-bar" role="progressbar" 
                     style="width: {task['progress']}%">
                    {task['progress']}%
                </div>
            </div>
        </div>
        """,
            unsafe_allow_html=True,
        )
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")


if __name__ == "__main__":
    main()
