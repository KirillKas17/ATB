import json
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Optional

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

st.set_page_config(page_title="–ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥", page_icon="üìä", layout="wide")


class Backtest:
    def __init__(self):
        self.data_dir = Path("data")
        self.results_dir = Path("results")

    def load_results(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            results_file = self.results_dir / "backtest_results.json"
            if results_file.exists():
                with open(results_file, "r") as f:
                    return json.load(f)
            return {}
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
            return {}

    def load_trades(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–¥–µ–ª–æ–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        try:
            trades_file = self.results_dir / "backtest_trades.json"
            if trades_file.exists():
                with open(trades_file, "r") as f:
                    data = json.load(f)
                return pd.DataFrame(data)
            return pd.DataFrame()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return pd.DataFrame()


def main():
    backtest = Backtest()

    st.title("üìä –ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    results = backtest.load_results()
    trades_df = backtest.load_trades()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∏")

    col1, col2, col3 = st.columns(3)

    with col1:
        pair = st.selectbox("–¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞", options=["BTCUSDT", "ETHUSDT", "BNBUSDT"])

        timeframe = st.selectbox("–¢–∞–π–º—Ñ—Ä–µ–π–º", options=["1m", "5m", "15m", "1h", "4h", "1d"])

    with col2:
        start_date = st.date_input("–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞", value=datetime.now() - timedelta(days=30))

        end_date = st.date_input("–ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞", value=datetime.now())

    with col3:
        strategy = st.selectbox("–°—Ç—Ä–∞—Ç–µ–≥–∏—è", options=["trend", "mean_reversion", "breakout"])

        initial_balance = st.number_input(
            "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å", min_value=100.0, max_value=1000000.0, value=10000.0
        )

    # –ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
    if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥"):
        st.info("–ó–∞–ø—É—Å–∫ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –∑–∞–ø—É—Å–∫–∞ –±–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

        st.success("–ë–µ–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")

    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if results:
        st.markdown("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")

        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric(
                "–û–±—â–∏–π PNL",
                f"{results.get('total_pnl', 0):.2f}%",
                delta=f"{results.get('pnl_change', 0):.2f}%",
            )

        with col2:
            st.metric("Win Rate", f"{results.get('win_rate', 0):.2f}%")

        with col3:
            st.metric("Sharpe Ratio", f"{results.get('sharpe_ratio', 0):.2f}")

        with col4:
            st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{results.get('max_drawdown', 0):.2f}%")

        # –ì—Ä–∞—Ñ–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            st.markdown("### –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
            if "equity_curve" in results:
                fig = px.line(
                    x=results["equity_curve"]["dates"],
                    y=results["equity_curve"]["values"],
                    title="–ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏",
                )
                fig.update_layout(
                    showlegend=False,
                    margin=dict(l=0, r=0, t=30, b=0),
                    paper_bgcolor="rgba(0,0,0,0)",
                    plot_bgcolor="rgba(0,0,0,0)",
                )
                st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL")
            if "pnl_distribution" in results:
                fig = px.histogram(
                    x=results["pnl_distribution"], nbins=50, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤"
                )
                fig.update_layout(
                    showlegend=False,
                    margin=dict(l=0, r=0, t=30, b=0),
                    paper_bgcolor="rgba(0,0,0,0)",
                    plot_bgcolor="rgba(0,0,0,0)",
                )
                st.plotly_chart(fig, use_container_width=True)

        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.markdown("### –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        if not trades_df.empty:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            trades_df["month"] = pd.to_datetime(trades_df["timestamp"]).dt.strftime("%Y-%m")
            monthly_stats = (
                trades_df.groupby("month")
                .agg({"pnl": ["count", "mean", "sum"], "timestamp": "count"})
                .round(2)
            )

            monthly_stats.columns = ["–¢–æ—Ä–≥–æ–≤", "–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"]
            st.dataframe(
                monthly_stats.style.background_gradient(
                    subset=["–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"], cmap="RdYlGn"
                ),
                use_container_width=True,
            )

            # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
            st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
            st.dataframe(
                trades_df.sort_values("timestamp", ascending=False), use_container_width=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–¥–µ–ª–∫–∞—Ö")


if __name__ == "__main__":
    main()
