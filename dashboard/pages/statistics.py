import json
from datetime import datetime, timedelta
from pathlib import Path

import numpy as np
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

st.set_page_config(page_title="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", page_icon="üìä", layout="wide")


class Statistics:
    def __init__(self):
        self.stats_dir = Path("stats")

    def load_trades_history(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫"""
        try:
            trades_file = self.stats_dir / "trades_history.json"
            if trades_file.exists():
                with open(trades_file, "r") as f:
                    data = json.load(f)
                return pd.DataFrame(data)
            return pd.DataFrame()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫: {e}")
            return pd.DataFrame()

    def load_performance_metrics(self) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            metrics_file = self.stats_dir / "performance_metrics.json"
            if metrics_file.exists():
                with open(metrics_file, "r") as f:
                    return json.load(f)
            return {}
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ—Ç—Ä–∏–∫: {e}")
            return {}


def main():
    stats = Statistics()

    st.title("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    trades_df = stats.load_trades_history()
    metrics = stats.load_performance_metrics()

    if trades_df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    # –§–∏–ª—å—Ç—Ä—ã
    col1, col2, col3 = st.columns(3)
    with col1:
        pairs = st.multiselect(
            "–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã", options=trades_df["pair"].unique(), default=trades_df["pair"].unique()
        )
    with col2:
        date_range = st.date_input(
            "–ü–µ—Ä–∏–æ–¥", value=(trades_df["timestamp"].min(), trades_df["timestamp"].max())
        )
    with col3:
        strategy = st.multiselect(
            "–°—Ç—Ä–∞—Ç–µ–≥–∏–∏",
            options=trades_df["strategy"].unique(),
            default=trades_df["strategy"].unique(),
        )

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filtered_df = trades_df[
        (trades_df["pair"].isin(pairs))
        & (trades_df["timestamp"].dt.date.between(*date_range))
        & (trades_df["strategy"].isin(strategy))
    ]

    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_trades = len(filtered_df)
        win_trades = len(filtered_df[filtered_df["pnl"] > 0])
        win_rate = (win_trades / total_trades * 100) if total_trades > 0 else 0
        st.metric("Win Rate", f"{win_rate:.2f}%")

    with col2:
        total_pnl = filtered_df["pnl"].sum()
        avg_pnl = filtered_df["pnl"].mean()
        st.metric("–°—Ä–µ–¥–Ω–∏–π PNL", f"{avg_pnl:.2f}%")

    with col3:
        max_drawdown = filtered_df["pnl"].min()
        st.metric("–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞", f"{max_drawdown:.2f}%")

    with col4:
        sharpe = metrics.get("sharpe_ratio", 0)
        st.metric("Sharpe Ratio", f"{sharpe:.2f}")

    # –ì—Ä–∞—Ñ–∏–∫–∏
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### –ö—Ä–∏–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")
        cumulative_pnl = filtered_df["pnl"].cumsum()
        fig = px.line(x=filtered_df["timestamp"], y=cumulative_pnl, title="–ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–π PNL")
        fig.update_layout(
            showlegend=False,
            margin=dict(l=0, r=0, t=30, b=0),
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)",
        )
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("### –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ PNL")
        fig = px.histogram(filtered_df, x="pnl", nbins=50, title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–æ–≤")
        fig.update_layout(
            showlegend=False,
            margin=dict(l=0, r=0, t=30, b=0),
            paper_bgcolor="rgba(0,0,0,0)",
            plot_bgcolor="rgba(0,0,0,0)",
        )
        st.plotly_chart(fig, use_container_width=True)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º
    st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞—Ä–∞–º")
    pair_stats = (
        filtered_df.groupby("pair")
        .agg({"pnl": ["count", "mean", "sum"], "timestamp": "count"})
        .round(2)
    )

    pair_stats.columns = ["–¢–æ—Ä–≥–æ–≤", "–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"]
    st.dataframe(
        pair_stats.style.background_gradient(subset=["–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"], cmap="RdYlGn"),
        use_container_width=True,
    )

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
    st.markdown("### –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º")
    strategy_stats = (
        filtered_df.groupby("strategy")
        .agg({"pnl": ["count", "mean", "sum"], "timestamp": "count"})
        .round(2)
    )

    strategy_stats.columns = ["–¢–æ—Ä–≥–æ–≤", "–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"]
    st.dataframe(
        strategy_stats.style.background_gradient(
            subset=["–°—Ä–µ–¥–Ω–∏–π PNL", "–û–±—â–∏–π PNL"], cmap="RdYlGn"
        ),
        use_container_width=True,
    )

    # –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫
    st.markdown("### –ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫")
    st.dataframe(filtered_df.sort_values("timestamp", ascending=False), use_container_width=True)


if __name__ == "__main__":
    main()
