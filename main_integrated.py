#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Syntra - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
"""

import asyncio
import logging
import signal
import sys
from pathlib import Path
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, str(Path(__file__).parent))

from safe_import_wrapper import safe_import
from application.di_container_safe import get_safe_service_locator
from application.safe_services import SafeTradingService, SafeRiskService, SafeMarketService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s | %(levelname)s | %(name)s | %(message)s'
)
logger = logging.getLogger(__name__)


class IntegratedTradingSystem:
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–∞–±–æ—Ç—ã"""
    
    def __init__(self):
        self.running = False
        self.service_locator = None
        self.services = {}
        self.strategies = []
        self.monitored_symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "SOLUSDT"]
        self.market_data_cache = {}
        self.signals_cache = {}
        self.performance_metrics = {
            "total_trades": 0,
            "successful_trades": 0,
            "total_pnl": 0.0,
            "max_drawdown": 0.0,
            "sharpe_ratio": 0.0
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            try:
                from dotenv import load_dotenv
                load_dotenv()
                logger.info("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            except ImportError:
                logger.warning("‚ö†Ô∏è python-dotenv –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è service locator
            self.service_locator = get_safe_service_locator()
            logger.info("‚úÖ Service locator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
            await self._initialize_core_services()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            await self._initialize_strategies()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            await self._initialize_monitoring()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞
            await self._initialize_risk_management()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
            await self._initialize_evolution_systems()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
            await self._initialize_session_management()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏ backtesting
            await self._initialize_simulation_systems()
            
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
            return False
    
    async def _initialize_core_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        self.services["trading"] = self.service_locator.trading_service()
        logger.info(f"‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å: {type(self.services['trading']).__name__}")
        
        # –°–µ—Ä–≤–∏—Å —Ä–∏—Å–∫–æ–≤
        self.services["risk"] = self.service_locator.risk_service()
        logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å —Ä–∏—Å–∫–æ–≤: {type(self.services['risk']).__name__}")
        
        # –†—ã–Ω–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        self.services["market"] = self.service_locator.market_service()
        logger.info(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å: {type(self.services['market']).__name__}")
        
        # Agent Context - —è–¥—Ä–æ –∞–≥–µ–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        try:
            from infrastructure.agents.agent_context_refactored import AgentContext
            self.services["agent_context"] = AgentContext()
            logger.info("‚úÖ Agent Context –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Agent Context –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["agent_context"] = safe_import("safe_import_wrapper", "SafeImportMock")("AgentContext")
        
        # –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        await self._initialize_repositories()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã (—Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏)
        try:
            from application.services.service_factory import ServiceFactory
            factory = ServiceFactory()
            
            self.services["ml_predictor"] = factory._get_ml_predictor()
            self.services["signal_service"] = factory._get_signal_service()
            self.services["portfolio_optimizer"] = factory._get_portfolio_optimizer()
            
            logger.info("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    
    async def _initialize_repositories(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–≤...")
        
        # Market Repository
        try:
            from infrastructure.repositories.market_repository import MarketRepositoryImpl
            self.services["market_repository"] = MarketRepositoryImpl()
            logger.info("‚úÖ Market Repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Market Repository –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["market_repository"] = safe_import("safe_import_wrapper", "SafeImportMock")("MarketRepository")
        
        # Trading Repository
        try:
            from infrastructure.repositories.trading_repository import TradingRepositoryImpl
            self.services["trading_repository"] = TradingRepositoryImpl()
            logger.info("‚úÖ Trading Repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Trading Repository –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["trading_repository"] = safe_import("safe_import_wrapper", "SafeImportMock")("TradingRepository")
        
        # Portfolio Repository
        try:
            from infrastructure.repositories.portfolio_repository import PortfolioRepositoryImpl
            self.services["portfolio_repository"] = PortfolioRepositoryImpl()
            logger.info("‚úÖ Portfolio Repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Portfolio Repository –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["portfolio_repository"] = safe_import("safe_import_wrapper", "SafeImportMock")("PortfolioRepository")
        
        # ML Repository
        try:
            from infrastructure.repositories.ml_repository import MLRepositoryImpl
            self.services["ml_repository"] = MLRepositoryImpl()
            logger.info("‚úÖ ML Repository –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è ML Repository –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["ml_repository"] = safe_import("safe_import_wrapper", "SafeImportMock")("MLRepository")
    
    async def _initialize_strategies(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        logger.info("üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_classes = [
            ("infrastructure.strategies.trend_strategy", "TrendStrategy"),
            ("infrastructure.strategies.adaptive.adaptive_strategy_generator", "AdaptiveStrategyGenerator"),
            ("infrastructure.strategies.mean_reversion_strategy", "MeanReversionStrategy")
        ]
        
        for module_name, class_name in strategy_classes:
            try:
                strategy_class = safe_import(module_name, class_name)
                if hasattr(strategy_class, '__call__'):
                    strategy = strategy_class()
                    self.strategies.append({
                        "name": class_name,
                        "instance": strategy,
                        "enabled": True,
                        "performance": {"trades": 0, "wins": 0, "pnl": 0.0}
                    })
                    logger.info(f"‚úÖ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {class_name}")
                else:
                    logger.warning(f"‚ö†Ô∏è –°—Ç—Ä–∞—Ç–µ–≥–∏—è {class_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (mock)")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é {class_name}: {e}")
        
        if not self.strategies:
            # –°–æ–∑–¥–∞—ë–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            self.strategies.append({
                "name": "BasicStrategy",
                "instance": safe_import("safe_import_wrapper", "SafeImportMock")("BasicStrategy"),
                "enabled": True,
                "performance": {"trades": 0, "wins": 0, "pnl": 0.0}
            })
            logger.info("‚úÖ –ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–æ–∑–¥–∞–Ω–∞")
    
    async def _initialize_monitoring(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # Event Bus - —è–¥—Ä–æ event-driven –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
        try:
            from infrastructure.messaging.event_bus import EventBus
            self.services["event_bus"] = EventBus()
            logger.info("‚úÖ Event Bus –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Event Bus –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["event_bus"] = safe_import("safe_import_wrapper", "SafeImportMock")("EventBus")
        
        # Message Queue –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            from infrastructure.messaging.message_queue import MessageQueue
            self.services["message_queue"] = MessageQueue()
            logger.info("‚úÖ Message Queue –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Message Queue –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["message_queue"] = safe_import("safe_import_wrapper", "SafeImportMock")("MessageQueue")
        
        # Health Monitoring
        try:
            from infrastructure.health.checker import HealthChecker
            self.services["health_checker"] = HealthChecker()
            logger.info("‚úÖ Health Checker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Health Checker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["health_checker"] = safe_import("safe_import_wrapper", "SafeImportMock")("HealthChecker")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.services["performance_monitor"] = safe_import(
            "shared.performance_monitor", "PerformanceMonitor"
        )()
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
        self.services["system_monitor"] = safe_import(
            "infrastructure.monitoring.system_monitor", "SystemMonitor"
        )()
        
        # –î–∞—à–±–æ—Ä–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.services["monitoring_dashboard"] = safe_import(
            "shared.monitoring_dashboard", "MonitoringDashboard"
        )()
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    async def _initialize_risk_management(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞"""
        logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞...")
        
        # Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±–æ–µ–≤
        try:
            from infrastructure.circuit_breaker.breaker import CircuitBreaker
            self.services["circuit_breaker"] = CircuitBreaker()
            logger.info("‚úÖ Circuit Breaker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Circuit Breaker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["circuit_breaker"] = safe_import("safe_import_wrapper", "SafeImportMock")("CircuitBreaker")
        
        # Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
        try:
            from infrastructure.circuit_breaker.fallback import FallbackHandler
            self.services["fallback_handler"] = FallbackHandler()
            logger.info("‚úÖ Fallback Handler –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Fallback Handler –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["fallback_handler"] = safe_import("safe_import_wrapper", "SafeImportMock")("FallbackHandler")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
        try:
            EntanglementMonitor = safe_import(
                "application.analysis.entanglement_monitor", "EntanglementMonitor"
            )
            # –°–æ–∑–¥–∞—ë–º —Å –ø—É—Å—Ç—ã–º–∏ –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            self.services["correlation_analyzer"] = EntanglementMonitor([])
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è EntanglementMonitor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["correlation_analyzer"] = safe_import("safe_import_wrapper", "SafeImportMock")("CorrelationAnalyzer")
        
        # –í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
        await self._initialize_external_services()
        
        logger.info("‚úÖ –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def _initialize_external_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("üåê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # Exchange Services –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∏—Ä–∂–∞–º
        try:
            from infrastructure.external_services.exchanges.base_exchange_service import BaseExchangeService
            self.services["exchange_service"] = BaseExchangeService()
            logger.info("‚úÖ Exchange Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Exchange Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["exchange_service"] = safe_import("safe_import_wrapper", "SafeImportMock")("ExchangeService")
        
        # Technical Analysis Service
        try:
            from infrastructure.external_services.technical_analysis_adapter import TechnicalAnalysisAdapter
            self.services["technical_analysis"] = TechnicalAnalysisAdapter()
            logger.info("‚úÖ Technical Analysis Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Technical Analysis Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["technical_analysis"] = safe_import("safe_import_wrapper", "SafeImportMock")("TechnicalAnalysis")
        
        # Risk Analysis Adapter
        try:
            from infrastructure.external_services.risk_analysis_adapter import RiskAnalysisServiceAdapter
            self.services["risk_analysis_adapter"] = RiskAnalysisServiceAdapter()
            logger.info("‚úÖ Risk Analysis Adapter –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Risk Analysis Adapter –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["risk_analysis_adapter"] = safe_import("safe_import_wrapper", "SafeImportMock")("RiskAnalysisAdapter")
    
    async def _initialize_evolution_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
        logger.info("üß¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º...")
        
        # Strategy Generator –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        try:
            from domain.evolution.strategy_generator import StrategyGenerator
            self.services["strategy_generator"] = StrategyGenerator()
            logger.info("‚úÖ Strategy Generator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Strategy Generator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["strategy_generator"] = safe_import("safe_import_wrapper", "SafeImportMock")("StrategyGenerator")
        
        # Strategy Optimizer –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        try:
            from domain.evolution.strategy_optimizer import StrategyOptimizer
            self.services["strategy_optimizer"] = StrategyOptimizer()
            logger.info("‚úÖ Strategy Optimizer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Strategy Optimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["strategy_optimizer"] = safe_import("safe_import_wrapper", "SafeImportMock")("StrategyOptimizer")
        
        # Evolution Storage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        try:
            from infrastructure.evolution.strategy_storage import StrategyStorage
            self.services["evolution_storage"] = StrategyStorage()
            logger.info("‚úÖ Evolution Storage –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Evolution Storage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["evolution_storage"] = safe_import("safe_import_wrapper", "SafeImportMock")("EvolutionStorage")
    
    async def _initialize_session_management(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏...")
        
        # Session Manager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
        try:
            from domain.sessions.session_manager import SessionManager
            self.services["session_manager"] = SessionManager()
            logger.info("‚úÖ Session Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Session Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["session_manager"] = safe_import("safe_import_wrapper", "SafeImportMock")("SessionManager")
        
        # Session Predictor –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–µ—Å—Å–∏–π
        try:
            from domain.sessions.session_predictor import SessionPredictor
            self.services["session_predictor"] = SessionPredictor()
            logger.info("‚úÖ Session Predictor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Session Predictor –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["session_predictor"] = safe_import("safe_import_wrapper", "SafeImportMock")("SessionPredictor")
        
        # Session Analyzer –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π
        try:
            from domain.sessions.session_analyzer import SessionAnalyzer
            self.services["session_analyzer"] = SessionAnalyzer()
            logger.info("‚úÖ Session Analyzer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Session Analyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["session_analyzer"] = safe_import("safe_import_wrapper", "SafeImportMock")("SessionAnalyzer")
    
    async def _initialize_simulation_systems(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏"""
        logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —Å–∏–º—É–ª—è—Ü–∏–∏...")
        
        # Market Simulator –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä—ã–Ω–∫–∞
        try:
            from infrastructure.simulation.market_simulator import MarketSimulator
            self.services["market_simulator"] = MarketSimulator()
            logger.info("‚úÖ Market Simulator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Market Simulator –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["market_simulator"] = safe_import("safe_import_wrapper", "SafeImportMock")("MarketSimulator")
        
        # Backtester –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        try:
            from infrastructure.simulation.backtester import Backtester
            self.services["backtester"] = Backtester()
            logger.info("‚úÖ Backtester –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Backtester –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["backtester"] = safe_import("safe_import_wrapper", "SafeImportMock")("Backtester")
        
        # Backtest Explainer –¥–ª—è –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        try:
            from infrastructure.simulation.backtest_explainer import BacktestExplainer
            self.services["backtest_explainer"] = BacktestExplainer()
            logger.info("‚úÖ Backtest Explainer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Backtest Explainer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            self.services["backtest_explainer"] = safe_import("safe_import_wrapper", "SafeImportMock")("BacktestExplainer")
    
    async def start_trading(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞"""
        logger.info("üéØ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞...")
        
        self.running = True
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)
        
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            while self.running:
                await self._main_trading_cycle()
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        finally:
            await self.shutdown()
    
    async def _main_trading_cycle(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–∏–∫–ª"""
        cycle_start = datetime.now()
        
        try:
            # 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
            await self._check_system_health()
            
            # 1. –°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            await self._collect_market_data()
            
            # 2. –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            await self._analyze_sessions_and_context()
            
            # 3. –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–æ–≤
            await self._analyze_market_and_generate_signals()
            
            # 4. –≠–≤–æ–ª—é—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            await self._evolve_strategies()
            
            # 5. –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å Circuit Breaker
            await self._assess_risks_with_protection()
            
            # 6. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤
            await self._execute_trades_with_agents()
            
            # 7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π
            await self._monitor_positions()
            
            # 8. Event Bus –æ–±—Ä–∞–±–æ—Ç–∫–∞
            await self._process_events()
            
            # 9. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            await self._update_performance_metrics()
            
            # 10. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            cycle_duration = (datetime.now() - cycle_start).total_seconds()
            active_services = len([s for s in self.services.values() if hasattr(s, '__call__')])
            logger.info(f"üí´ –¶–∏–∫–ª –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {cycle_duration:.2f}—Å | "
                       f"–°–∏–º–≤–æ–ª–æ–≤: {len(self.monitored_symbols)} | "
                       f"–°–∏–≥–Ω–∞–ª–æ–≤: {len(self.signals_cache)} | "
                       f"–°—Ç—Ä–∞—Ç–µ–≥–∏–π: {len([s for s in self.strategies if s['enabled']])} | "
                       f"–°–µ—Ä–≤–∏—Å–æ–≤: {active_services}")
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–∏–∫–ª–µ: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—à–∏–±–∫–µ —á–µ—Ä–µ–∑ Event Bus
            await self._send_error_event(e)
    
    async def _collect_market_data(self):
        """–°–±–æ—Ä —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        market_service = self.services.get("market")
        if not market_service:
            return
        
        for symbol in self.monitored_symbols:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                market_data = await market_service.get_market_data(symbol)
                if market_data:
                    self.market_data_cache[symbol] = market_data
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
                if hasattr(market_service, 'get_technical_indicators'):
                    tech_indicators = await market_service.get_technical_indicators(symbol)
                    if tech_indicators:
                        self.market_data_cache[f"{symbol}_indicators"] = tech_indicators
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {symbol}: {e}")
    
    async def _analyze_market_and_generate_signals(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏"""
        
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        enhanced_prediction_service = None
        try:
            from application.services.enhanced_prediction_service import EnhancedPredictionService
            enhanced_prediction_service = EnhancedPredictionService({
                "advanced_engine": {
                    "min_fvg_size": 0.001,
                    "snr_window": 50,
                    "orderflow_window": 20
                }
            })
            logger.debug("‚úÖ Enhanced Prediction Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Enhanced Prediction Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
        for symbol in self.monitored_symbols:
            try:
                market_data = self.market_data_cache.get(symbol)
                if not market_data:
                    continue
                
                # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Å FVG, SNR, OrderFlow
                if enhanced_prediction_service:
                    enhanced_prediction = await enhanced_prediction_service.generate_enhanced_prediction(
                        symbol=symbol,
                        market_service=self.services.get("market"),
                        timeframe="4H"
                    )
                    
                    if enhanced_prediction and enhanced_prediction.confidence > 0.3:
                        signal_key = f"{symbol}_enhanced"
                        self.signals_cache[signal_key] = {
                            "symbol": symbol,
                            "strategy": "enhanced_prediction",
                            "signal": {
                                "action": enhanced_prediction.direction,
                                "confidence": enhanced_prediction.confidence,
                                "target_price": enhanced_prediction.target_price,
                                "stop_loss": enhanced_prediction.stop_loss,
                                "risk_reward_ratio": enhanced_prediction.risk_reward_ratio,
                                "market_structure": enhanced_prediction.market_structure,
                                "volatility_regime": enhanced_prediction.volatility_regime,
                                "snr_ratio": enhanced_prediction.snr_metrics.snr_ratio,
                                "clarity_score": enhanced_prediction.snr_metrics.clarity_score,
                                "fvg_count": len(enhanced_prediction.fvg_signals),
                                "orderflow_count": len(enhanced_prediction.orderflow_signals),
                                "liquidity_levels": len(enhanced_prediction.liquidity_levels),
                                "prediction_type": "advanced"
                            },
                            "timestamp": datetime.now(),
                            "market_data": market_data,
                            "enhanced_data": {
                                "fvg_signals": enhanced_prediction.fvg_signals,
                                "orderflow_signals": enhanced_prediction.orderflow_signals,
                                "liquidity_levels": enhanced_prediction.liquidity_levels,
                                "snr_metrics": enhanced_prediction.snr_metrics
                            }
                        }
                        
                        logger.debug(f"üìä Enhanced —Å–∏–≥–Ω–∞–ª –¥–ª—è {symbol}: {enhanced_prediction.direction} "
                                   f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {enhanced_prediction.confidence:.3f}, "
                                   f"SNR: {enhanced_prediction.snr_metrics.snr_ratio:.2f})")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è {symbol}: {e}")
        
        # 3. –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (–≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–º—É –∞–Ω–∞–ª–∏–∑—É)
        for strategy in self.strategies:
            if not strategy["enabled"]:
                continue
                
            strategy_name = strategy["name"]
            strategy_instance = strategy["instance"]
            
            try:
                for symbol in self.monitored_symbols:
                    market_data = self.market_data_cache.get(symbol)
                    if not market_data:
                        continue
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª —á–µ—Ä–µ–∑ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
                    signal = await self._generate_strategy_signal(
                        strategy_instance, symbol, market_data
                    )
                    
                    if signal:
                        signal_key = f"{symbol}_{strategy_name}"
                        self.signals_cache[signal_key] = {
                            "symbol": symbol,
                            "strategy": strategy_name,
                            "signal": signal,
                            "timestamp": datetime.now(),
                            "market_data": market_data
                        }
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è {strategy_name}: {e}")
        
        # 4. –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
        enhanced_signals = len([s for s in self.signals_cache.values() 
                              if s.get("signal", {}).get("prediction_type") == "advanced"])
        traditional_signals = len(self.signals_cache) - enhanced_signals
        
        if enhanced_signals > 0:
            avg_confidence = sum(s["signal"]["confidence"] for s in self.signals_cache.values() 
                               if s.get("signal", {}).get("prediction_type") == "advanced") / enhanced_signals
            avg_snr = sum(s["signal"]["snr_ratio"] for s in self.signals_cache.values() 
                         if s.get("signal", {}).get("prediction_type") == "advanced") / enhanced_signals
            
            logger.info(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–∏–≥–Ω–∞–ª–æ–≤: Enhanced={enhanced_signals}, Traditional={traditional_signals}")
            logger.info(f"üìà Enhanced –∫–∞—á–µ—Å—Ç–≤–æ: avg_confidence={avg_confidence:.3f}, avg_SNR={avg_snr:.2f}")
    
    async def _generate_strategy_signal(self, strategy, symbol, market_data):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        try:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            if hasattr(strategy, 'generate_signal'):
                return await strategy.generate_signal(symbol, market_data)
            elif hasattr(strategy, 'analyze'):
                return await strategy.analyze(symbol, market_data)
            else:
                # –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è mock —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                price = float(market_data.get("price", 0))
                volume = float(market_data.get("volume", 0))
                
                # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –ø–æ–∫—É–ø–∫–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º RSI, –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º
                indicators = self.market_data_cache.get(f"{symbol}_indicators")
                if indicators and hasattr(indicators, 'data'):
                    rsi = indicators.data.get("rsi", 50)
                    if rsi and float(rsi) < 30:
                        return {"action": "buy", "confidence": 0.7, "reason": "oversold"}
                    elif rsi and float(rsi) > 70:
                        return {"action": "sell", "confidence": 0.7, "reason": "overbought"}
                
                return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {e}")
            return None
    
    async def _assess_risks(self):
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤"""
        risk_service = self.services.get("risk")
        if not risk_service:
            return
        
        try:
            # –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            portfolio_risk = await risk_service.get_portfolio_risk()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            for signal_key, signal_data in self.signals_cache.items():
                symbol = signal_data["symbol"]
                signal = signal_data["signal"]
                
                if signal and signal.get("action") in ["buy", "sell"]:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∏—Å–∫-—Å–µ—Ä–≤–∏—Å
                    risk_validation = await risk_service.validate_order(
                        symbol=symbol,
                        action=signal["action"],
                        amount=1000  # –±–∞–∑–æ–≤–∞—è —Å—É–º–º–∞
                    )
                    
                    signal_data["risk_validated"] = risk_validation.get("is_valid", False)
                    signal_data["risk_score"] = risk_validation.get("risk_score", 1.0)
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤: {e}")
    
    async def _execute_trades(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"""
        trading_service = self.services.get("trading")
        if not trading_service:
            return
        
        executed_trades = 0
        
        for signal_key, signal_data in self.signals_cache.items():
            signal = signal_data.get("signal")
            if not signal or not signal_data.get("risk_validated", False):
                continue
            
            try:
                symbol = signal_data["symbol"]
                action = signal["action"]
                confidence = signal.get("confidence", 0.5)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—É—é –æ–ø–µ—Ä–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if confidence > 0.6:
                    trade_result = await trading_service.create_order(
                        symbol=symbol,
                        side=action,
                        amount=1000,  # –±–∞–∑–æ–≤–∞—è —Å—É–º–º–∞
                        order_type="market"
                    )
                    
                    if trade_result.get("status") == "created":
                        executed_trades += 1
                        self.performance_metrics["total_trades"] += 1
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
                        strategy_name = signal_data["strategy"]
                        for strategy in self.strategies:
                            if strategy["name"] == strategy_name:
                                strategy["performance"]["trades"] += 1
                                break
                        
                        logger.info(f"‚úÖ –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: {symbol} {action} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2f})")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏: {e}")
        
        if executed_trades > 0:
            logger.info(f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {executed_trades}")
    
    async def _monitor_positions(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–∑–∏—Ü–∏–π"""
        trading_service = self.services.get("trading")
        if not trading_service:
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
            positions = await trading_service.get_active_positions()
            
            if positions:
                logger.info(f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(positions)}")
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–∂–¥—É—é –ø–æ–∑–∏—Ü–∏—é
                for position in positions:
                    # –ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ trailing stop, take profit –∏ —Ç.–¥.
                    pass
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–∑–∏—Ü–∏–π: {e}")
    
    async def _update_performance_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            trading_service = self.services.get("trading")
            if trading_service:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏
                stats = await trading_service.get_trading_statistics()
                
                if stats:
                    self.performance_metrics.update({
                        "successful_trades": stats.get("winning_trades", 0),
                        "win_rate": stats.get("win_rate", 0.0),
                        "profit_factor": stats.get("profit_factor", 0.0)
                    })
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
                portfolio = await trading_service.get_portfolio_summary()
                if portfolio:
                    self.performance_metrics["total_value"] = portfolio.get("total_value", 0)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
        logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –Ω–∞—á–∏–Ω–∞—é –æ—Å—Ç–∞–Ω–æ–≤–∫—É...")
        self.running = False
    
    async def shutdown(self):
        """Graceful shutdown —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            # await self._close_all_positions()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await self._save_state()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            for service_name, service in self.services.items():
                try:
                    if hasattr(service, 'stop'):
                        await service.stop()
                    elif hasattr(service, 'shutdown'):
                        await service.shutdown()
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–∏—Å–∞ {service_name}: {e}")
            
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
    
    async def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        try:
            state = {
                "timestamp": datetime.now().isoformat(),
                "performance_metrics": self.performance_metrics,
                "strategies_performance": [s["performance"] for s in self.strategies],
                "monitored_symbols": self.monitored_symbols
            }
            
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ –±—ã –≤ –ë–î –∏–ª–∏ —Ñ–∞–π–ª
            logger.info(f"üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {state}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
    
    async def _check_system_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        health_checker = self.services.get("health_checker")
        if health_checker and hasattr(health_checker, 'check_health'):
            try:
                health_status = await health_checker.check_health()
                if not health_status.get("healthy", True):
                    logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å–æ –∑–¥–æ—Ä–æ–≤—å–µ–º —Å–∏—Å—Ç–µ–º—ã: {health_status}")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
    
    async def _analyze_sessions_and_context(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–π –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            session_analyzer = self.services.get("session_analyzer")
            agent_context = self.services.get("agent_context")
            
            if session_analyzer and hasattr(session_analyzer, 'analyze_current_session'):
                session_analysis = await session_analyzer.analyze_current_session()
                if session_analysis:
                    logger.debug(f"üìä –ê–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏: {session_analysis}")
            
            if agent_context and hasattr(agent_context, 'update_context'):
                await agent_context.update_context(self.market_data_cache)
                logger.debug("ü§ñ Agent Context –æ–±–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Å—Å–∏–π: {e}")
    
    async def _evolve_strategies(self):
        """–≠–≤–æ–ª—é—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        try:
            strategy_optimizer = self.services.get("strategy_optimizer")
            
            if strategy_optimizer and hasattr(strategy_optimizer, 'optimize_strategies'):
                # –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
                strategy_performance = [s["performance"] for s in self.strategies]
                optimization_result = await strategy_optimizer.optimize_strategies(strategy_performance)
                
                if optimization_result:
                    logger.debug(f"üß¨ –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {optimization_result}")
                    
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π: {e}")
    
    async def _assess_risks_with_protection(self):
        """–û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤ —Å Circuit Breaker –∑–∞—â–∏—Ç–æ–π"""
        circuit_breaker = self.services.get("circuit_breaker")
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Circuit Breaker –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —Å–±–æ–µ–≤
            if circuit_breaker and hasattr(circuit_breaker, 'call'):
                await circuit_breaker.call(self._assess_risks)
            else:
                await self._assess_risks()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Circuit Breaker —Å—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–æ–≤: {e}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Fallback –º–µ—Ö–∞–Ω–∏–∑–º
            fallback_handler = self.services.get("fallback_handler")
            if fallback_handler and hasattr(fallback_handler, 'handle_risk_failure'):
                await fallback_handler.handle_risk_failure()
    
    async def _execute_trades_with_agents(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
        try:
            agent_context = self.services.get("agent_context")
            
            # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏
            if agent_context and hasattr(agent_context, 'execute_trading_decisions'):
                trading_decisions = await agent_context.execute_trading_decisions(self.signals_cache)
                
                if trading_decisions:
                    logger.debug(f"ü§ñ –ê–≥–µ–Ω—Ç–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è: {len(trading_decisions)}")
                    
                    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é —Ç–æ—Ä–≥–æ–≤—É—é –ª–æ–≥–∏–∫—É
                    await self._execute_agent_decisions(trading_decisions)
            else:
                # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
                await self._execute_trades()
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
            # Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ
            await self._execute_trades()
    
    async def _execute_agent_decisions(self, decisions):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤"""
        trading_service = self.services.get("trading")
        if not trading_service:
            return
        
        executed_trades = 0
        
        for decision in decisions:
            try:
                if decision.get("action") and decision.get("symbol"):
                    trade_result = await trading_service.create_order(
                        symbol=decision["symbol"],
                        side=decision["action"],
                        amount=decision.get("amount", 1000),
                        order_type=decision.get("order_type", "market")
                    )
                    
                    if trade_result.get("status") == "created":
                        executed_trades += 1
                        self.performance_metrics["total_trades"] += 1
                        
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è: {e}")
        
        if executed_trades > 0:
            logger.info(f"ü§ñ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∞–≥–µ–Ω—Ç–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {executed_trades}")
    
    async def _process_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–µ—Ä–µ–∑ Event Bus"""
        try:
            event_bus = self.services.get("event_bus")
            
            if event_bus and hasattr(event_bus, 'process_pending_events'):
                await event_bus.process_pending_events()
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞
            if event_bus and hasattr(event_bus, 'publish'):
                await event_bus.publish("trading_cycle_completed", {
                    "timestamp": datetime.now(),
                    "symbols_processed": len(self.monitored_symbols),
                    "signals_generated": len(self.signals_cache)
                })
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π: {e}")
    
    async def _send_error_event(self, error):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        try:
            event_bus = self.services.get("event_bus")
            
            if event_bus and hasattr(event_bus, 'publish'):
                await event_bus.publish("system_error", {
                    "timestamp": datetime.now(),
                    "error": str(error),
                    "error_type": type(error).__name__
                })
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üöÄ ATB Integrated Trading System")
    logger.info("=" * 60)
    
    system = IntegratedTradingSystem()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        if await system.initialize():
            logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–æ—Ä–≥–æ–≤–ª–µ!")
            
            # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
            await system.start_trading()
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        sys.exit(1)
    finally:
        logger.info("üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")


if __name__ == "__main__":
    print("üöÄ ATB Integrated Trading System")
    print("=" * 60)
    print("–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏")
    print("–í–∫–ª—é—á–∞–µ—Ç: —Ç–æ—Ä–≥–æ–≤–ª—é, —Ä–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç, ML, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
    print("=" * 60)
    
    asyncio.run(main())