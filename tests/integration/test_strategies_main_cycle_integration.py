"""
Интеграционные тесты для проверки интеграции domain/strategies с основным циклом системы.
"""
import pytest
import pandas as pd
from typing import Any, Dict, List, Optional, Union, AsyncGenerator
from datetime import datetime, timedelta
from decimal import Decimal
from uuid import uuid4
from domain.strategies import (
    get_strategy_factory, get_strategy_registry, get_strategy_validator
)
from domain.strategies.exceptions import (
    StrategyCreationError, StrategyValidationError, StrategyRegistryError
)
from domain.entities.strategy import StrategyType, StrategyStatus
from domain.type_definitions import StrategyId, TradingPair, ConfidenceLevel, RiskLevel
from domain.entities.market import MarketData
# Импорты для интеграции с основным циклом
from application.use_cases.trading_orchestrator.core import DefaultTradingOrchestratorUseCase
from application.di_container_refactored import get_service_locator
class TestStrategiesMainCycleIntegration:
    """Интеграционные тесты для проверки интеграции с основным циклом."""
    @pytest.fixture
    def service_locator(self: "TestEvolvableMarketMakerAgent") -> Any:
        return get_service_locator()
            # Убираем order_book и trades, так как они не существуют в MarketData
        # 1. Создаем стратегию через фабрику
        # 2. Регистрируем в реестре
        # 3. Создаем запрос на выполнение стратегии
        # 4. Выполняем стратегию через оркестратор
        # 5. Проверяем результат
        # 6. Проверяем, что стратегия была зарегистрирована в реестре
        # 7. Проверяем метрики стратегии
        # 1. Создаем несколько стратегий разных типов
            # Создаем стратегию через фабрику
        # 2. Проверяем, что все стратегии созданы корректно
            # Проверяем, что параметры установлены корректно
        # 1. Создаем стратегии для тестирования реестра
        # 2. Проверяем регистрацию
        # 3. Тестируем поиск и фильтрацию
        # 4. Тестируем обновление метрик
        # 5. Проверяем статистику реестра
        # 1. Создаем валидную стратегию
        # 2. Валидируем стратегию
        # 3. Создаем невалидную стратегию
        # 4. Валидируем невалидную стратегию
        # 1. Создание стратегии
        # 2. Валидация стратегии
        # 3. Регистрация стратегии
        # 4. Активация стратегии
        # 5. Выполнение стратегии через оркестратор
        # 6. Проверка выполнения
        # 7. Обновление метрик
        # 8. Проверка метрик
        # 9. Деактивация стратегии
        # 10. Проверка финального состояния
        # 1. Попытка создания несуществующей стратегии
        # 2. Попытка регистрации дубликата
        # Первая регистрация
        # Попытка повторной регистрации
        # 3. Попытка получения несуществующей стратегии
        # 1. Создаем стратегии для мониторинга
        # 2. Симулируем выполнение и обновляем метрики
            # Симулируем разную производительность
        # 3. Получаем статистику производительности
        # 4. Получаем рейтинг стратегий
        # Проверяем, что стратегии отсортированы по производительности
        # 5. Проверяем алерты (если есть стратегии с плохой производительностью)
        # Может быть 0 или больше в зависимости от производительности
        # 6. Получаем отчет о здоровье
        # Импортируем стратегии из infrastructure/strategies
        # Создаем тестовые данные
        # Тестируем каждую стратегию
                # Проверяем, что стратегия может анализировать данные
                # Проверяем, что стратегия может генерировать сигналы
                # Сигнал может быть None, это нормально
                # Проверяем, что стратегия может валидировать данные
                # Не падаем, так как некоторые стратегии могут требовать дополнительной настройки
        # Тестируем интеграцию через торговый оркестратор
        # Проверяем, что оркестратор может создать стратегию из infrastructure/strategies
        # Проверяем результат
        # Стратегия может не выполниться из-за отсутствия реальных данных, но это нормально
