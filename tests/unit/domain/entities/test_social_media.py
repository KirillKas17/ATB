"""
Unit —Ç–µ—Å—Ç—ã –¥–ª—è Social Media.

–ü–æ–∫—Ä—ã–≤–∞–µ—Ç:
- –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
- –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É
- –û–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫
- –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
"""

import pytest
from datetime import datetime, timedelta
from typing import Dict, Any, List, Tuple
from unittest.mock import Mock, patch

from domain.entities.social_media import SocialPost, SocialAnalysis, SocialCollection, SocialSentiment, SocialPlatform


class TestSocialSentiment:
    """–¢–µ—Å—Ç—ã –¥–ª—è SocialSentiment."""

    def test_enum_values(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π enum SocialSentiment."""
        assert SocialSentiment.POSITIVE.value == "positive"
        assert SocialSentiment.NEGATIVE.value == "negative"
        assert SocialSentiment.NEUTRAL.value == "neutral"
        assert SocialSentiment.MIXED.value == "mixed"


class TestSocialPlatform:
    """–¢–µ—Å—Ç—ã –¥–ª—è SocialPlatform."""

    def test_enum_values(self):
        """–¢–µ—Å—Ç –∑–Ω–∞—á–µ–Ω–∏–π enum SocialPlatform."""
        assert SocialPlatform.TWITTER.value == "twitter"
        assert SocialPlatform.REDDIT.value == "reddit"
        assert SocialPlatform.TELEGRAM.value == "telegram"
        assert SocialPlatform.DISCORD.value == "discord"
        assert SocialPlatform.TWITCH.value == "twitch"
        assert SocialPlatform.YOUTUBE.value == "youtube"
        assert SocialPlatform.OTHER.value == "other"


class TestSocialPost:
    """–¢–µ—Å—Ç—ã –¥–ª—è SocialPost."""

    @pytest.fixture
    def sample_data(self) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        return {
            "id": "post_001",
            "platform": SocialPlatform.TWITTER,
            "author": "@crypto_trader",
            "content": "Bitcoin is going to the moon! üöÄ #BTC #crypto",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.POSITIVE,
            "engagement_score": 0.8,
            "reach_score": 0.7,
            "symbols": ["BTC", "ETH"],
            "metadata": {"likes": 150, "retweets": 25, "replies": 10},
        }

    @pytest.fixture
    def social_post(self, sample_data) -> SocialPost:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        return SocialPost(**sample_data)

    def test_creation(self, sample_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        post = SocialPost(**sample_data)

        assert post.id == sample_data["id"]
        assert post.platform == sample_data["platform"]
        assert post.author == sample_data["author"]
        assert post.content == sample_data["content"]
        assert post.published_at == sample_data["published_at"]
        assert post.sentiment == sample_data["sentiment"]
        assert post.engagement_score == sample_data["engagement_score"]
        assert post.reach_score == sample_data["reach_score"]
        assert post.symbols == sample_data["symbols"]
        assert post.metadata == sample_data["metadata"]

    def test_validation_empty_id(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ ID."""
        data = {
            "id": "",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 0.5,
            "reach_score": 0.5,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Post ID cannot be empty"):
            SocialPost(**data)

    def test_validation_empty_content(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 0.5,
            "reach_score": 0.5,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Post content cannot be empty"):
            SocialPost(**data)

    def test_validation_engagement_score_below_zero(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ engagement_score –Ω–∏–∂–µ 0."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": -0.1,
            "reach_score": 0.5,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Engagement score must be between 0 and 1"):
            SocialPost(**data)

    def test_validation_engagement_score_above_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ engagement_score –≤—ã—à–µ 1."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 1.1,
            "reach_score": 0.5,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Engagement score must be between 0 and 1"):
            SocialPost(**data)

    def test_validation_reach_score_below_zero(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ reach_score –Ω–∏–∂–µ 0."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 0.5,
            "reach_score": -0.1,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Reach score must be between 0 and 1"):
            SocialPost(**data)

    def test_validation_reach_score_above_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ reach_score –≤—ã—à–µ 1."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 0.5,
            "reach_score": 1.1,
            "symbols": [],
            "metadata": {},
        }

        with pytest.raises(ValueError, match="Reach score must be between 0 and 1"):
            SocialPost(**data)

    def test_valid_boundary_values(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        data = {
            "id": "test_id",
            "platform": SocialPlatform.TWITTER,
            "author": "test_author",
            "content": "Test content",
            "published_at": datetime.now(),
            "sentiment": SocialSentiment.NEUTRAL,
            "engagement_score": 0.0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "reach_score": 1.0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "symbols": [],
            "metadata": {},
        }

        post = SocialPost(**data)
        assert post.engagement_score == 0.0
        assert post.reach_score == 1.0


class TestSocialAnalysis:
    """–¢–µ—Å—Ç—ã –¥–ª—è SocialAnalysis."""

    @pytest.fixture
    def social_post(self) -> SocialPost:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        return SocialPost(
            id="test_post",
            platform=SocialPlatform.TWITTER,
            author="@test_user",
            content="Test post content",
            published_at=datetime.now(),
            sentiment=SocialSentiment.POSITIVE,
            engagement_score=0.8,
            reach_score=0.7,
            symbols=["BTC"],
            metadata={},
        )

    @pytest.fixture
    def sample_data(self, social_post) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        return {
            "post": social_post,
            "sentiment_score": 0.8,
            "market_impact_prediction": 0.7,
            "confidence": 0.9,
            "trading_signals": ["BUY", "HOLD"],
            "risk_level": "medium",
        }

    @pytest.fixture
    def social_analysis(self, sample_data) -> SocialAnalysis:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        return SocialAnalysis(**sample_data)

    def test_creation(self, sample_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        analysis = SocialAnalysis(**sample_data)

        assert analysis.post == sample_data["post"]
        assert analysis.sentiment_score == sample_data["sentiment_score"]
        assert analysis.market_impact_prediction == sample_data["market_impact_prediction"]
        assert analysis.confidence == sample_data["confidence"]
        assert analysis.trading_signals == sample_data["trading_signals"]
        assert analysis.risk_level == sample_data["risk_level"]

    def test_validation_sentiment_score_below_minus_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ sentiment_score –Ω–∏–∂–µ -1."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": -1.1,
            "market_impact_prediction": 0.5,
            "confidence": 0.8,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Sentiment score must be between -1 and 1"):
            SocialAnalysis(**data)

    def test_validation_sentiment_score_above_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ sentiment_score –≤—ã—à–µ 1."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": 1.1,
            "market_impact_prediction": 0.5,
            "confidence": 0.8,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Sentiment score must be between -1 and 1"):
            SocialAnalysis(**data)

    def test_validation_market_impact_prediction_below_zero(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ market_impact_prediction –Ω–∏–∂–µ 0."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": 0.5,
            "market_impact_prediction": -0.1,
            "confidence": 0.8,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Market impact prediction must be between 0 and 1"):
            SocialAnalysis(**data)

    def test_validation_market_impact_prediction_above_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ market_impact_prediction –≤—ã—à–µ 1."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": 0.5,
            "market_impact_prediction": 1.1,
            "confidence": 0.8,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Market impact prediction must be between 0 and 1"):
            SocialAnalysis(**data)

    def test_validation_confidence_below_zero(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ confidence –Ω–∏–∂–µ 0."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": 0.5,
            "market_impact_prediction": 0.5,
            "confidence": -0.1,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Confidence must be between 0 and 1"):
            SocialAnalysis(**data)

    def test_validation_confidence_above_one(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ confidence –≤—ã—à–µ 1."""
        data = {
            "post": Mock(spec=SocialPost),
            "sentiment_score": 0.5,
            "market_impact_prediction": 0.5,
            "confidence": 1.1,
            "trading_signals": [],
            "risk_level": "low",
        }

        with pytest.raises(ValueError, match="Confidence must be between 0 and 1"):
            SocialAnalysis(**data)

    def test_valid_boundary_values(self, social_post):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        data = {
            "post": social_post,
            "sentiment_score": -1.0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "market_impact_prediction": 0.0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "confidence": 1.0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "trading_signals": [],
            "risk_level": "high",
        }

        analysis = SocialAnalysis(**data)
        assert analysis.sentiment_score == -1.0
        assert analysis.market_impact_prediction == 0.0
        assert analysis.confidence == 1.0


class TestSocialCollection:
    """–¢–µ—Å—Ç—ã –¥–ª—è SocialCollection."""

    @pytest.fixture
    def social_posts(self) -> List[SocialPost]:
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        return [
            SocialPost(
                id=f"post_{i}",
                platform=SocialPlatform.TWITTER,
                author=f"user_{i}",
                content=f"Post content {i}",
                published_at=datetime.now(),
                sentiment=SocialSentiment.NEUTRAL,
                engagement_score=0.5,
                reach_score=0.5,
                symbols=[],
                metadata={},
            )
            for i in range(3)
        ]

    @pytest.fixture
    def time_range(self) -> Tuple[datetime, datetime]:
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω."""
        start_time = datetime.now()
        end_time = start_time + timedelta(hours=1)
        return (start_time, end_time)

    @pytest.fixture
    def sample_data(self, social_posts, time_range) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        return {
            "posts": social_posts,
            "total_count": 10,
            "filtered_count": 3,
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

    @pytest.fixture
    def social_collection(self, sample_data) -> SocialCollection:
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        return SocialCollection(**sample_data)

    def test_creation(self, sample_data):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        collection = SocialCollection(**sample_data)

        assert collection.posts == sample_data["posts"]
        assert collection.total_count == sample_data["total_count"]
        assert collection.filtered_count == sample_data["filtered_count"]
        assert collection.time_range == sample_data["time_range"]
        assert collection.platform == sample_data["platform"]

    def test_validation_negative_total_count(self, social_posts, time_range):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ total_count."""
        data = {
            "posts": social_posts,
            "total_count": -1,
            "filtered_count": 3,
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Total count cannot be negative"):
            SocialCollection(**data)

    def test_validation_negative_filtered_count(self, social_posts, time_range):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ filtered_count."""
        data = {
            "posts": social_posts,
            "total_count": 10,
            "filtered_count": -1,
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Filtered count cannot be negative"):
            SocialCollection(**data)

    def test_validation_filtered_count_exceeds_total(self, social_posts, time_range):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ filtered_count –±–æ–ª—å—à–µ total_count."""
        data = {
            "posts": social_posts,
            "total_count": 5,
            "filtered_count": 10,
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Filtered count cannot exceed total count"):
            SocialCollection(**data)

    def test_validation_invalid_time_range_length(self, social_posts):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã time_range."""
        data = {
            "posts": social_posts,
            "total_count": 10,
            "filtered_count": 3,
            "time_range": (datetime.now(),),  # –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Time range must have exactly 2 elements"):
            SocialCollection(**data)

    def test_validation_invalid_time_range_order(self, social_posts):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤—Ä–µ–º–µ–Ω–∏."""
        start_time = datetime.now()
        end_time = start_time - timedelta(hours=1)  # end_time —Ä–∞–Ω—å—à–µ start_time

        data = {
            "posts": social_posts,
            "total_count": 10,
            "filtered_count": 3,
            "time_range": (start_time, end_time),
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Start time must be before end time"):
            SocialCollection(**data)

    def test_validation_equal_time_range(self, social_posts):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–∞–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫."""
        time = datetime.now()

        data = {
            "posts": social_posts,
            "total_count": 10,
            "filtered_count": 3,
            "time_range": (time, time),  # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            "platform": SocialPlatform.TWITTER,
        }

        with pytest.raises(ValueError, match="Start time must be before end time"):
            SocialCollection(**data)

    def test_valid_boundary_values(self, social_posts, time_range):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π."""
        data = {
            "posts": social_posts,
            "total_count": 0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "filtered_count": 0,  # –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

        collection = SocialCollection(**data)
        assert collection.total_count == 0
        assert collection.filtered_count == 0

    def test_valid_equal_counts(self, social_posts, time_range):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ filtered_count —Ä–∞–≤–µ–Ω total_count."""
        data = {
            "posts": social_posts,
            "total_count": 3,
            "filtered_count": 3,  # –†–∞–≤–µ–Ω total_count
            "time_range": time_range,
            "platform": SocialPlatform.TWITTER,
        }

        collection = SocialCollection(**data)
        assert collection.total_count == 3
        assert collection.filtered_count == 3

    def test_different_platforms(self, social_posts, time_range):
        """–¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ–¥–∏–∞."""
        platforms = [
            SocialPlatform.TWITTER,
            SocialPlatform.REDDIT,
            SocialPlatform.TELEGRAM,
            SocialPlatform.DISCORD,
            SocialPlatform.TWITCH,
            SocialPlatform.YOUTUBE,
            SocialPlatform.OTHER,
        ]

        for platform in platforms:
            data = {
                "posts": social_posts,
                "total_count": 10,
                "filtered_count": 3,
                "time_range": time_range,
                "platform": platform,
            }

            collection = SocialCollection(**data)
            assert collection.platform == platform
