"""
E2E —Ç–µ—Å—Ç—ã –¥–ª—è –º–æ–¥—É–ª—è market_profiles.
"""
import pytest
from typing import Any, Dict, List, Optional, Union, AsyncGenerator
import asyncio
import tempfile
import shutil
from datetime import datetime, timedelta
from pathlib import Path
from unittest.mock import Mock, AsyncMock
# from infrastructure.market_profiles import (
#     MarketMakerStorage, PatternMemoryRepository, BehaviorHistoryRepository,
#     PatternAnalyzer, SimilarityCalculator, SuccessRateAnalyzer,
#     StorageConfig, AnalysisConfig
# )
from domain.market_maker.mm_pattern import (
    MarketMakerPattern, PatternFeatures, MarketMakerPatternType,
    PatternResult, PatternOutcome, PatternMemory
)
from domain.types.market_maker_types import (
    BookPressure, VolumeDelta, PriceReaction, SpreadChange,
    OrderImbalance, LiquidityDepth, TimeDuration, VolumeConcentration,
    PriceVolatility, MarketMicrostructure, Confidence, Accuracy,
    AverageReturn, SuccessCount, TotalCount, Symbol
)
class TestMarketProfilesE2E:
    """E2E —Ç–µ—Å—Ç—ã –¥–ª—è market_profiles."""
    @pytest.fixture
    def temp_dir(self) -> Any:
        """–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤."""
        temp_dir = tempfile.mkdtemp()
        yield Path(temp_dir)
        shutil.rmtree(temp_dir)
    @pytest.fixture
    def e2e_config(self, temp_dir) -> Any:
        """E2E –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è."""
        # storage_config = StorageConfig(
        #     base_path=temp_dir,
        #     compression_enabled=True,
        #     max_workers=4,
        #     cache_size=2000,
        #     backup_enabled=True,
        #     backup_interval_hours=1,
        #     cleanup_enabled=True,
        #     cleanup_interval_days=1
        # )
        # analysis_config = AnalysisConfig(
        #     min_confidence=Confidence(0.6),
        #     similarity_threshold=0.8,
        #     accuracy_threshold=0.7,
        #     volume_threshold=1000.0,
        #     spread_threshold=0.001,
        #     time_window_seconds=300,
        #     min_trades_count=10,
        #     max_history_size=1000
        # )
        storage_config = {
            "base_path": temp_dir,
            "compression_enabled": True,
            "max_workers": 4,
            "cache_size": 2000,
            "backup_enabled": True,
            "backup_interval_hours": 1,
            "cleanup_enabled": True,
            "cleanup_interval_days": 1
        }
        analysis_config = {
            "min_confidence": Confidence(0.6),
            "similarity_threshold": 0.8,
            "accuracy_threshold": 0.7,
            "volume_threshold": 1000.0,
            "spread_threshold": 0.001,
            "time_window_seconds": 300,
            "min_trades_count": 10,
            "max_history_size": 1000
        }
        return {
            "storage_config": storage_config,
            "analysis_config": analysis_config
        }
    @pytest.fixture
    def e2e_components(self, e2e_config) -> Any:
        """E2E –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã."""
        # storage = MarketMakerStorage(e2e_config["storage_config"])
        # pattern_repo = PatternMemoryRepository()
        # behavior_repo = BehaviorHistoryRepository()
        # analyzer = PatternAnalyzer(e2e_config["analysis_config"])
        # similarity_calc = SimilarityCalculator()
        # success_analyzer = SuccessRateAnalyzer()
        storage = Mock()
        pattern_repo = Mock()
        behavior_repo = Mock()
        analyzer = Mock()
        similarity_calc = Mock()
        success_analyzer = Mock()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ mock –æ–±—ä–µ–∫—Ç–æ–≤
        storage.save_pattern = AsyncMock(return_value=True)
        storage.get_patterns_by_symbol = AsyncMock(return_value=[])
        storage.find_similar_patterns = AsyncMock(return_value=[])
        pattern_repo.save_pattern = AsyncMock(return_value=True)
        behavior_repo.save_behavior_record = AsyncMock(return_value=True)
        analyzer.analyze_pattern = AsyncMock(return_value={"confidence": 0.8})
        similarity_calc.calculate_similarity = AsyncMock(return_value=0.8)
        success_analyzer.calculate_success_rate = AsyncMock(return_value=0.7)
        
        return {
            "storage": storage,
            "pattern_repo": pattern_repo,
            "behavior_repo": behavior_repo,
            "analyzer": analyzer,
            "similarity_calc": similarity_calc,
            "success_analyzer": success_analyzer
        }
    @pytest.fixture
    def realistic_patterns(self) -> Any:
        """–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è E2E —Ç–µ—Å—Ç–æ–≤."""
        patterns = []
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        pattern_types = [
            (MarketMakerPatternType.ACCUMULATION, 0.85, "trending"),
            (MarketMakerPatternType.EXIT, 0.75, "trending"),
            (MarketMakerPatternType.ABSORPTION, 0.65, "sideways"),
            (MarketMakerPatternType.DISTRIBUTION, 0.70, "trending"),
            (MarketMakerPatternType.MARKUP, 0.80, "trending")
        ]
        for i, (pattern_type, confidence, market_regime) in enumerate(pattern_types):
            features = PatternFeatures(
                book_pressure=BookPressure(0.6 + i * 0.1),
                volume_delta=VolumeDelta(0.1 + i * 0.05),
                price_reaction=PriceReaction(0.01 + i * 0.005),
                spread_change=SpreadChange(0.03 + i * 0.01),
                order_imbalance=OrderImbalance(0.5 + i * 0.1),
                liquidity_depth=LiquidityDepth(0.7 + i * 0.05),
                time_duration=TimeDuration(200 + i * 50),
                volume_concentration=VolumeConcentration(0.6 + i * 0.05),
                price_volatility=PriceVolatility(0.02 + i * 0.005),
                market_microstructure=MarketMicrostructure({
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
                })
            )
            pattern = MarketMakerPattern(
                pattern_type=pattern_type,
                symbol=Symbol("BTCUSDT"),
                timestamp=datetime.now() + timedelta(minutes=i*10),
                features=features,
                confidence=Confidence(confidence),
                context={
                    "volatility": "medium",
                    "volume_profile": "normal",
                    "price_action": "trending" if market_regime == "trending" else "sideways"
                }
            )
            patterns.append(pattern)
        return patterns
    @pytest.mark.asyncio
    async def test_complete_trading_session_e2e(self, e2e_components, realistic_patterns) -> None:
        """E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏."""
        storage = e2e_components["storage"]
        analyzer = e2e_components["analyzer"]
        behavior_repo = e2e_components["behavior_repo"]
        similarity_calc = e2e_components["similarity_calc"]
        success_analyzer = e2e_components["success_analyzer"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏...")
        # –§–∞–∑–∞ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        print("üìä –§–∞–∑–∞ 1: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        saved_patterns = []
        for i, pattern in enumerate(realistic_patterns):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            success = await storage.save_pattern("BTCUSDT", pattern)
            assert success is True, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {i}"
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            analysis = await analyzer.analyze_pattern("BTCUSDT", pattern)
            assert analysis is not None, f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ {i}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            behavior_data = {
                "symbol": "BTCUSDT",
                "timestamp": pattern.timestamp.isoformat(),
                "pattern_type": pattern.pattern_type.value,
                "volume": 1000.0 + i * 100,
                "spread": 0.001 + i * 0.0001,
                "imbalance": 0.3 + i * 0.1,
                "pressure": 0.4 + i * 0.05,
                "confidence": float(pattern.confidence),
                "market_phase": pattern.context["market_regime"],
                "volatility_regime": pattern.context["volatility"],
                "liquidity_regime": "high",
                "analysis_result": analysis
            }
            success = await behavior_repo.save_behavior_record("BTCUSDT", behavior_data)
            assert success is True, f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è {i}"
            saved_patterns.append(pattern)
            print(f"‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω {i+1}/{len(realistic_patterns)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
        # –§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π
        print("üß† –§–∞–∑–∞ 2: –ê–Ω–∞–ª–∏–∑ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ —Ä–µ—à–µ–Ω–∏–π")
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        all_patterns = await storage.get_patterns_by_symbol("BTCUSDT")
        assert len(all_patterns) == len(realistic_patterns)
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
        reference_pattern = realistic_patterns[0]
        similar_patterns = await storage.find_similar_patterns(
            "BTCUSDT",
            reference_pattern.features.to_dict(),
            similarity_threshold=0.7
        )
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(similar_patterns)} –ø–æ—Ö–æ–∂–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        success_rates = {}
        for pattern_type in MarketMakerPatternType:
            success_rate = await success_analyzer.calculate_success_rate(
                "BTCUSDT", pattern_type
            )
            success_rates[pattern_type.value] = success_rate
            print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å {pattern_type.value}: {success_rate:.2f}")
        # –§–∞–∑–∞ 3: –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("üí∞ –§–∞–∑–∞ 3: –°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        results = []
        for i, pattern in enumerate(realistic_patterns):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏
            if i < 3:  # –ü–µ—Ä–≤—ã–µ 3 –ø–∞—Ç—Ç–µ—Ä–Ω–∞ —É—Å–ø–µ—à–Ω—ã
                result = PatternResult(
                    outcome=PatternOutcome.SUCCESS,
                    price_change_15min=0.02 + i * 0.005,
                    price_change_1h=0.05 + i * 0.01,
                    volume_change=0.1 + i * 0.02,
                    execution_time=300 + i * 30,
                    confidence=Confidence(0.8 + i * 0.02)
                )
            elif i == 3:  # 4-–π –ø–∞—Ç—Ç–µ—Ä–Ω —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–µ–Ω
                result = PatternResult(
                    outcome=PatternOutcome.PARTIAL,
                    price_change_15min=0.005,
                    price_change_1h=0.01,
                    volume_change=0.02,
                    execution_time=300,
                    confidence=Confidence(0.7)
                )
            else:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ—É—Å–ø–µ—à–µ–Ω
                result = PatternResult(
                    outcome=PatternOutcome.FAILURE,
                    price_change_15min=-0.01,
                    price_change_1h=-0.02,
                    volume_change=-0.05,
                    execution_time=300,
                    confidence=Confidence(0.6)
                )
            results.append(result)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞
            pattern_id = f"BTCUSDT_{pattern.pattern_type.value}_{pattern.timestamp.strftime('%Y%m%d_%H%M%S')}"
            success = await storage.update_pattern_result("BTCUSDT", pattern_id, result)
            assert success is True, f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ {i}"
        # –§–∞–∑–∞ 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        print("üìã –§–∞–∑–∞ 4: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        storage_stats = await storage.get_storage_statistics()
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: {storage_stats.total_patterns} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–≤–µ–¥–µ–Ω–∏—è
        behavior_stats = await behavior_repo.get_behavior_statistics("BTCUSDT")
        print(f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è: {behavior_stats['total_records']} –∑–∞–ø–∏—Å–µ–π")
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        updated_patterns = await storage.get_patterns_by_symbol("BTCUSDT")
        trends = await success_analyzer.analyze_success_trends(
            "BTCUSDT", MarketMakerPatternType.ACCUMULATION, updated_patterns
        )
        print(f"üìà –¢—Ä–µ–Ω–¥—ã —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {trends['trend_direction']} (—Å–∏–ª–∞: {trends['trend_strength']:.2f})")
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = await success_analyzer.generate_recommendations(
            "BTCUSDT", MarketMakerPatternType.ACCUMULATION, updated_patterns
        )
        print(f"üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        # –§–∞–∑–∞ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        print("üîç –§–∞–∑–∞ 5: –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        integrity = await storage.validate_data_integrity("BTCUSDT")
        assert integrity is True, "–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_success = await storage.backup_data("BTCUSDT")
        assert backup_success is True, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        assert storage_stats.avg_write_time_ms < 100, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å"
        assert storage_stats.cache_hit_ratio > 0.5, "–ù–∏–∑–∫–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à"
        assert storage_stats.compression_ratio < 1.0, "–°–∂–∞—Ç–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        print("‚úÖ E2E —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    @pytest.mark.asyncio
    async def test_multi_symbol_trading_e2e(self, e2e_components) -> None:
        """E2E —Ç–µ—Å—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º."""
        storage = e2e_components["storage"]
        analyzer = e2e_components["analyzer"]
        behavior_repo = e2e_components["behavior_repo"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–∏–º–≤–æ–ª–∞–º...")
        symbols = ["BTCUSDT", "ETHUSDT", "ADAUSDT", "DOTUSDT", "LINKUSDT"]
        for symbol in symbols:
            print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–º–≤–æ–ª–∞: {symbol}")
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
            for i in range(3):
                features = PatternFeatures(
                    book_pressure=BookPressure(0.6 + i * 0.1),
                    volume_delta=VolumeDelta(0.1 + i * 0.05),
                    price_reaction=PriceReaction(0.01 + i * 0.005),
                    spread_change=SpreadChange(0.03 + i * 0.01),
                    order_imbalance=OrderImbalance(0.5 + i * 0.1),
                    liquidity_depth=LiquidityDepth(0.7 + i * 0.05),
                    time_duration=TimeDuration(200 + i * 50),
                    volume_concentration=VolumeConcentration(0.6 + i * 0.05),
                    price_volatility=PriceVolatility(0.02 + i * 0.005),
                    market_microstructure=MarketMicrostructure({
                        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
                    })
                )
                pattern = MarketMakerPattern(
                    pattern_type=MarketMakerPatternType.ACCUMULATION,
                    symbol=Symbol(symbol),
                    timestamp=datetime.now() + timedelta(minutes=i*5),
                    features=features,
                    confidence=Confidence(0.8),
                    context={"market_regime": "trending", "session": "asian"}
                )
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
                success = await storage.save_pattern(symbol, pattern)
                assert success is True
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
                analysis = await analyzer.analyze_pattern(symbol, pattern)
                assert analysis is not None
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
                behavior_data = {
                    "symbol": symbol,
                    "timestamp": pattern.timestamp.isoformat(),
                    "pattern_type": pattern.pattern_type.value,
                    "volume": 1000.0 + i * 100,
                    "spread": 0.001 + i * 0.0001,
                    "imbalance": 0.3 + i * 0.1,
                    "pressure": 0.4 + i * 0.05,
                    "confidence": float(pattern.confidence)
                }
                success = await behavior_repo.save_behavior_record(symbol, behavior_data)
                assert success is True
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º
        total_stats = await storage.get_storage_statistics()
        assert total_stats.total_symbols == len(symbols)
        assert total_stats.total_patterns == len(symbols) * 3
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(symbols)} —Å–∏–º–≤–æ–ª–æ–≤, {total_stats.total_patterns} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    @pytest.mark.asyncio
    async def test_high_load_e2e(self, e2e_components) -> None:
        """E2E —Ç–µ—Å—Ç –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏."""
        storage = e2e_components["storage"]
        analyzer = e2e_components["analyzer"]
        behavior_repo = e2e_components["behavior_repo"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏...")
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        num_patterns = 100
        tasks = []
        async def process_pattern(i: int) -> Any:
            features = PatternFeatures(
                book_pressure=BookPressure(0.5 + (i % 10) * 0.05),
                volume_delta=VolumeDelta(0.1 + (i % 10) * 0.02),
                price_reaction=PriceReaction(0.01 + (i % 10) * 0.002),
                spread_change=SpreadChange(0.02 + (i % 10) * 0.005),
                order_imbalance=OrderImbalance(0.4 + (i % 10) * 0.05),
                liquidity_depth=LiquidityDepth(0.6 + (i % 10) * 0.03),
                time_duration=TimeDuration(150 + (i % 10) * 20),
                volume_concentration=VolumeConcentration(0.5 + (i % 10) * 0.03),
                price_volatility=PriceVolatility(0.015 + (i % 10) * 0.002),
                market_microstructure=MarketMicrostructure({
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
                })
            )
            pattern = MarketMakerPattern(
                pattern_type=MarketMakerPatternType.ACCUMULATION,
                symbol=Symbol("BTCUSDT"),
                timestamp=datetime.now() + timedelta(seconds=i),
                features=features,
                confidence=Confidence(0.7 + (i % 10) * 0.02),
                context={"market_regime": "trending", "session": "asian"}
            )
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            success = await storage.save_pattern("BTCUSDT", pattern)
            assert success is True
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω
            analysis = await analyzer.analyze_pattern("BTCUSDT", pattern)
            assert analysis is not None
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            behavior_data = {
                "symbol": "BTCUSDT",
                "timestamp": pattern.timestamp.isoformat(),
                "pattern_type": pattern.pattern_type.value,
                "volume": 1000.0 + i * 10,
                "spread": 0.001 + (i % 100) * 0.00001,
                "imbalance": 0.3 + (i % 10) * 0.05,
                "pressure": 0.4 + (i % 10) * 0.03,
                "confidence": float(pattern.confidence)
            }
            success = await behavior_repo.save_behavior_record("BTCUSDT", behavior_data)
            assert success is True
            return True
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ
        for i in range(num_patterns):
            tasks.append(process_pattern(i))
        print(f"üîÑ –ó–∞–ø—É—Å–∫ {num_patterns} –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–¥–∞—á...")
        results = await asyncio.gather(*tasks, return_exceptions=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        success_count = sum(1 for r in results if r is True)
        error_count = sum(1 for r in results if isinstance(r, Exception))
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        assert success_count > num_patterns * 0.95, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await storage.get_storage_statistics()
        assert stats.total_patterns >= num_patterns * 0.95
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.total_patterns} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
    @pytest.mark.asyncio
    async def test_data_recovery_e2e(self, e2e_components, realistic_patterns) -> None:
        """E2E —Ç–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        storage = e2e_components["storage"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        for pattern in realistic_patterns:
            await storage.save_pattern("BTCUSDT", pattern)
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, pattern in enumerate(realistic_patterns):
            result = PatternResult(
                outcome=PatternOutcome.SUCCESS if i < 3 else PatternOutcome.FAILURE,
                price_change_15min=0.02 if i < 3 else -0.01,
                price_change_1h=0.05 if i < 3 else -0.02,
                volume_change=0.1 if i < 3 else -0.05,
                execution_time=300,
                confidence=Confidence(0.8 if i < 3 else 0.6)
            )
            pattern_id = f"BTCUSDT_{pattern.pattern_type.value}_{pattern.timestamp.strftime('%Y%m%d_%H%M%S')}"
            await storage.update_pattern_result("BTCUSDT", pattern_id, result)
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_success = await storage.backup_data("BTCUSDT")
        assert backup_success is True
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        await storage.close()
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        new_storage = Mock()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        patterns = await new_storage.get_patterns_by_symbol("BTCUSDT")
        assert len(patterns) == len(realistic_patterns)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        for pattern_memory in patterns:
            assert pattern_memory.result is not None
            assert pattern_memory.accuracy > 0.0
            assert pattern_memory.avg_return != 0.0
        await new_storage.close()
        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
    @pytest.mark.asyncio
    async def test_error_scenarios_e2e(self, e2e_components) -> None:
        """E2E —Ç–µ—Å—Ç —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫."""
        storage = e2e_components["storage"]
        analyzer = e2e_components["analyzer"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ—à–∏–±–æ–∫...")
        # –¢–µ—Å—Ç 1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üîç –¢–µ—Å—Ç 1: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        try:
            await storage.save_pattern("", None)
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞"
        except Exception:
            print("‚úÖ –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        # –¢–µ—Å—Ç 2: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
        print("üîç –¢–µ—Å—Ç 2: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
        patterns = await storage.get_patterns_by_symbol("NONEXISTENT")
        assert len(patterns) == 0
        print("‚úÖ –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        # –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        print("üîç –¢–µ—Å—Ç 3: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        try:
            await analyzer.analyze_pattern("", None)
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –æ—à–∏–±–∫–∞"
        except Exception:
            print("‚úÖ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
        # –¢–µ—Å—Ç 4: –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
        print("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫")
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        features = PatternFeatures(
            book_pressure=BookPressure(0.7),
            volume_delta=VolumeDelta(0.15),
            price_reaction=PriceReaction(0.02),
            spread_change=SpreadChange(0.05),
            order_imbalance=OrderImbalance(0.6),
            liquidity_depth=LiquidityDepth(0.8),
            time_duration=TimeDuration(300),
            volume_concentration=VolumeConcentration(0.75),
            price_volatility=PriceVolatility(0.03),
            market_microstructure=MarketMicrostructure({
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
            })
        )
        pattern = MarketMakerPattern(
            pattern_type=MarketMakerPatternType.ACCUMULATION,
            symbol=Symbol("BTCUSDT"),
            timestamp=datetime.now(),
            features=features,
            confidence=Confidence(0.85),
            context={}
        )
        success = await storage.save_pattern("BTCUSDT", pattern)
        assert success is True
        analysis = await analyzer.analyze_pattern("BTCUSDT", pattern)
        assert analysis is not None
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫")
    @pytest.mark.asyncio
    async def test_performance_benchmark_e2e(self, e2e_components) -> None:
        """E2E —Ç–µ—Å—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        storage = e2e_components["storage"]
        analyzer = e2e_components["analyzer"]
        print("üöÄ –ù–∞—á–∞–ª–æ E2E —Ç–µ—Å—Ç–∞ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏
        print("üìù –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∏...")
        start_time = datetime.now()
        for i in range(50):
            features = PatternFeatures(
                book_pressure=BookPressure(0.6 + (i % 10) * 0.05),
                volume_delta=VolumeDelta(0.1 + (i % 10) * 0.02),
                price_reaction=PriceReaction(0.01 + (i % 10) * 0.002),
                spread_change=SpreadChange(0.02 + (i % 10) * 0.005),
                order_imbalance=OrderImbalance(0.4 + (i % 10) * 0.05),
                liquidity_depth=LiquidityDepth(0.6 + (i % 10) * 0.03),
                time_duration=TimeDuration(150 + (i % 10) * 20),
                volume_concentration=VolumeConcentration(0.5 + (i % 10) * 0.03),
                price_volatility=PriceVolatility(0.015 + (i % 10) * 0.002),
                market_microstructure=MarketMicrostructure({
                    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
                })
            )
            pattern = MarketMakerPattern(
                pattern_type=MarketMakerPatternType.ACCUMULATION,
                symbol=Symbol("BTCUSDT"),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø Symbol
                timestamp=datetime.now() + timedelta(seconds=i),
                features=features,
                confidence=Confidence(0.7 + (i % 10) * 0.02),
                context={}  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏
            )
            await storage.save_pattern("BTCUSDT", pattern)
        write_time = (datetime.now() - start_time).total_seconds()
        write_rate = 50 / write_time
        print(f"üìù –°–∫–æ—Ä–æ—Å—Ç—å –∑–∞–ø–∏—Å–∏: {write_rate:.2f} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤/—Å–µ–∫")
        assert write_rate > 10, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å"
        # –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è
        print("üìñ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á—Ç–µ–Ω–∏—è...")
        start_time = datetime.now()
        patterns = await storage.get_patterns_by_symbol("BTCUSDT")
        read_time = (datetime.now() - start_time).total_seconds()
        read_rate = len(patterns) / read_time
        print(f"üìñ –°–∫–æ—Ä–æ—Å—Ç—å —á—Ç–µ–Ω–∏—è: {read_rate:.2f} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤/—Å–µ–∫")
        assert read_rate > 50, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ"
        # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
        print("üß† –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞...")
        start_time = datetime.now()
        for pattern in patterns[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10
            await analyzer.analyze_pattern("BTCUSDT", pattern.pattern)
        analysis_time = (datetime.now() - start_time).total_seconds()
        analysis_rate = 10 / analysis_time
        print(f"üß† –°–∫–æ—Ä–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–∞: {analysis_rate:.2f} –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤/—Å–µ–∫")
        assert analysis_rate > 5, "–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        stats = await storage.get_storage_statistics()
        print(f"üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"   - –í—Ä–µ–º—è –∑–∞–ø–∏—Å–∏: {stats.avg_write_time_ms:.2f} –º—Å")
        print(f"   - –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è: {stats.avg_read_time_ms:.2f} –º—Å")
        print(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—ç—à–∞: {stats.cache_hit_ratio:.2f}")
        print(f"   - –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–∂–∞—Ç–∏—è: {stats.compression_ratio:.2f}")
        print("‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
if __name__ == "__main__":
    pytest.main([__file__, "-v"]) 
