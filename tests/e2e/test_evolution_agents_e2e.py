"""
E2E —Ç–µ—Å—Ç—ã –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤.
–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —ç–≤–æ–ª—é—Ü–∏–∏.
"""
import asyncio
import os
import tempfile
from datetime import datetime, timedelta
import pytest
import pandas as pd
from shared.numpy_utils import np
from typing import Any, Dict, List, Optional, Union, AsyncGenerator
from infrastructure.agents.evolvable_market_maker import EvolvableMarketMakerAgent
from infrastructure.agents.evolvable_risk_agent import EvolvableRiskAgent
from infrastructure.agents.evolvable_portfolio_agent import EvolvablePortfolioAgent
from infrastructure.agents.evolvable_news_agent import EvolvableNewsAgent
from infrastructure.agents.evolvable_market_regime import EvolvableMarketRegimeAgent
from infrastructure.agents.evolvable_strategy_agent import EvolvableStrategyAgent
from infrastructure.agents.evolvable_order_executor import EvolvableOrderExecutor
from infrastructure.agents.evolvable_meta_controller import EvolvableMetaController
from infrastructure.core.evolution_manager import EvolutionManager
class TestEvolutionAgentsE2E:
    """E2E —Ç–µ—Å—Ç—ã –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    @pytest.fixture
    def realistic_market_data(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        dates = pd.date_range(start='2024-01-01', periods=1000, freq='1H')
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ü–µ–Ω —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
        np.random.seed(42)
        base_price = 50000
        trend = np.linspace(0, 0.1, 1000)  # –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥
        noise = np.random.normal(0, 0.02, 1000)  # –®—É–º
        volatility = np.random.normal(0, 0.015, 1000)  # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
        prices = base_price * (1 + trend + noise + volatility)
        volumes = np.random.uniform(1000, 10000, 1000)
        data = {
            'open': prices * (1 + np.random.normal(0, 0.001, 1000)),
            'high': prices * (1 + np.abs(np.random.normal(0, 0.005, 1000))),
            'low': prices * (1 - np.abs(np.random.normal(0, 0.005, 1000))),
            'close': prices,
            'volume': volumes
        }
        return pd.DataFrame(data, index=dates)
    @pytest.fixture
    def realistic_strategy_signals(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        return {
            'trend_strategy': {
                'direction': 'buy',
                'confidence': 0.85,
                'strength': 0.78,
                'priority': 1,
                'timestamp': datetime.now()
            },
            'momentum_strategy': {
                'direction': 'sell',
                'confidence': 0.72,
                'strength': 0.65,
                'priority': 2,
                'timestamp': datetime.now()
            },
            'mean_reversion_strategy': {
                'direction': 'buy',
                'confidence': 0.68,
                'strength': 0.55,
                'priority': 3,
                'timestamp': datetime.now()
            },
            'volatility_strategy': {
                'direction': 'hold',
                'confidence': 0.45,
                'strength': 0.32,
                'priority': 4,
                'timestamp': datetime.now()
            },
            'arbitrage_strategy': {
                'direction': 'buy',
                'confidence': 0.92,
                'strength': 0.88,
                'priority': 1,
                'timestamp': datetime.now()
            }
        }
    @pytest.fixture
    def realistic_risk_metrics(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        return {
            'var_95': 0.0234,
            'var_99': 0.0345,
            'max_drawdown': 0.0567,
            'volatility': 0.0289,
            'exposure_level': 0.623,
            'confidence_score': 0.745,
            'kelly_criterion': 0.167,
            'sharpe_ratio': 1.234,
            'sortino_ratio': 1.567,
            'calmar_ratio': 0.890
        }
    @pytest.fixture
    def realistic_portfolio_state(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        return {
            'BTC': {
                'weight': 0.45,
                'value': 45000,
                'pnl': 0.12,
                'volatility': 0.025
            },
            'ETH': {
                'weight': 0.30,
                'value': 3000,
                'pnl': 0.08,
                'volatility': 0.030
            },
            'ADA': {
                'weight': 0.15,
                'value': 0.45,
                'pnl': -0.05,
                'volatility': 0.035
            },
            'DOT': {
                'weight': 0.10,
                'value': 7.50,
                'pnl': 0.15,
                'volatility': 0.040
            }
        }
    @pytest.fixture
    def realistic_news_data(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return {
            'sentiment_score': 0.67,
            'news_volume': 156,
            'social_sentiment': 0.72,
            'breaking_news': False,
            'news_sources': ['Reuters', 'Bloomberg', 'CNBC'],
            'key_events': ['Fed meeting', 'Earnings report', 'Regulation news'],
            'market_impact': 0.15,
            'confidence': 0.78
        }
    @pytest.fixture
    def temp_workspace(self: "TestEvolvableMarketMakerAgent") -> Any:
        """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–∞–±–æ—á–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ"""
        with tempfile.TemporaryDirectory() as temp_dir:
            yield temp_dir
    @pytest.mark.asyncio
    async def test_full_evolution_cycle_e2e(self, realistic_market_data, realistic_strategy_signals,
                                          realistic_risk_metrics, realistic_portfolio_state, 
                                          realistic_news_data, temp_workspace) -> None:
        """–ü–æ–ª–Ω—ã–π E2E —Ç–µ—Å—Ç —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents = {
            'market_maker': EvolvableMarketMakerAgent(),
            'risk': EvolvableRiskAgent(),
            'portfolio': EvolvablePortfolioAgent(),
            'news': EvolvableNewsAgent(),
            'market_regime': EvolvableMarketRegimeAgent(),
            'strategy': EvolvableStrategyAgent(),
            'order_executor': EvolvableOrderExecutor(),
            'meta_controller': EvolvableMetaController()
        }
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        comprehensive_data = {
            "market_data": realistic_market_data,
            "strategy_signals": realistic_strategy_signals,
            "risk_metrics": realistic_risk_metrics,
            "current_weights": {k: v['weight'] for k, v in realistic_portfolio_state.items()},
            "news_data": realistic_news_data,
            "portfolio_state": realistic_portfolio_state,
            "order_data": {
                "symbol": "BTCUSDT",
                "side": "buy",
                "quantity": 0.1,
                "price": 50000,
                "timestamp": datetime.now()
            }
        }
        # –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        print("üîÑ –§–∞–∑–∞ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è")
        for name, agent in agents.items():
            result = await agent.adapt(comprehensive_data)
            assert result is True, f"–ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {name}"
            print(f"‚úÖ {name}: –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        # –§–∞–∑–∞ 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        print("üìö –§–∞–∑–∞ 2: –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
        for name, agent in agents.items():
            result = await agent.learn(comprehensive_data)
            assert result is True, f"–û–±—É—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {name}"
            print(f"‚úÖ {name}: –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        # –§–∞–∑–∞ 3: –ü–æ–ª–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
        print("üß¨ –§–∞–∑–∞ 3: –ü–æ–ª–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è")
        for name, agent in agents.items():
            result = await agent.evolve(comprehensive_data)
            assert result is True, f"–≠–≤–æ–ª—é—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {name}"
            print(f"‚úÖ {name}: —ç–≤–æ–ª—é—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        # –§–∞–∑–∞ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("üìä –§–∞–∑–∞ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        performance_metrics = {}
        for name, agent in agents.items():
            performance = agent.get_performance()
            confidence = agent.get_confidence()
            performance_metrics[name] = {
                'performance': performance,
                'confidence': confidence,
                'evolution_count': agent.evolution_count
            }
            print(f"üìà {name}: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={performance:.3f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence:.3f}")
        # –§–∞–∑–∞ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("üíæ –§–∞–∑–∞ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        for name, agent in agents.items():
            save_path = os.path.join(temp_workspace, f"{name}_state.pkl")
            result = agent.save_state(save_path)
            assert result is True, f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–ª—è {name}"
            assert os.path.exists(save_path), f"–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω –¥–ª—è {name}"
            print(f"‚úÖ {name}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        # –§–∞–∑–∞ 6: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("üìÇ –§–∞–∑–∞ 6: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        for name, agent in agents.items():
            save_path = os.path.join(temp_workspace, f"{name}_state.pkl")
            result = agent.load_state(save_path)
            assert result is True, f"–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {name}"
            print(f"‚úÖ {name}: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
        # –§–∞–∑–∞ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        print("üîß –§–∞–∑–∞ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏")
        # –¢–µ—Å—Ç MarketMaker
        market_maker = agents['market_maker']
        spread_analysis = await market_maker.analyze_spread(realistic_market_data)
        assert isinstance(spread_analysis, dict)
        assert 'spread_width' in spread_analysis
        # –¢–µ—Å—Ç Risk Agent
        risk_agent = agents['risk']
        risk_assessment = await risk_agent.assess_risk(realistic_market_data, realistic_risk_metrics)
        assert isinstance(risk_assessment, dict)
        assert 'risk_level' in risk_assessment
        # –¢–µ—Å—Ç Portfolio Agent
        portfolio_agent = agents['portfolio']
        optimal_weights = await portfolio_agent.predict_optimal_weights(realistic_market_data)
        assert isinstance(optimal_weights, dict)
        assert len(optimal_weights) > 0
        # –¢–µ—Å—Ç News Agent
        news_agent = agents['news']
        sentiment_analysis = await news_agent.analyze_sentiment(realistic_news_data)
        assert isinstance(sentiment_analysis, dict)
        assert 'sentiment_score' in sentiment_analysis
        # –¢–µ—Å—Ç Market Regime Agent
        market_regime_agent = agents['market_regime']
        regime_detection = await market_regime_agent.detect_regime(realistic_market_data)
        assert isinstance(regime_detection, dict)
        assert 'regime_type' in regime_detection
        # –¢–µ—Å—Ç Strategy Agent
        strategy_agent = agents['strategy']
        strategy_selection = await strategy_agent.select_strategy(realistic_market_data, realistic_strategy_signals)
        assert isinstance(strategy_selection, dict)
        assert 'selected_strategy' in strategy_selection
        # –¢–µ—Å—Ç Order Executor
        order_executor = agents['order_executor']
        execution_optimization = await order_executor.optimize_execution(
            comprehensive_data['order_data'], realistic_market_data
        )
        assert isinstance(execution_optimization, dict)
        assert 'price_offset' in execution_optimization
        # –¢–µ—Å—Ç Meta Controller
        meta_controller = agents['meta_controller']
        coordination = await meta_controller.coordinate_strategies(
            "BTCUSDT", realistic_market_data, realistic_strategy_signals, realistic_risk_metrics
        )
        assert isinstance(coordination, dict)
        assert 'evolution_metrics' in coordination
        print("‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
    @pytest.mark.asyncio
    async def test_evolution_manager_integration_e2e(self, realistic_market_data, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        evolution_manager = EvolutionManager()
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        agents = [
            EvolvableMarketMakerAgent(),
            EvolvableRiskAgent(),
            EvolvablePortfolioAgent(),
            EvolvableNewsAgent(),
            EvolvableMarketRegimeAgent(),
            EvolvableStrategyAgent(),
            EvolvableOrderExecutor(),
            EvolvableMetaController()
        ]
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        registered_components = evolution_manager.get_components()
        assert len(registered_components) >= len(agents)
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —ç–≤–æ–ª—é—Ü–∏–∏
        data = {"market_data": realistic_market_data}
        # –ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        results = await evolution_manager.adapt_all(data)
        assert all(results.values()), "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å"
        # –û–±—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        results = await evolution_manager.learn_all(data)
        assert all(results.values()), "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—É—á–∏–ª–∏—Å—å"
        # –≠–≤–æ–ª—é—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        results = await evolution_manager.evolve_all(data)
        assert all(results.values()), "–ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–ª–∏"
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_report = evolution_manager.get_performance_report()
        assert isinstance(performance_report, dict)
        assert len(performance_report) > 0
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —É—Å–ø–µ—à–Ω–∞")
    @pytest.mark.asyncio
    async def test_agent_interaction_e2e(self, realistic_market_data, realistic_strategy_signals,
                                       realistic_risk_metrics, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        market_maker = EvolvableMarketMakerAgent()
        risk_agent = EvolvableRiskAgent()
        portfolio_agent = EvolvablePortfolioAgent()
        meta_controller = EvolvableMetaController()
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            "market_data": realistic_market_data,
            "strategy_signals": realistic_strategy_signals,
            "risk_metrics": realistic_risk_metrics
        }
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        await market_maker.adapt(data)
        await risk_agent.adapt(data)
        await portfolio_agent.adapt(data)
        await meta_controller.adapt(data)
        # –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: MarketMaker -> Risk -> Portfolio -> MetaController
        # 1. MarketMaker –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø—Ä–µ–¥
        spread_analysis = await market_maker.analyze_spread(realistic_market_data)
        assert isinstance(spread_analysis, dict)
        # 2. Risk Agent –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ —Å —É—á–µ—Ç–æ–º —Å–ø—Ä–µ–¥–∞
        risk_data = {**data, "spread_analysis": spread_analysis}
        risk_assessment = await risk_agent.assess_risk(realistic_market_data, realistic_risk_metrics)
        assert isinstance(risk_assessment, dict)
        # 3. Portfolio Agent –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–∏—Å–∫–∞
        portfolio_data = {**data, "risk_assessment": risk_assessment}
        optimal_weights = await portfolio_agent.predict_optimal_weights(realistic_market_data)
        assert isinstance(optimal_weights, dict)
        # 4. MetaController –∫–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ—à–µ–Ω–∏—è
        coordination_data = {
            "market_data": realistic_market_data,
            "strategy_signals": realistic_strategy_signals,
            "risk_metrics": realistic_risk_metrics,
            "spread_analysis": spread_analysis,
            "risk_assessment": risk_assessment,
            "optimal_weights": optimal_weights
        }
        coordination = await meta_controller.coordinate_strategies(
            "BTCUSDT", realistic_market_data, realistic_strategy_signals, realistic_risk_metrics
        )
        assert isinstance(coordination, dict)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏–π
        assert 'evolution_metrics' in coordination
        assert coordination['evolution_metrics']['performance'] >= 0.0
        assert coordination['evolution_metrics']['confidence'] >= 0.0
        print("‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")
    @pytest.mark.asyncio
    async def test_performance_evolution_e2e(self, realistic_market_data, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç —ç–≤–æ–ª—é—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        agent = EvolvableMarketMakerAgent()
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        initial_performance = agent.get_performance()
        initial_confidence = agent.get_confidence()
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {initial_performance:.3f}")
        print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {initial_confidence:.3f}")
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ü–∏–∫–ª—ã –æ–±—É—á–µ–Ω–∏—è
        for cycle in range(5):
            data = {"market_data": realistic_market_data}
            # –ê–¥–∞–ø—Ç–∞—Ü–∏—è
            await agent.adapt(data)
            # –û–±—É—á–µ–Ω–∏–µ
            await agent.learn(data)
            # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance = agent.get_performance()
            confidence = agent.get_confidence()
            print(f"üîÑ –¶–∏–∫–ª {cycle + 1}: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={performance:.3f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence:.3f}")
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è (–≤ –æ–±—â–µ–º —Å–ª—É—á–∞–µ)
            assert performance >= 0.0 and performance <= 1.0
            assert confidence >= 0.0 and confidence <= 1.0
        # –ü–æ–ª–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
        data = {"market_data": realistic_market_data}
        await agent.evolve(data)
        final_performance = agent.get_performance()
        final_confidence = agent.get_confidence()
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {final_performance:.3f}")
        print(f"üéØ –§–∏–Ω–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {final_confidence:.3f}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞
        assert agent.evolution_count > 0
        assert agent.last_evolution is not None
        print("‚úÖ –≠–≤–æ–ª—é—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—à–Ω–∞")
    @pytest.mark.asyncio
    async def test_error_recovery_e2e(self, realistic_market_data, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫"""
        agent = EvolvableMarketMakerAgent()
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        initial_state_path = os.path.join(temp_workspace, "initial_state.pkl")
        agent.save_state(initial_state_path)
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            await agent.adapt(None)
        except Exception as e:
            print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}")
        try:
            await agent.learn({})
        except Exception as e:
            print(f"‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        agent.load_state(initial_state_path)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∞–≥–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        data = {"market_data": realistic_market_data}
        result = await agent.adapt(data)
        assert result is True
        result = await agent.learn(data)
        assert result is True
        print("‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ —É—Å–ø–µ—à–Ω–æ")
    @pytest.mark.asyncio
    async def test_concurrent_evolution_e2e(self, realistic_market_data, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —ç–≤–æ–ª—é—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        agents = [
            EvolvableMarketMakerAgent(),
            EvolvableRiskAgent(),
            EvolvablePortfolioAgent(),
            EvolvableNewsAgent(),
            EvolvableMarketRegimeAgent(),
            EvolvableStrategyAgent(),
            EvolvableOrderExecutor(),
            EvolvableMetaController()
        ]
        data = {"market_data": realistic_market_data}
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
        adapt_tasks = [agent.adapt(data) for agent in agents]
        adapt_results = await asyncio.gather(*adapt_tasks)
        assert all(adapt_results)
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        learn_tasks = [agent.learn(data) for agent in agents]
        learn_results = await asyncio.gather(*learn_tasks)
        assert all(learn_results)
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è
        evolve_tasks = [agent.evolve(data) for agent in agents]
        evolve_results = await asyncio.gather(*evolve_tasks)
        assert all(evolve_results)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for i, agent in enumerate(agents):
            performance = agent.get_performance()
            confidence = agent.get_confidence()
            assert 0.0 <= performance <= 1.0
            assert 0.0 <= confidence <= 1.0
            print(f"‚úÖ –ê–≥–µ–Ω—Ç {i}: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={performance:.3f}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å={confidence:.3f}")
        print("‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è —ç–≤–æ–ª—é—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    @pytest.mark.asyncio
    async def test_memory_management_e2e(self, realistic_market_data, temp_workspace) -> None:
        """E2E —Ç–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é"""
        agent = EvolvableMarketMakerAgent()
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        for i in range(200):  # –ë–æ–ª—å—à–µ —á–µ–º max_training_samples
            data = {"market_data": realistic_market_data}
            await agent.learn(data)
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏
            assert len(agent.training_data) <= agent.max_training_samples
            if i % 50 == 0:
                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {i} –æ–±—Ä–∞–∑—Ü–æ–≤, —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏: {len(agent.training_data)}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
        performance = agent.get_performance()
        confidence = agent.get_confidence()
        assert 0.0 <= performance <= 1.0
        assert 0.0 <= confidence <= 1.0
        print(f"‚úÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç—å—é —É—Å–ø–µ—à–Ω–æ: –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å={performance:.3f}")
    @pytest.mark.asyncio
    async def test_comprehensive_validation_e2e(self, realistic_market_data, realistic_strategy_signals,
                                              realistic_risk_metrics, realistic_portfolio_state, 
                                              realistic_news_data, temp_workspace) -> None:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents = {
            'market_maker': EvolvableMarketMakerAgent(),
            'risk': EvolvableRiskAgent(),
            'portfolio': EvolvablePortfolioAgent(),
            'news': EvolvableNewsAgent(),
            'market_regime': EvolvableMarketRegimeAgent(),
            'strategy': EvolvableStrategyAgent(),
            'order_executor': EvolvableOrderExecutor(),
            'meta_controller': EvolvableMetaController()
        }
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        data = {
            "market_data": realistic_market_data,
            "strategy_signals": realistic_strategy_signals,
            "risk_metrics": realistic_risk_metrics,
            "current_weights": {k: v['weight'] for k, v in realistic_portfolio_state.items()},
            "news_data": realistic_news_data,
            "portfolio_state": realistic_portfolio_state
        }
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        for name, agent in agents.items():
            assert agent is not None
            assert hasattr(agent, 'name')
            assert hasattr(agent, 'ml_model')
            assert hasattr(agent, 'optimizer')
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ê–¥–∞–ø—Ç–∞—Ü–∏—è
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 2: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        for name, agent in agents.items():
            result = await agent.adapt(data)
            assert result is True
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 3: –û–±—É—á–µ–Ω–∏–µ
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 3: –û–±—É—á–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤")
        for name, agent in agents.items():
            result = await agent.learn(data)
            assert result is True
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 4: –≠–≤–æ–ª—é—Ü–∏—è
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 4: –≠–≤–æ–ª—é—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤")
        for name, agent in agents.items():
            result = await agent.evolve(data)
            assert result is True
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 5: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 5: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        for name, agent in agents.items():
            performance = agent.get_performance()
            confidence = agent.get_confidence()
            assert 0.0 <= performance <= 1.0
            assert 0.0 <= confidence <= 1.0
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        for name, agent in agents.items():
            save_path = os.path.join(temp_workspace, f"{name}_validation.pkl")
            save_result = agent.save_state(save_path)
            load_result = agent.load_state(save_path)
            assert save_result is True
            assert load_result is True
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 7: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 7: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤")
        # MarketMaker
        spread_analysis = await agents['market_maker'].analyze_spread(realistic_market_data)
        assert isinstance(spread_analysis, dict)
        # Risk
        risk_assessment = await agents['risk'].assess_risk(realistic_market_data, realistic_risk_metrics)
        assert isinstance(risk_assessment, dict)
        # Portfolio
        optimal_weights = await agents['portfolio'].predict_optimal_weights(realistic_market_data)
        assert isinstance(optimal_weights, dict)
        # News
        sentiment_analysis = await agents['news'].analyze_sentiment(realistic_news_data)
        assert isinstance(sentiment_analysis, dict)
        # Market Regime
        regime_detection = await agents['market_regime'].detect_regime(realistic_market_data)
        assert isinstance(regime_detection, dict)
        # Strategy
        strategy_selection = await agents['strategy'].select_strategy(realistic_market_data, realistic_strategy_signals)
        assert isinstance(strategy_selection, dict)
        # Order Executor
        execution_optimization = await agents['order_executor'].optimize_execution(
            {"symbol": "BTCUSDT", "side": "buy", "quantity": 0.1, "price": 50000}, 
            realistic_market_data
        )
        assert isinstance(execution_optimization, dict)
        # Meta Controller
        coordination = await agents['meta_controller'].coordinate_strategies(
            "BTCUSDT", realistic_market_data, realistic_strategy_signals, realistic_risk_metrics
        )
        assert isinstance(coordination, dict)
        # –í–∞–ª–∏–¥–∞—Ü–∏—è 8: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è 8: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —ç–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
        from infrastructure.core.evolution_manager import get_evolution_manager
        evolution_manager = get_evolution_manager()
        registered_components = evolution_manager.get_components()
        assert len(registered_components) >= len(agents)
        print("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"]) 
