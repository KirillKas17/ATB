#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ATB.
–ê–Ω–∞–ª–∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""

import time
import gc
import sys
import os
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
import statistics

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append("/workspace")
sys.path.append("/workspace/domain")
sys.path.append("/workspace/infrastructure")
sys.path.append("/workspace/application")

try:
    import pandas as pd

    PANDAS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Pandas –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    PANDAS_AVAILABLE = False

try:
    from shared.numpy_utils import np

    NUMPY_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è NumPy –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –±—É–¥—É—Ç –ø—Ä–æ–ø—É—â–µ–Ω—ã")
    NUMPY_AVAILABLE = False


@dataclass
class PerformanceResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    component_name: str
    operation: str
    avg_time_ms: float
    max_time_ms: float
    min_time_ms: float
    throughput_ops_sec: float
    performance_grade: str
    recommendations: List[str]
    test_passed: bool


class SimpleProfiler:
    """–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""

    def __init__(self):
        self.critical_thresholds = {
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
            "market_data_processing": {"max_ms": 100, "avg_ms": 50},
            "pattern_recognition": {"max_ms": 200, "avg_ms": 100},
            "feature_generation": {"max_ms": 500, "avg_ms": 200},
            "signal_analysis": {"max_ms": 150, "avg_ms": 75},
            "cache_operations": {"max_ms": 10, "avg_ms": 5},
            "order_validation": {"max_ms": 50, "avg_ms": 25},
            "risk_calculation": {"max_ms": 100, "avg_ms": 50},
        }

    def profile_function(self, func, *args, iterations: int = 10, **kwargs) -> Dict[str, float]:
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏."""
        times = []

        # –ü—Ä–æ–≥—Ä–µ–≤
        for _ in range(3):
            try:
                func(*args, **kwargs)
            except Exception:
                pass

        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        for i in range(iterations):
            gc.collect()
            start_time = time.perf_counter()

            try:
                result = func(*args, **kwargs)
                end_time = time.perf_counter()
                times.append((end_time - start_time) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {i}: {e}")
                times.append(float("inf"))

        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valid_times = [t for t in times if t != float("inf")]

        if not valid_times:
            return {
                "avg_time_ms": float("inf"),
                "max_time_ms": float("inf"),
                "min_time_ms": float("inf"),
                "throughput_ops_sec": 0,
            }

        avg_time = statistics.mean(valid_times)
        return {
            "avg_time_ms": avg_time,
            "max_time_ms": max(valid_times),
            "min_time_ms": min(valid_times),
            "throughput_ops_sec": 1000 / avg_time if avg_time > 0 else 0,
        }

    def grade_performance(self, operation: str, metrics: Dict[str, float]) -> str:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        if operation not in self.critical_thresholds:
            # –û–±—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            avg_time = metrics["avg_time_ms"]
            if avg_time < 50:
                return "A"
            elif avg_time < 200:
                return "B"
            elif avg_time < 1000:
                return "C"
            elif avg_time < 5000:
                return "D"
            else:
                return "F"

        thresholds = self.critical_thresholds[operation]
        avg_time = metrics["avg_time_ms"]
        max_time = metrics["max_time_ms"]

        if avg_time <= thresholds["avg_ms"] * 0.5 and max_time <= thresholds["max_ms"] * 0.5:
            return "A"
        elif avg_time <= thresholds["avg_ms"] and max_time <= thresholds["max_ms"]:
            return "B"
        elif avg_time <= thresholds["avg_ms"] * 2 and max_time <= thresholds["max_ms"] * 2:
            return "C"
        elif avg_time <= thresholds["avg_ms"] * 5 and max_time <= thresholds["max_ms"] * 5:
            return "D"
        else:
            return "F"

    def get_recommendations(self, operation: str, metrics: Dict[str, float], grade: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π."""
        recommendations = []

        if grade in ["D", "F"]:
            recommendations.append("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")

        avg_time = metrics["avg_time_ms"]

        if avg_time > 1000:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É")

        if operation == "feature_generation" and avg_time > 200:
            recommendations.extend(
                [
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏",
                    "–ö—ç—à–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤",
                ]
            )

        if operation == "pattern_recognition" and avg_time > 100:
            recommendations.extend(
                [
                    "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞",
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤",
                ]
            )

        if operation == "market_data_processing" and avg_time > 50:
            recommendations.extend(
                [
                    "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å pandas DataFrame",
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö",
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ batch-–æ–±—Ä–∞–±–æ—Ç–∫—É",
                ]
            )

        return recommendations


class PerformanceTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""

    def __init__(self):
        self.profiler = SimpleProfiler()
        self.results: List[PerformanceResult] = []

    def test_basic_data_operations(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏."""

        def basic_operations():
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            data = []
            for i in range(1000):
                data.append({"price": 50000 + i * 0.1, "volume": 100 + i, "timestamp": time.time() + i})

            # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            prices = [d["price"] for d in data]
            volumes = [d["volume"] for d in data]

            # –ü—Ä–æ—Å—Ç—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            avg_price = sum(prices) / len(prices)
            max_volume = max(volumes)

            return avg_price, max_volume

        metrics = self.profiler.profile_function(basic_operations, iterations=50)
        grade = self.profiler.grade_performance("market_data_processing", metrics)
        recommendations = self.profiler.get_recommendations("market_data_processing", metrics, grade)

        return PerformanceResult(
            component_name="BasicDataOperations",
            operation="market_data_processing",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B", "C"],
        )

    def test_technical_indicators(self) -> PerformanceResult:
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤."""

        def calculate_indicators():
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            prices = [50000 + i * 0.1 + (i % 10 - 5) for i in range(100)]

            # –ü—Ä–æ—Å—Ç–∞—è —Å–∫–æ–ª—å–∑—è—â–∞—è —Å—Ä–µ–¥–Ω—è—è
            sma_period = 20
            sma = []
            for i in range(len(prices)):
                if i >= sma_period - 1:
                    avg = sum(prices[i - sma_period + 1 : i + 1]) / sma_period
                    sma.append(avg)
                else:
                    sma.append(prices[i])

            # RSI —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π
            rsi_values = []
            for i in range(1, len(prices)):
                change = prices[i] - prices[i - 1]
                if change > 0:
                    rsi_values.append(70 + change * 10)  # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π RSI
                else:
                    rsi_values.append(30 + change * 10)

            return sma, rsi_values

        metrics = self.profiler.profile_function(calculate_indicators, iterations=100)
        grade = self.profiler.grade_performance("feature_generation", metrics)
        recommendations = self.profiler.get_recommendations("feature_generation", metrics, grade)

        return PerformanceResult(
            component_name="TechnicalIndicators",
            operation="feature_generation",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B", "C"],
        )

    def test_pattern_detection(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""

        def detect_patterns():
            # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            prices = [50000 + i * 0.1 + (i % 20 - 10) * 5 for i in range(50)]
            volumes = [1000 + i * 10 + (i % 15 - 7) * 50 for i in range(50)]

            patterns = []

            # –ü–æ–∏—Å–∫ –∞–Ω–æ–º–∞–ª–∏–π –æ–±—ä–µ–º–∞
            for i in range(1, len(volumes)):
                if volumes[i] > volumes[i - 1] * 2:
                    patterns.append({"type": "volume_spike", "index": i})

            # –ü–æ–∏—Å–∫ —Ä–µ–∑–∫–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π —Ü–µ–Ω—ã
            for i in range(1, len(prices)):
                price_change = abs(prices[i] - prices[i - 1]) / prices[i - 1]
                if price_change > 0.05:  # 5% –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                    patterns.append({"type": "price_spike", "index": i})

            return patterns

        metrics = self.profiler.profile_function(detect_patterns, iterations=100)
        grade = self.profiler.grade_performance("pattern_recognition", metrics)
        recommendations = self.profiler.get_recommendations("pattern_recognition", metrics, grade)

        return PerformanceResult(
            component_name="PatternDetection",
            operation="pattern_recognition",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B", "C"],
        )

    def test_cache_simulation(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –∫—ç—à –æ–ø–µ—Ä–∞—Ü–∏–π."""

        cache = {}

        def cache_operations():
            # –ó–∞–ø–∏—Å—å –≤ –∫—ç—à
            key = f"market_data_{time.time()}"
            data = {"price": 50000, "volume": 1000, "timestamp": time.time()}
            cache[key] = data

            # –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
            result = cache.get(key)

            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
            if len(cache) > 100:
                old_keys = list(cache.keys())[:10]
                for old_key in old_keys:
                    cache.pop(old_key, None)

            return result

        metrics = self.profiler.profile_function(cache_operations, iterations=200)
        grade = self.profiler.grade_performance("cache_operations", metrics)
        recommendations = self.profiler.get_recommendations("cache_operations", metrics, grade)

        return PerformanceResult(
            component_name="CacheSimulation",
            operation="cache_operations",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B"],
        )

    def test_order_validation(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–æ–≤."""

        def validate_order():
            # –ò–º–∏—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ä–¥–µ—Ä–∞
            order = {"symbol": "BTCUSDT", "side": "BUY", "quantity": 0.01, "price": 50000, "type": "LIMIT"}

            # –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            validations = []

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞
            if order["symbol"] in ["BTCUSDT", "ETHUSDT", "ADAUSDT"]:
                validations.append("symbol_valid")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
            if 0.001 <= order["quantity"] <= 100:
                validations.append("quantity_valid")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã
            if 1000 <= order["price"] <= 100000:
                validations.append("price_valid")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ—Ä–æ–Ω—ã
            if order["side"] in ["BUY", "SELL"]:
                validations.append("side_valid")

            return len(validations) == 4

        metrics = self.profiler.profile_function(validate_order, iterations=500)
        grade = self.profiler.grade_performance("order_validation", metrics)
        recommendations = self.profiler.get_recommendations("order_validation", metrics, grade)

        return PerformanceResult(
            component_name="OrderValidation",
            operation="order_validation",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B", "C"],
        )

    def test_risk_calculation(self) -> PerformanceResult:
        """–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤."""

        def calculate_risk():
            # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–æ–≤
            portfolio = {
                "BTCUSDT": {"quantity": 0.5, "price": 50000},
                "ETHUSDT": {"quantity": 2.0, "price": 3000},
                "ADAUSDT": {"quantity": 1000, "price": 0.5},
            }

            total_value = 0
            risks = {}

            for symbol, position in portfolio.items():
                value = position["quantity"] * position["price"]
                total_value += value

                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞
                volatility = 0.02  # 2% –¥–Ω–µ–≤–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                var_95 = value * volatility * 1.65  # VaR 95%

                risks[symbol] = {"value": value, "var_95": var_95, "risk_percent": var_95 / value * 100}

            # –û–±—â–∏–π —Ä–∏—Å–∫ –ø–æ—Ä—Ç—Ñ–µ–ª—è
            total_var = sum(r["var_95"] for r in risks.values())
            portfolio_risk = total_var / total_value * 100

            return portfolio_risk, risks

        metrics = self.profiler.profile_function(calculate_risk, iterations=200)
        grade = self.profiler.grade_performance("risk_calculation", metrics)
        recommendations = self.profiler.get_recommendations("risk_calculation", metrics, grade)

        return PerformanceResult(
            component_name="RiskCalculation",
            operation="risk_calculation",
            avg_time_ms=metrics["avg_time_ms"],
            max_time_ms=metrics["max_time_ms"],
            min_time_ms=metrics["min_time_ms"],
            throughput_ops_sec=metrics["throughput_ops_sec"],
            performance_grade=grade,
            recommendations=recommendations,
            test_passed=grade in ["A", "B", "C"],
        )

    def run_all_tests(self) -> List[PerformanceResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤."""
        print("üöÄ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        print("=" * 70)

        tests = [
            ("–ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏", self.test_basic_data_operations),
            ("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã", self.test_technical_indicators),
            ("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", self.test_pattern_detection),
            ("–ö—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏", self.test_cache_simulation),
            ("–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤", self.test_order_validation),
            ("–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤", self.test_risk_calculation),
        ]

        results = []

        for test_name, test_func in tests:
            print(f"‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                result = test_func()
                results.append(result)

                # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                grade_colors = {"A": "üü¢", "B": "üü°", "C": "üü†", "D": "üî¥", "F": "‚õî"}
                color = grade_colors.get(result.performance_grade, "‚ùì")

                print(f"   {color} –û—Ü–µ–Ω–∫–∞: {result.performance_grade}")
                print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result.avg_time_ms:.3f}ms")
                print(f"   üìà –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result.throughput_ops_sec:.0f} ops/sec")

                if result.performance_grade in ["D", "F"]:
                    print(f"   ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò!")

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")

            print("-" * 40)

        return results


def generate_performance_report(results: List[PerformanceResult]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    report = []
    report.append("# üìä –û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ ATB")
    report.append("=" * 70)
    report.append("")

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    critical_issues = [r for r in results if r.performance_grade in ["D", "F"]]
    good_performance = [r for r in results if r.performance_grade in ["A", "B"]]

    report.append("## üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    report.append(f"- –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(results)}")
    report.append(f"- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (A-B): {len(good_performance)}")
    report.append(f"- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (D-F): {len(critical_issues)}")
    report.append("")

    if critical_issues:
        report.append("## üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        for result in critical_issues:
            report.append(f"### {result.component_name} - {result.operation}")
            report.append(f"- **–û—Ü–µ–Ω–∫–∞**: {result.performance_grade}")
            report.append(f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è**: {result.avg_time_ms:.3f}ms")
            report.append(f"- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è**: {result.max_time_ms:.3f}ms")
            report.append(f"- **–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å**: {result.throughput_ops_sec:.0f} ops/sec")
            report.append("")

            if result.recommendations:
                report.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**")
                for rec in result.recommendations:
                    report.append(f"- {rec}")
                report.append("")

    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    report.append("## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    for result in sorted(results, key=lambda x: x.avg_time_ms, reverse=True):
        grade_emoji = {"A": "üü¢", "B": "üü°", "C": "üü†", "D": "üî¥", "F": "‚õî"}
        emoji = grade_emoji.get(result.performance_grade, "‚ùì")

        report.append(f"### {emoji} {result.component_name} - {result.operation}")
        report.append(f"**–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {result.performance_grade}")
        report.append("")

        report.append("**–ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:**")
        report.append(f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result.avg_time_ms:.3f}ms")
        report.append(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {result.min_time_ms:.3f}ms")
        report.append(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {result.max_time_ms:.3f}ms")
        report.append(f"- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result.throughput_ops_sec:.0f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
        report.append("")

        if result.recommendations:
            report.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            for rec in result.recommendations:
                report.append(f"- {rec}")
            report.append("")

        report.append("-" * 50)
        report.append("")

    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    report.append("## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")

    if critical_issues:
        report.append("### ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
        for result in critical_issues:
            report.append(f"- **{result.component_name}**: {result.avg_time_ms:.3f}ms")

    report.append("")
    report.append("### üöÄ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    report.append("1. **–ê–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è**: –ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
    report.append("2. **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ö—ç—à–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—è–∂–µ–ª—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    report.append("3. **–°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
    report.append("4. **–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–π—Ç–µ –∫–æ–¥")
    report.append("5. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
    report.append("")
    report.append("### üí° –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:")
    report.append("1. **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö**: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å < 50ms –¥–ª—è real-time —Ç–æ—Ä–≥–æ–≤–ª–∏")
    report.append("2. **–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤**: –î–æ–ª–∂–Ω–∞ –±—ã—Ç—å < 25ms –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è")
    report.append("3. **–†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–æ–≤**: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å < 50ms –¥–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è")
    report.append("4. **–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤**: –î–æ–ª–∂–Ω–æ –±—ã—Ç—å < 100ms –¥–ª—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤")
    report.append("5. **–ö—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏**: –î–æ–ª–∂–Ω—ã –±—ã—Ç—å < 5ms –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –∑–∞–¥–µ—Ä–∂–µ–∫")

    return "\n".join(report)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞."""
    print("üî¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")

    tester = PerformanceTester()
    results = tester.run_all_tests()

    print("\n" + "=" * 70)
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")

    report = generate_performance_report(results)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    from datetime import datetime

    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f"performance_report_simplified_{timestamp}.md"

    try:
        with open(report_filename, "w", encoding="utf-8") as f:
            f.write(report)
        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
        print("üìÑ –í—ã–≤–æ–¥ –æ—Ç—á–µ—Ç–∞ –≤ –∫–æ–Ω—Å–æ–ª—å:")
        print(report)

    print("\n" + "=" * 70)
    print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ
    critical_count = len([r for r in results if r.performance_grade in ["D", "F"]])
    failed_tests = len([r for r in results if not r.test_passed])

    if critical_count > 0:
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")

    if failed_tests > 0:
        print(f"‚ùå {failed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
    else:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")

    return results


if __name__ == "__main__":
    main()
