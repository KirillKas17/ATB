#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã ATB.
–§–æ–∫—É—Å –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –≥–¥–µ —Å–∫–æ—Ä–æ—Å—Ç—å –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
"""

import asyncio
import cProfile
import io
import pstats
import time
import gc
import threading
import psutil
import pandas as pd
from shared.numpy_utils import np
from decimal import Decimal
from datetime import datetime, timedelta
from typing import Dict, List, Any, Callable, Optional
from dataclasses import dataclass
from unittest.mock import Mock, AsyncMock
import pytest
import statistics
import warnings

# –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from infrastructure.core.feature_engineering import FeatureEngineer, FeatureConfig
from infrastructure.ml_services.ml_models import MLModelManager
from domain.intelligence.market_pattern_recognizer import MarketPatternRecognizer
from application.services.cache_service import CacheService

warnings.filterwarnings("ignore")


@dataclass
class PerformanceResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    component_name: str
    operation: str
    avg_time_ms: float
    max_time_ms: float
    min_time_ms: float
    p95_time_ms: float
    throughput_ops_sec: float
    memory_usage_mb: float
    cpu_usage_percent: float
    is_critical: bool
    performance_grade: str  # A, B, C, D, F
    recommendations: List[str]


class PerformanceProfiler:
    """–ü—Ä–æ—Ñ–∞–π–ª–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."""
    
    def __init__(self):
        self.results: List[PerformanceResult] = []
        self.critical_thresholds = {
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–ª–∏—è—é—Ç –Ω–∞ —Ç–æ—Ä–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è)
            'market_data_processing': {'max_ms': 100, 'avg_ms': 50},  # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            'pattern_recognition': {'max_ms': 200, 'avg_ms': 100},    # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            'feature_generation': {'max_ms': 500, 'avg_ms': 200},     # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            'ml_prediction': {'max_ms': 300, 'avg_ms': 150},          # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            'signal_analysis': {'max_ms': 150, 'avg_ms': 75},         # –ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–æ–≤
            'cache_operations': {'max_ms': 10, 'avg_ms': 5},          # –ö—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏
            
            # –ú–µ–Ω–µ–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            'model_training': {'max_ms': 30000, 'avg_ms': 15000},     # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
            'data_validation': {'max_ms': 1000, 'avg_ms': 500},       # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            'report_generation': {'max_ms': 2000, 'avg_ms': 1000},    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
        }
    
    def profile_function(self, func: Callable, *args, iterations: int = 100, **kwargs) -> Dict[str, float]:
        """–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏."""
        times = []
        memory_before = psutil.Process().memory_info().rss / 1024 / 1024
        cpu_before = psutil.cpu_percent()
        
        # –ü—Ä–æ–≥—Ä–µ–≤
        for _ in range(5):
            try:
                func(*args, **kwargs)
            except Exception:
                pass
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        for i in range(iterations):
            gc.collect()
            start_time = time.perf_counter()
            
            try:
                result = func(*args, **kwargs)
                end_time = time.perf_counter()
                times.append((end_time - start_time) * 1000)  # –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
            except Exception as e:
                print(f"Error in iteration {i}: {e}")
                times.append(float('inf'))
        
        memory_after = psutil.Process().memory_info().rss / 1024 / 1024
        cpu_after = psutil.cpu_percent()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        valid_times = [t for t in times if t != float('inf')]
        
        if not valid_times:
            return {
                'avg_time_ms': float('inf'),
                'max_time_ms': float('inf'),
                'min_time_ms': float('inf'),
                'p95_time_ms': float('inf'),
                'throughput_ops_sec': 0,
                'memory_usage_mb': memory_after - memory_before,
                'cpu_usage_percent': cpu_after - cpu_before
            }
        
        return {
            'avg_time_ms': statistics.mean(valid_times),
            'max_time_ms': max(valid_times),
            'min_time_ms': min(valid_times),
            'p95_time_ms': np.percentile(valid_times, 95),
            'throughput_ops_sec': 1000 / statistics.mean(valid_times) if statistics.mean(valid_times) > 0 else 0,
            'memory_usage_mb': memory_after - memory_before,
            'cpu_usage_percent': cpu_after - cpu_before
        }
    
    def grade_performance(self, operation: str, metrics: Dict[str, float]) -> str:
        """–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏."""
        if operation not in self.critical_thresholds:
            # –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏
            if metrics['avg_time_ms'] < 50:
                return 'A'
            elif metrics['avg_time_ms'] < 200:
                return 'B'
            elif metrics['avg_time_ms'] < 1000:
                return 'C'
            elif metrics['avg_time_ms'] < 5000:
                return 'D'
            else:
                return 'F'
        
        thresholds = self.critical_thresholds[operation]
        avg_time = metrics['avg_time_ms']
        max_time = metrics['max_time_ms']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        if avg_time <= thresholds['avg_ms'] * 0.5 and max_time <= thresholds['max_ms'] * 0.5:
            return 'A'  # –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        elif avg_time <= thresholds['avg_ms'] and max_time <= thresholds['max_ms']:
            return 'B'  # –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        elif avg_time <= thresholds['avg_ms'] * 2 and max_time <= thresholds['max_ms'] * 2:
            return 'C'  # –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        elif avg_time <= thresholds['avg_ms'] * 5 and max_time <= thresholds['max_ms'] * 5:
            return 'D'  # –ù–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        else:
            return 'F'  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    def get_recommendations(self, operation: str, metrics: Dict[str, float], grade: str) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        recommendations = []
        
        if grade in ['D', 'F']:
            recommendations.append("üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è")
        
        if metrics['avg_time_ms'] > 1000:
            recommendations.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–ª–∏ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å")
        
        if metrics['memory_usage_mb'] > 100:
            recommendations.append("–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω—ã —É—Ç–µ—á–∫–∏")
        
        if metrics['cpu_usage_percent'] > 80:
            recommendations.append("–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤")
        
        if operation == 'feature_generation' and metrics['avg_time_ms'] > 200:
            recommendations.extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ NumPy/Pandas",
                "–ö—ç—à–∏—Ä—É–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Numba –∏–ª–∏ Cython"
            ])
        
        if operation == 'pattern_recognition' and metrics['avg_time_ms'] > 100:
            recommendations.extend([
                "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫–æ–ª—å–∑—è—â–∏–µ –æ–∫–Ω–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å—á–µ—Ç–∞",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"
            ])
        
        if operation == 'ml_prediction' and metrics['avg_time_ms'] > 150:
            recommendations.extend([
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è real-time –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π",
                "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –≤ –ø–∞–º—è—Ç—å",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞—Ç—á–µ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É"
            ])
        
        if operation == 'cache_operations' and metrics['avg_time_ms'] > 5:
            recommendations.extend([
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫—ç—à–∞",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä—ã–µ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä—ã",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ in-memory –∫—ç—à (Redis/Memcached)"
            ])
        
        return recommendations


class CriticalComponentsTester:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    
    def __init__(self):
        self.profiler = PerformanceProfiler()
        self.test_data = self._generate_test_data()
    
    def _generate_test_data(self) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        np.random.seed(42)
        size = 10000  # 10k —Å–≤–µ—á–µ–π
        
        dates = pd.date_range('2023-01-01', periods=size, freq='1min')
        base_price = 50000.0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ OHLCV –¥–∞–Ω–Ω—ã–µ
        data = []
        for i in range(size):
            price_change = np.random.normal(0, 0.002) * base_price
            base_price = max(base_price + price_change, 1000.0)
            
            high = base_price * (1 + abs(np.random.normal(0, 0.001)))
            low = base_price * (1 - abs(np.random.normal(0, 0.001)))
            open_price = base_price + np.random.normal(0, 0.0005) * base_price
            close = base_price
            volume = np.random.exponential(1000)
            
            data.append({
                'open': max(open_price, 1000.0),
                'high': max(high, max(open_price, close, 1000.0)),
                'low': min(low, min(open_price, close)),
                'close': max(close, 1000.0),
                'volume': max(volume, 1)
            })
        
        return pd.DataFrame(data, index=dates)
    
    def test_feature_engineering_performance(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤."""
        config = FeatureConfig(
            use_technical_indicators=True,
            use_statistical_features=True,
            ema_periods=[5, 10, 20, 50],
            rsi_periods=[14, 21],
            rolling_windows=[5, 10, 20]
        )
        engineer = FeatureEngineer(config=config)
        
        def generate_features():
            return engineer.generate_features(self.test_data)
        
        metrics = self.profiler.profile_function(generate_features, iterations=10)
        grade = self.profiler.grade_performance('feature_generation', metrics)
        recommendations = self.profiler.get_recommendations('feature_generation', metrics, grade)
        
        return PerformanceResult(
            component_name="FeatureEngineer",
            operation="feature_generation",
            avg_time_ms=metrics['avg_time_ms'],
            max_time_ms=metrics['max_time_ms'],
            min_time_ms=metrics['min_time_ms'],
            p95_time_ms=metrics['p95_time_ms'],
            throughput_ops_sec=metrics['throughput_ops_sec'],
            memory_usage_mb=metrics['memory_usage_mb'],
            cpu_usage_percent=metrics['cpu_usage_percent'],
            is_critical=True,
            performance_grade=grade,
            recommendations=recommendations
        )
    
    def test_pattern_recognition_performance(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤."""
        recognizer = MarketPatternRecognizer()
        
        # –°–æ–∑–¥–∞–µ–º mock order book
        order_book = {
            'bids': [[49950, 10], [49940, 20], [49930, 15]],
            'asks': [[50050, 8], [50060, 18], [50070, 12]],
            'timestamp': time.time()
        }
        
        def detect_patterns():
            return recognizer.detect_whale_absorption('BTCUSDT', self.test_data, order_book)
        
        metrics = self.profiler.profile_function(detect_patterns, iterations=20)
        grade = self.profiler.grade_performance('pattern_recognition', metrics)
        recommendations = self.profiler.get_recommendations('pattern_recognition', metrics, grade)
        
        return PerformanceResult(
            component_name="MarketPatternRecognizer",
            operation="pattern_recognition",
            avg_time_ms=metrics['avg_time_ms'],
            max_time_ms=metrics['max_time_ms'],
            min_time_ms=metrics['min_time_ms'],
            p95_time_ms=metrics['p95_time_ms'],
            throughput_ops_sec=metrics['throughput_ops_sec'],
            memory_usage_mb=metrics['memory_usage_mb'],
            cpu_usage_percent=metrics['cpu_usage_percent'],
            is_critical=True,
            performance_grade=grade,
            recommendations=recommendations
        )
    
    def test_ml_prediction_performance(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π."""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        ml_manager = MLModelManager()
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        features = self.test_data[['open', 'high', 'low', 'close', 'volume']].copy()
        features['returns'] = features['close'].pct_change()
        features = features.dropna()
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è)
        target = (features['returns'].shift(-1) > 0).astype(int)
        target = target.dropna()
        features = features[:-1]
        
        # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        ml_manager.train_models(features, target)
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        test_features = features.tail(100)
        
        def make_prediction():
            return ml_manager.predict(test_features, model_name="random_forest")
        
        metrics = self.profiler.profile_function(make_prediction, iterations=50)
        grade = self.profiler.grade_performance('ml_prediction', metrics)
        recommendations = self.profiler.get_recommendations('ml_prediction', metrics, grade)
        
        return PerformanceResult(
            component_name="MLModelManager",
            operation="ml_prediction",
            avg_time_ms=metrics['avg_time_ms'],
            max_time_ms=metrics['max_time_ms'],
            min_time_ms=metrics['min_time_ms'],
            p95_time_ms=metrics['p95_time_ms'],
            throughput_ops_sec=metrics['throughput_ops_sec'],
            memory_usage_mb=metrics['memory_usage_mb'],
            cpu_usage_percent=metrics['cpu_usage_percent'],
            is_critical=True,
            performance_grade=grade,
            recommendations=recommendations
        )
    
    def test_cache_operations_performance(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à –æ–ø–µ—Ä–∞—Ü–∏–π."""
        cache_service = CacheService()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_key = "test_market_data_BTCUSDT"
        test_data = self.test_data.to_dict()
        
        def cache_operations():
            # –ó–∞–ø–∏—Å—å –≤ –∫—ç—à
            cache_service.set(test_key, test_data, ttl=300)
            # –ß—Ç–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
            result = cache_service.get(test_key)
            return result
        
        metrics = self.profiler.profile_function(cache_operations, iterations=100)
        grade = self.profiler.grade_performance('cache_operations', metrics)
        recommendations = self.profiler.get_recommendations('cache_operations', metrics, grade)
        
        return PerformanceResult(
            component_name="CacheService",
            operation="cache_operations",
            avg_time_ms=metrics['avg_time_ms'],
            max_time_ms=metrics['max_time_ms'],
            min_time_ms=metrics['min_time_ms'],
            p95_time_ms=metrics['p95_time_ms'],
            throughput_ops_sec=metrics['throughput_ops_sec'],
            memory_usage_mb=metrics['memory_usage_mb'],
            cpu_usage_percent=metrics['cpu_usage_percent'],
            is_critical=True,
            performance_grade=grade,
            recommendations=recommendations
        )
    
    def test_data_processing_performance(self) -> PerformanceResult:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        
        def process_market_data():
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç–∏–ø–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            data = self.test_data.copy()
            
            # –†–∞—Å—á–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            data['sma_20'] = data['close'].rolling(20).mean()
            data['ema_12'] = data['close'].ewm(span=12).mean()
            data['rsi'] = 100 - (100 / (1 + data['close'].pct_change().rolling(14).apply(
                lambda x: x[x > 0].sum() / abs(x[x < 0].sum()) if abs(x[x < 0].sum()) != 0 else 0
            )))
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–º–æ–≤
            data['volume_sma'] = data['volume'].rolling(20).mean()
            data['volume_ratio'] = data['volume'] / data['volume_sma']
            
            # –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            data['volatility'] = data['close'].pct_change().rolling(20).std()
            
            return data.dropna()
        
        metrics = self.profiler.profile_function(process_market_data, iterations=20)
        grade = self.profiler.grade_performance('market_data_processing', metrics)
        recommendations = self.profiler.get_recommendations('market_data_processing', metrics, grade)
        
        return PerformanceResult(
            component_name="MarketDataProcessor",
            operation="market_data_processing",
            avg_time_ms=metrics['avg_time_ms'],
            max_time_ms=metrics['max_time_ms'],
            min_time_ms=metrics['min_time_ms'],
            p95_time_ms=metrics['p95_time_ms'],
            throughput_ops_sec=metrics['throughput_ops_sec'],
            memory_usage_mb=metrics['memory_usage_mb'],
            cpu_usage_percent=metrics['cpu_usage_percent'],
            is_critical=True,
            performance_grade=grade,
            recommendations=recommendations
        )
    
    def run_all_tests(self) -> List[PerformanceResult]:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {len(self.test_data)} –∑–∞–ø–∏—Å–µ–π")
        print("=" * 80)
        
        tests = [
            ("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", self.test_data_processing_performance),
            ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤", self.test_feature_engineering_performance),
            ("–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", self.test_pattern_recognition_performance),
            ("ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è", self.test_ml_prediction_performance),
            ("–ö—ç—à –æ–ø–µ—Ä–∞—Ü–∏–∏", self.test_cache_operations_performance),
        ]
        
        results = []
        for test_name, test_func in tests:
            print(f"‚è≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_name}")
            try:
                result = test_func()
                results.append(result)
                
                # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                grade_colors = {
                    'A': 'üü¢', 'B': 'üü°', 'C': 'üü†', 'D': 'üî¥', 'F': '‚õî'
                }
                color = grade_colors.get(result.performance_grade, '‚ùì')
                
                print(f"   {color} –û—Ü–µ–Ω–∫–∞: {result.performance_grade}")
                print(f"   ‚è±Ô∏è  –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result.avg_time_ms:.2f}ms")
                print(f"   üìà –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result.throughput_ops_sec:.1f} ops/sec")
                
                if result.performance_grade in ['D', 'F']:
                    print(f"   ‚ö†Ô∏è  –¢–†–ï–ë–£–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò!")
                
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
            
            print("-" * 40)
        
        return results


def generate_performance_report(results: List[PerformanceResult]) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    report = []
    report.append("# üìä –û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –¢–û–†–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´ ATB")
    report.append("=" * 70)
    report.append("")
    
    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    critical_issues = [r for r in results if r.performance_grade in ['D', 'F']]
    good_performance = [r for r in results if r.performance_grade in ['A', 'B']]
    
    report.append("## üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    report.append(f"- –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {len(results)}")
    report.append(f"- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å —Ö–æ—Ä–æ—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é (A-B): {len(good_performance)}")
    report.append(f"- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (D-F): {len(critical_issues)}")
    report.append("")
    
    if critical_issues:
        report.append("## üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        for result in critical_issues:
            report.append(f"### {result.component_name} - {result.operation}")
            report.append(f"- **–û—Ü–µ–Ω–∫–∞**: {result.performance_grade}")
            report.append(f"- **–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è**: {result.avg_time_ms:.2f}ms")
            report.append(f"- **–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è**: {result.max_time_ms:.2f}ms")
            report.append(f"- **–ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å**: {result.throughput_ops_sec:.1f} ops/sec")
            report.append("")
            
            if result.recommendations:
                report.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:**")
                for rec in result.recommendations:
                    report.append(f"- {rec}")
                report.append("")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    report.append("## üìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
    for result in sorted(results, key=lambda x: x.avg_time_ms, reverse=True):
        grade_emoji = {'A': 'üü¢', 'B': 'üü°', 'C': 'üü†', 'D': 'üî¥', 'F': '‚õî'}
        emoji = grade_emoji.get(result.performance_grade, '‚ùì')
        
        report.append(f"### {emoji} {result.component_name} - {result.operation}")
        report.append(f"**–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏**: {result.performance_grade}")
        report.append("")
        
        report.append("**–ú–µ—Ç—Ä–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:**")
        report.append(f"- –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {result.avg_time_ms:.2f}ms")
        report.append(f"- –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {result.min_time_ms:.2f}ms")
        report.append(f"- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {result.max_time_ms:.2f}ms")
        report.append(f"- 95-–π –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å: {result.p95_time_ms:.2f}ms")
        report.append("")
        
        report.append("**–†–µ—Å—É—Ä—Å—ã:**")
        report.append(f"- –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {result.throughput_ops_sec:.1f} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫")
        report.append(f"- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {result.memory_usage_mb:.2f}MB")
        report.append(f"- –ù–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU: {result.cpu_usage_percent:.1f}%")
        report.append("")
        
        if result.recommendations:
            report.append("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
            for rec in result.recommendations:
                report.append(f"- {rec}")
            report.append("")
        
        report.append("-" * 50)
        report.append("")
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    report.append("## üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
    
    if critical_issues:
        report.append("### ‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
        for result in critical_issues:
            report.append(f"- **{result.component_name}**: {result.avg_time_ms:.2f}ms (—Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏)")
    
    report.append("")
    report.append("### üöÄ –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
    report.append("1. **–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ NumPy/Pandas –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ —Ü–∏–∫–ª–æ–≤ Python")
    report.append("2. **–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ**: –ö—ç—à–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç—è–∂–µ–ª—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π")
    report.append("3. **–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ asyncio –¥–ª—è I/O –æ–ø–µ—Ä–∞—Ü–∏–π")
    report.append("4. **–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ**: –†–µ–≥—É–ª—è—Ä–Ω–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç")
    report.append("5. **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥**: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ production")
    
    return "\n".join(report)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
    print("üî¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    tester = CriticalComponentsTester()
    results = tester.run_all_tests()
    
    print("\n" + "=" * 80)
    print("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...")
    
    report = generate_performance_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_filename = f"performance_report_{timestamp}.md"
    
    with open(report_filename, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_filename}")
    print("\n" + "=" * 80)
    print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    
    # –í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ
    critical_count = len([r for r in results if r.performance_grade in ['D', 'F']])
    if critical_count > 0:
        print(f"‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {critical_count} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤.")
    else:
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–∏–µ–º–ª–µ–º—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!")
    
    return results


if __name__ == "__main__":
    # –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–∞–∫ pytest —Ç–µ—Å—Ç
    pytest.main([__file__, "-v"])
    
    # –î–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    # main()


# Pytest —Ç–µ—Å—Ç—ã
class TestCriticalPerformance:
    """Pytest —Ç–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤."""
    
    def setup_method(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º."""
        self.tester = CriticalComponentsTester()
    
    def test_feature_engineering_performance_acceptable(self):
        """–¢–µ—Å—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ–π."""
        result = self.tester.test_feature_engineering_performance()
        assert result.performance_grade in ['A', 'B', 'C'], f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞: {result.performance_grade}"
        assert result.avg_time_ms < 1000, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {result.avg_time_ms}ms"
    
    def test_pattern_recognition_performance_acceptable(self):
        """–¢–µ—Å—Ç: —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã–º."""
        result = self.tester.test_pattern_recognition_performance()
        assert result.performance_grade in ['A', 'B', 'C'], f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞: {result.performance_grade}"
        assert result.avg_time_ms < 500, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {result.avg_time_ms}ms"
    
    def test_cache_operations_performance_fast(self):
        """–¢–µ—Å—Ç: –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä—ã–º–∏."""
        result = self.tester.test_cache_operations_performance()
        assert result.performance_grade in ['A', 'B'], f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—ç—à–∞ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞: {result.performance_grade}"
        assert result.avg_time_ms < 20, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∫—ç—à–∞: {result.avg_time_ms}ms"
    
    def test_market_data_processing_performance_acceptable(self):
        """–¢–µ—Å—Ç: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä–æ–π."""
        result = self.tester.test_data_processing_performance()
        assert result.performance_grade in ['A', 'B', 'C'], f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–∞: {result.performance_grade}"
        assert result.avg_time_ms < 200, f"–°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö: {result.avg_time_ms}ms"
    
    def test_comprehensive_performance_report(self):
        """–¢–µ—Å—Ç: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."""
        results = self.tester.run_all_tests()
        
        assert len(results) > 0, "–¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        critical_issues = [r for r in results if r.performance_grade == 'F']
        assert len(critical_issues) == 0, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {[r.component_name for r in critical_issues]}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_performance_report(results)
        assert len(report) > 1000, "–û—Ç—á–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π"
        assert "–û–¢–ß–ï–¢ –ü–û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò" in report, "–û—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"