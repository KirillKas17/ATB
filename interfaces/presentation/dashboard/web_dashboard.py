"""
–í–µ–±-–≤–µ—Ä—Å–∏—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ WOW-—ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞ Twitch.
Flask + WebSocket + Apple-style —Ç–µ–º–Ω–∞—è —Ç–µ–º–∞ + –∞–Ω–∏–º–∞—Ü–∏–∏.
"""

from flask import Flask, render_template, jsonify
from flask_socketio import SocketIO, emit
import threading
import time
import random
import json
from datetime import datetime, timedelta
from typing import Dict, List, Any
import asyncio
import numpy as np
from decimal import Decimal

app = Flask(__name__)
app.config['SECRET_KEY'] = 'atb_trading_dashboard_secret'
socketio = SocketIO(app, cors_allowed_origins="*")

class WebTradingDashboard:
    """–í–µ–±-–≤–µ—Ä—Å–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        self.live_data = {
            'portfolio_value': 50000.0,
            'daily_pnl': 1250.0,
            'total_trades': 127,
            'win_rate': 68.5,
            'active_positions': 8,
            'ai_confidence': 87.3,
            'market_sentiment': 65.2,
            'volatility': 23.4,
            'prices': {
                'BTCUSDT': 42150.0,
                'ETHUSDT': 2580.0,
                'ADAUSDT': 0.485,
                'SOLUSDT': 98.45,
                'AVAXUSDT': 35.67,
                'DOTUSDT': 6.23,
            },
            'price_history': {},
            'orderbook': {'bids': [], 'asks': []},
            'recent_trades': [],
            'ai_signals': [],
            'market_analysis': [],
            'portfolio_allocation': {},
            'risk_metrics': {},
            'performance_stats': {},
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ü–µ–Ω
        for symbol in self.live_data['prices']:
            self.live_data['price_history'][symbol] = []
            
        self.is_running = False
        self.start_live_updates()
        
    def start_live_updates(self):
        """–ó–∞–ø—É—Å–∫ live-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        self.is_running = True
        self.update_thread = threading.Thread(target=self._live_update_loop, daemon=True)
        self.update_thread.start()
        
    def _live_update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è live-–¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            # –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            self._simulate_market_data()
            self._simulate_trading_activity()
            self._simulate_ai_analysis()
            self._simulate_portfolio_changes()
            self._simulate_risk_metrics()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ WebSocket
            socketio.emit('live_update', self.get_dashboard_data())
            
            time.sleep(0.5)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500–º—Å
            
    def _simulate_market_data(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é"""
        for symbol in self.live_data['prices']:
            current_price = self.live_data['prices'][symbol]
            
            # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
            if symbol == 'BTCUSDT':
                volatility = 0.015  # 1.5%
            elif symbol == 'ETHUSDT':
                volatility = 0.02   # 2%
            else:
                volatility = 0.03   # 3% –¥–ª—è –∞–ª—å—Ç–∫–æ–∏–Ω–æ–≤
                
            change = random.gauss(0, volatility)  # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
            new_price = current_price * (1 + change)
            
            # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–Ω
            if new_price > 0:
                self.live_data['prices'][symbol] = new_price
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Ç–æ—á–µ–∫)
                if len(self.live_data['price_history'][symbol]) >= 100:
                    self.live_data['price_history'][symbol].pop(0)
                self.live_data['price_history'][symbol].append({
                    'timestamp': datetime.now().isoformat(),
                    'price': new_price
                })
                
    def _simulate_trading_activity(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        if random.random() < 0.4:  # 40% —à–∞–Ω—Å –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
            symbol = random.choice(list(self.live_data['prices'].keys()))
            base_price = self.live_data['prices'][symbol]
            
            trade = {
                'id': random.randint(100000, 999999),
                'timestamp': datetime.now().isoformat(),
                'symbol': symbol,
                'side': random.choice(['BUY', 'SELL']),
                'price': base_price + random.uniform(-base_price*0.001, base_price*0.001),
                'quantity': random.uniform(0.001, 1.0),
                'value': 0
            }
            trade['value'] = trade['price'] * trade['quantity']
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–¥–µ–ª–æ–∫
            if len(self.live_data['recent_trades']) >= 50:
                self.live_data['recent_trades'].pop(0)
            self.live_data['recent_trades'].append(trade)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞
        self._update_orderbook()
        
    def _update_orderbook(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        symbol = 'BTCUSDT'  # –§–æ–∫—É—Å –Ω–∞ BTC
        base_price = self.live_data['prices'][symbol]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–¥–æ–≤ (–ø–æ–∫—É–ø–∫–∏)
        bids = []
        for i in range(10):
            price = base_price - (i + 1) * random.uniform(0.5, 2.0)
            quantity = random.uniform(0.1, 5.0)
            bids.append({
                'price': price,
                'quantity': quantity,
                'total': price * quantity
            })
            
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Å–∫–æ–≤ (–ø—Ä–æ–¥–∞–∂–∏)
        asks = []
        for i in range(10):
            price = base_price + (i + 1) * random.uniform(0.5, 2.0)
            quantity = random.uniform(0.1, 5.0)
            asks.append({
                'price': price,
                'quantity': quantity,
                'total': price * quantity
            })
            
        self.live_data['orderbook'] = {
            'symbol': symbol,
            'bids': bids,
            'asks': asks,
            'spread': asks[0]['price'] - bids[0]['price'] if asks and bids else 0
        }
        
    def _simulate_ai_analysis(self):
        """–°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ –∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        if random.random() < 0.15:  # 15% —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            signal_types = [
                {'type': 'BUY', 'emoji': 'üü¢', 'color': '#30D158'},
                {'type': 'SELL', 'emoji': 'üî¥', 'color': '#FF453A'},
                {'type': 'HOLD', 'emoji': 'üü°', 'color': '#FF9F0A'},
                {'type': 'ALERT', 'emoji': '‚ö†Ô∏è', 'color': '#FF9F0A'},
            ]
            
            signal_messages = [
                "Strong resistance level detected",
                "Bullish divergence in momentum",
                "Volume spike indicates breakout",
                "Support level holding strong",
                "Whale activity detected",
                "Market sentiment shifting",
                "Technical pattern completion",
                "Risk management activated",
                "Fibonacci level reached",
                "Neural network pattern match"
            ]
            
            signal_type = random.choice(signal_types)
            symbol = random.choice(list(self.live_data['prices'].keys()))
            
            signal = {
                'id': random.randint(1000, 9999),
                'timestamp': datetime.now().isoformat(),
                'type': signal_type['type'],
                'emoji': signal_type['emoji'],
                'color': signal_type['color'],
                'symbol': symbol,
                'message': random.choice(signal_messages),
                'confidence': random.uniform(60, 98),
                'price': self.live_data['prices'][symbol],
                'priority': random.choice(['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'])
            }
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
            if len(self.live_data['ai_signals']) >= 20:
                self.live_data['ai_signals'].pop(0)
            self.live_data['ai_signals'].append(signal)
            
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞
        if random.random() < 0.08:  # 8% —à–∞–Ω—Å –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            analysis_items = [
                "üìä Technical analysis: RSI approaching oversold",
                "üîç Pattern recognition: Head and shoulders forming",
                "üìà Volume analysis: Above average trading volume",
                "üåä Support/Resistance: Key level at $42,000",
                "‚ö° Momentum: Bullish crossover detected",
                "üéØ Price target: Next resistance at $44,500",
                "üõ°Ô∏è Risk assessment: Moderate volatility expected",
                "üîÆ ML prediction: 73% probability of upward move",
                "üè¶ Institutional flow: Net buying pressure",
                "üì± Social sentiment: Positive retail sentiment"
            ]
            
            analysis = {
                'timestamp': datetime.now().isoformat(),
                'message': random.choice(analysis_items),
                'category': random.choice(['TECHNICAL', 'FUNDAMENTAL', 'SENTIMENT', 'RISK']),
                'impact': random.choice(['LOW', 'MEDIUM', 'HIGH'])
            }
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–Ω–∞–ª–∏–∑–æ–≤
            if len(self.live_data['market_analysis']) >= 30:
                self.live_data['market_analysis'].pop(0)
            self.live_data['market_analysis'].append(analysis)
            
    def _simulate_portfolio_changes(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        pnl_change = random.uniform(-100, 150)
        self.live_data['daily_pnl'] += pnl_change
        self.live_data['portfolio_value'] = 50000 + self.live_data['daily_pnl']
        
        # –ò–Ω–æ–≥–¥–∞ –º–µ–Ω—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
        if random.random() < 0.1:
            self.live_data['active_positions'] = max(1, 
                self.live_data['active_positions'] + random.choice([-1, 0, 1]))
                
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ª–ª–æ–∫–∞—Ü–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        symbols = list(self.live_data['prices'].keys())
        total_value = self.live_data['portfolio_value']
        
        allocation = {}
        remaining = 100.0
        
        for i, symbol in enumerate(symbols[:-1]):
            if remaining > 0:
                percent = random.uniform(5, min(30, remaining))
                allocation[symbol] = {
                    'percentage': percent,
                    'value': total_value * (percent / 100),
                    'change_24h': random.uniform(-5, 8)
                }
                remaining -= percent
                
        # –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–∏–º–≤–æ–ª –ø–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫
        if symbols:
            last_symbol = symbols[-1]
            allocation[last_symbol] = {
                'percentage': remaining,
                'value': total_value * (remaining / 100),
                'change_24h': random.uniform(-5, 8)
            }
            
        self.live_data['portfolio_allocation'] = allocation
        
    def _simulate_risk_metrics(self):
        """–°–∏–º—É–ª—è—Ü–∏—è –º–µ—Ç—Ä–∏–∫ —Ä–∏—Å–∫–∞"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –º–µ—Ç—Ä–∏–∫
        self.live_data['ai_confidence'] = max(0, min(100,
            self.live_data['ai_confidence'] + random.uniform(-3, 3)))
        self.live_data['market_sentiment'] = max(0, min(100,
            self.live_data['market_sentiment'] + random.uniform(-4, 4)))
        self.live_data['volatility'] = max(0, min(100,
            self.live_data['volatility'] + random.uniform(-2, 2)))
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ä–∏—Å–∫–∞
        self.live_data['risk_metrics'] = {
            'var_1d': random.uniform(2, 8),  # Value at Risk 1 –¥–µ–Ω—å
            'sharpe_ratio': random.uniform(0.5, 2.5),
            'max_drawdown': random.uniform(5, 15),
            'correlation_btc': random.uniform(0.3, 0.9),
            'leverage_ratio': random.uniform(1.1, 3.0),
            'liquidity_score': random.uniform(70, 95)
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.live_data['performance_stats'] = {
            'total_trades': self.live_data['total_trades'] + random.choice([0, 0, 0, 1]),
            'win_rate': max(40, min(80, self.live_data['win_rate'] + random.uniform(-1, 1))),
            'avg_win': random.uniform(150, 400),
            'avg_loss': random.uniform(-80, -200),
            'largest_win': random.uniform(800, 2000),
            'largest_loss': random.uniform(-300, -800),
            'profit_factor': random.uniform(1.2, 2.8)
        }
        
    def get_dashboard_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
        return {
            'timestamp': datetime.now().isoformat(),
            'portfolio': {
                'value': self.live_data['portfolio_value'],
                'daily_pnl': self.live_data['daily_pnl'],
                'allocation': self.live_data['portfolio_allocation']
            },
            'prices': self.live_data['prices'],
            'price_history': self.live_data['price_history'],
            'orderbook': self.live_data['orderbook'],
            'recent_trades': self.live_data['recent_trades'][-10:],
            'ai_signals': self.live_data['ai_signals'][-8:],
            'market_analysis': self.live_data['market_analysis'][-10:],
            'ai_metrics': {
                'confidence': self.live_data['ai_confidence'],
                'sentiment': self.live_data['market_sentiment'],
                'volatility': self.live_data['volatility']
            },
            'risk_metrics': self.live_data['risk_metrics'],
            'performance': self.live_data['performance_stats'],
            'trading': {
                'active_positions': self.live_data['active_positions'],
                'total_trades': self.live_data['total_trades'],
                'win_rate': self.live_data['win_rate']
            }
        }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∞—à–±–æ—Ä–¥–∞
dashboard = WebTradingDashboard()

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
    return render_template('dashboard.html')

@app.route('/api/dashboard-data')
def get_dashboard_data():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
    return jsonify(dashboard.get_dashboard_data())

@socketio.on('connect')
def handle_connect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client connected')
    emit('initial_data', dashboard.get_dashboard_data())

@socketio.on('disconnect')
def handle_disconnect():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    print('Client disconnected')

if __name__ == '__main__':
    print("üöÄ Starting ATB Web Trading Dashboard...")
    print("üí´ Apple-style Dark Theme")
    print("üì∫ Twitch Demo Mode")
    print("üåê Web Interface Ready")
    print("üî¥ Live Data Streaming via WebSocket")
    print("\nüåç Dashboard URL: http://localhost:5000")
    
    socketio.run(app, debug=False, host='0.0.0.0', port=5000)