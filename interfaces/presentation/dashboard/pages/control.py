import json
from pathlib import Path
from typing import Any, Dict, List

import pandas as pd
import streamlit as st
import yaml

st.set_page_config(page_title="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", page_icon="üéÆ", layout="wide")


class BotControl:
    def __init__(self) -> None:
        self.config_dir = Path("config")
        self.data_dir = Path("data")

    def load_config(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_file = self.config_dir / "config.yaml"
            if config_file.exists():
                with open(config_file, "r") as f:
                    config_data = yaml.safe_load(f)
                    return config_data if isinstance(config_data, dict) else {}
            return {}
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}

    def save_config(self, config: Dict[Any, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            config_file = self.config_dir / "config.yaml"
            with open(config_file, "w") as f:
                yaml.dump(config, f)
            st.success("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

    def load_tasks(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á"""
        try:
            tasks_file = self.data_dir / "tasks.json"
            if tasks_file.exists():
                with open(tasks_file, "r") as f:
                    tasks_data = json.load(f)
                    return tasks_data if isinstance(tasks_data, list) else []
            return []
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")
            return []


def main() -> None:
    control = BotControl()

    st.title("üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    config = control.load_config()
    tasks = control.load_tasks()

    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    st.markdown("### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

    col1, col2 = st.columns(2)

    with col1:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
        st.markdown("#### –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏")
        config["trading"] = {
            "max_positions": st.number_input(
                "–ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π",
                min_value=1,
                max_value=100,
                value=config.get("trading", {}).get("max_positions", 5),
            ),
            "position_size": st.number_input(
                "–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%)",
                min_value=0.1,
                max_value=100.0,
                value=config.get("trading", {}).get("position_size", 2.0),
            ),
            "stop_loss": st.number_input(
                "Stop Loss (%)",
                min_value=0.1,
                max_value=100.0,
                value=config.get("trading", {}).get("stop_loss", 2.0),
            ),
            "take_profit": st.number_input(
                "Take Profit (%)",
                min_value=0.1,
                max_value=100.0,
                value=config.get("trading", {}).get("take_profit", 4.0),
            ),
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤
        st.markdown("#### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏")
        config["risk"] = {
            "max_daily_loss": st.number_input(
                "–ú–∞–∫—Å. –¥–Ω–µ–≤–Ω–æ–π —É–±—ã—Ç–æ–∫ (%)",
                min_value=0.1,
                max_value=100.0,
                value=config.get("risk", {}).get("max_daily_loss", 5.0),
            ),
            "max_drawdown": st.number_input(
                "–ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞ (%)",
                min_value=0.1,
                max_value=100.0,
                value=config.get("risk", {}).get("max_drawdown", 20.0),
            ),
            "risk_reward": st.number_input(
                "Risk/Reward",
                min_value=0.1,
                max_value=10.0,
                value=config.get("risk", {}).get("risk_reward", 2.0),
            ),
        }

    with col2:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        st.markdown("#### –°—Ç—Ä–∞—Ç–µ–≥–∏–∏")
        strategies = config.get("strategies", {})

        for strategy in ["trend", "mean_reversion", "breakout"]:
            st.markdown(f"##### {strategy.title()}")
            strategies[strategy] = {
                "enabled": st.checkbox(
                    f"–í–∫–ª—é—á–∏—Ç—å {strategy}",
                    value=strategies.get(strategy, {}).get("enabled", False),
                ),
                "weight": st.slider(
                    f"–í–µ—Å {strategy}",
                    min_value=0.0,
                    max_value=1.0,
                    value=strategies.get(strategy, {}).get("weight", 0.33),
                ),
            }

        config["strategies"] = strategies

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        st.markdown("#### –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        config["notifications"] = {
            "telegram": st.checkbox(
                "Telegram", value=config.get("notifications", {}).get("telegram", False)
            ),
            "email": st.checkbox(
                "Email", value=config.get("notifications", {}).get("email", False)
            ),
            "desktop": st.checkbox(
                "Desktop", value=config.get("notifications", {}).get("desktop", True)
            ),
        }

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if st.button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        control.save_config(config)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏
    st.markdown("### –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")

    if tasks:
        tasks_df = pd.DataFrame(tasks)
        st.dataframe(tasks_df, use_container_width=True)

        # –î–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–¥–∞—á–∞–º–∏
        col1, col2, col3 = st.columns(3)

        with col1:
            if st.button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ"):
                st.info("–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á...")

        with col2:
            if st.button("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ"):
                st.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á...")

        with col3:
            if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"):
                st.info("–°–±—Ä–æ—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á...")
    else:
        st.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á")

    # –õ–æ–≥–∏
    st.markdown("### –õ–æ–≥–∏")

    log_file = Path("logs/bot.log")
    if log_file.exists():
        with open(log_file, "r") as f:
            logs = f.readlines()[-100:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫

        st.text_area("–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏", value="".join(logs), height=200)
    else:
        st.info("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")


if __name__ == "__main__":
    main()
