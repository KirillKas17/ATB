"""
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π –¥–ª—è Windows
–í–∫–ª—é—á–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π, –∞–Ω–∞–ª–∏—Ç–∏–∫—É, –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –∏ –æ–±—É—á–µ–Ω–∏–µ
"""

import sys
import asyncio
import json
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Dict, List, Optional, Any
from dataclasses import dataclass
from pathlib import Path

import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import tkinter.font as tkFont
from matplotlib.figure import Figure
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.animation import FuncAnimation
import numpy as np
import pandas as pd

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
from domain.entities.trading import Trade
from domain.entities.strategy import Strategy
from domain.value_objects.money import Money
from domain.value_objects.currency import Currency
from domain.types import Symbol, TradingPair
from application.services.trading_service import TradingService
from infrastructure.external_services.exchanges.base_exchange_service import BaseExchangeService

@dataclass
class DashboardState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞"""
    selected_pairs: List[str]
    active_strategies: List[str]
    trading_mode: str  # 'live', 'simulation', 'backtest'
    total_balance: Decimal
    current_pnl: Decimal
    daily_pnl: Decimal
    active_positions: int
    is_trading_active: bool
    last_update: datetime

class ModernTradingDashboard:
    """–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.setup_window()
        self.setup_styles()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
        self.state = DashboardState(
            selected_pairs=[],
            active_strategies=[],
            trading_mode='simulation',
            total_balance=Decimal('10000'),
            current_pnl=Decimal('0'),
            daily_pnl=Decimal('0'),
            active_positions=0,
            is_trading_active=False,
            last_update=datetime.now()
        )
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.price_data = {}
        self.pnl_history = []
        self.equity_curve = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.create_main_layout()
        self.create_toolbar()
        self.create_side_panels()
        self.create_main_content()
        self.create_status_bar()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.start_data_updates()
    
    def setup_window(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.root.title("ATB Trading Dashboard v2.0")
        self.root.geometry("1600x1000")
        self.root.minsize(1200, 800)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        self.root.configure(bg='#1e1e1e')
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (1600 // 2)
        y = (self.root.winfo_screenheight() // 2) - (1000 // 2)
        self.root.geometry(f"1600x1000+{x}+{y}")
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π"""
        self.style = ttk.Style()
        
        # –¢–µ–º–Ω–∞—è —Ç–µ–º–∞
        self.colors = {
            'bg_primary': '#1e1e1e',
            'bg_secondary': '#2d2d2d', 
            'bg_tertiary': '#3e3e3e',
            'text_primary': '#ffffff',
            'text_secondary': '#b0b0b0',
            'accent_green': '#00ff88',
            'accent_red': '#ff4757',
            'accent_blue': '#3742fa',
            'accent_orange': '#ffa726',
            'border': '#404040'
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π ttk
        self.style.theme_use('clam')
        self.style.configure('Dark.TFrame', background=self.colors['bg_secondary'])
        self.style.configure('Dark.TLabel', background=self.colors['bg_secondary'], 
                           foreground=self.colors['text_primary'])
        self.style.configure('Dark.TButton', background=self.colors['bg_tertiary'],
                           foreground=self.colors['text_primary'])
        
        # –®—Ä–∏—Ñ—Ç—ã
        self.fonts = {
            'title': tkFont.Font(family='Segoe UI', size=16, weight='bold'),
            'subtitle': tkFont.Font(family='Segoe UI', size=12, weight='bold'),
            'body': tkFont.Font(family='Segoe UI', size=10),
            'small': tkFont.Font(family='Segoe UI', size=8),
            'mono': tkFont.Font(family='Consolas', size=10)
        }
    
    def create_main_layout(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.main_container = tk.Frame(self.root, bg=self.colors['bg_primary'])
        self.main_container.pack(fill='both', expand=True)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (—Å–≤–µ—Ä—Ö—É)
        self.toolbar_frame = tk.Frame(self.main_container, 
                                    bg=self.colors['bg_secondary'], height=60)
        self.toolbar_frame.pack(fill='x', pady=(0, 2))
        self.toolbar_frame.pack_propagate(False)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
        self.content_frame = tk.Frame(self.main_container, bg=self.colors['bg_primary'])
        self.content_frame.pack(fill='both', expand=True, padx=5, pady=2)
        
        # –ë–æ–∫–æ–≤—ã–µ –ø–∞–Ω–µ–ª–∏
        self.left_panel = tk.Frame(self.content_frame, bg=self.colors['bg_secondary'], width=300)
        self.left_panel.pack(side='left', fill='y', padx=(0, 5))
        self.left_panel.pack_propagate(False)
        
        self.right_panel = tk.Frame(self.content_frame, bg=self.colors['bg_secondary'], width=300)
        self.right_panel.pack(side='right', fill='y', padx=(5, 0))
        self.right_panel.pack_propagate(False)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.center_panel = tk.Frame(self.content_frame, bg=self.colors['bg_primary'])
        self.center_panel.pack(side='left', fill='both', expand=True, padx=5)
        
        # –°—Ç–∞—Ç—É—Å-–±–∞—Ä (—Å–Ω–∏–∑—É)
        self.status_frame = tk.Frame(self.main_container, 
                                   bg=self.colors['bg_secondary'], height=30)
        self.status_frame.pack(fill='x', pady=(2, 0))
        self.status_frame.pack_propagate(False)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo_frame = tk.Frame(self.toolbar_frame, bg=self.colors['bg_secondary'])
        logo_frame.pack(side='left', padx=10, pady=5)
        
        tk.Label(logo_frame, text="‚ö° ATB Trading", 
               font=self.fonts['title'], 
               fg=self.colors['accent_blue'],
               bg=self.colors['bg_secondary']).pack(side='left')
        
        # –†–µ–∂–∏–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
        mode_frame = tk.Frame(self.toolbar_frame, bg=self.colors['bg_secondary'])
        mode_frame.pack(side='left', padx=20, pady=5)
        
        tk.Label(mode_frame, text="–†–µ–∂–∏–º:", 
               font=self.fonts['body'],
               fg=self.colors['text_secondary'],
               bg=self.colors['bg_secondary']).pack(side='left')
        
        self.trading_mode_var = tk.StringVar(value=self.state.trading_mode)
        mode_combo = ttk.Combobox(mode_frame, textvariable=self.trading_mode_var,
                                values=['simulation', 'live', 'backtest'],
                                state='readonly', width=12)
        mode_combo.pack(side='left', padx=(5, 0))
        mode_combo.bind('<<ComboboxSelected>>', self.on_mode_change)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_frame = tk.Frame(self.toolbar_frame, bg=self.colors['bg_secondary'])
        control_frame.pack(side='left', padx=20, pady=5)
        
        self.start_btn = tk.Button(control_frame, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å",
                                 bg=self.colors['accent_green'], fg='white',
                                 font=self.fonts['body'], relief='flat',
                                 command=self.start_trading)
        self.start_btn.pack(side='left', padx=(0, 5))
        
        self.stop_btn = tk.Button(control_frame, text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
                                bg=self.colors['accent_red'], fg='white',
                                font=self.fonts['body'], relief='flat',
                                command=self.stop_trading, state='disabled')
        self.stop_btn.pack(side='left', padx=(0, 5))
        
        self.reset_btn = tk.Button(control_frame, text="üîÑ –°–±—Ä–æ—Å",
                                 bg=self.colors['bg_tertiary'], fg=self.colors['text_primary'],
                                 font=self.fonts['body'], relief='flat',
                                 command=self.reset_trading)
        self.reset_btn.pack(side='left')
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ toolbar
        stats_frame = tk.Frame(self.toolbar_frame, bg=self.colors['bg_secondary'])
        stats_frame.pack(side='right', padx=10, pady=5)
        
        self.balance_label = tk.Label(stats_frame, text="–ë–∞–ª–∞–Ω—Å: $10,000.00",
                                    font=self.fonts['subtitle'],
                                    fg=self.colors['text_primary'],
                                    bg=self.colors['bg_secondary'])
        self.balance_label.pack(side='right', padx=(0, 20))
        
        self.pnl_label = tk.Label(stats_frame, text="P&L: $0.00",
                                font=self.fonts['subtitle'],
                                fg=self.colors['accent_green'],
                                bg=self.colors['bg_secondary'])
        self.pnl_label.pack(side='right', padx=(0, 20))
    
    def create_side_panels(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤—ã—Ö –ø–∞–Ω–µ–ª–µ–π"""
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.create_trading_pairs_panel()
        self.create_strategies_panel()
        self.create_risk_panel()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–æ–∑–∏—Ü–∏–∏ –∏ –æ—Ä–¥–µ—Ä–∞
        self.create_positions_panel()
        self.create_orders_panel()
        self.create_performance_panel()
    
    def create_trading_pairs_panel(self):
        """–ü–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        frame = tk.LabelFrame(self.left_panel, text="–¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='x', padx=5, pady=5)
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ä
        search_frame = tk.Frame(frame, bg=self.colors['bg_secondary'])
        search_frame.pack(fill='x', padx=5, pady=5)
        
        self.pair_search_var = tk.StringVar()
        search_entry = tk.Entry(search_frame, textvariable=self.pair_search_var,
                              bg=self.colors['bg_tertiary'], fg=self.colors['text_primary'],
                              insertbackground=self.colors['text_primary'])
        search_entry.pack(fill='x')
        search_entry.bind('<KeyRelease>', self.filter_pairs)
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        list_frame = tk.Frame(frame, bg=self.colors['bg_secondary'])
        list_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side='right', fill='y')
        
        self.pairs_listbox = tk.Listbox(list_frame, 
                                      bg=self.colors['bg_tertiary'],
                                      fg=self.colors['text_primary'],
                                      selectbackground=self.colors['accent_blue'],
                                      yscrollcommand=scrollbar.set,
                                      selectmode='multiple')
        self.pairs_listbox.pack(side='left', fill='both', expand=True)
        scrollbar.config(command=self.pairs_listbox.yview)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞—Ä—ã
        popular_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 
                        'SOL/USDT', 'DOT/USDT', 'MATIC/USDT', 'LINK/USDT']
        
        for pair in popular_pairs:
            self.pairs_listbox.insert('end', pair)
        
        self.pairs_listbox.bind('<<ListboxSelect>>', self.on_pair_select)
    
    def create_strategies_panel(self):
        """–ü–∞–Ω–µ–ª—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        frame = tk.LabelFrame(self.left_panel, text="–°—Ç—Ä–∞—Ç–µ–≥–∏–∏",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='x', padx=5, pady=5)
        
        # –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        strategies = [
            'RSI Bounce', 'MACD Cross', 'Bollinger Squeeze',
            'Mean Reversion', 'Momentum', 'Grid Trading'
        ]
        
        self.strategy_vars = {}
        for strategy in strategies:
            var = tk.BooleanVar()
            self.strategy_vars[strategy] = var
            
            cb = tk.Checkbutton(frame, text=strategy, variable=var,
                              bg=self.colors['bg_secondary'],
                              fg=self.colors['text_primary'],
                              selectcolor=self.colors['bg_tertiary'],
                              command=self.update_active_strategies)
            cb.pack(anchor='w', padx=5, pady=2)
    
    def create_risk_panel(self):
        """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        frame = tk.LabelFrame(self.left_panel, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='x', padx=5, pady=5)
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        tk.Label(frame, text="–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (%)", 
               bg=self.colors['bg_secondary'],
               fg=self.colors['text_secondary']).pack(anchor='w', padx=5)
        
        self.position_size_var = tk.DoubleVar(value=2.0)
        position_scale = tk.Scale(frame, from_=0.1, to=10.0, resolution=0.1,
                                orient='horizontal', variable=self.position_size_var,
                                bg=self.colors['bg_secondary'],
                                fg=self.colors['text_primary'],
                                troughcolor=self.colors['accent_blue'])
        position_scale.pack(fill='x', padx=5, pady=2)
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        tk.Label(frame, text="–°—Ç–æ–ø-–ª–æ—Å—Å (%)", 
               bg=self.colors['bg_secondary'],
               fg=self.colors['text_secondary']).pack(anchor='w', padx=5)
        
        self.stop_loss_var = tk.DoubleVar(value=2.0)
        stop_scale = tk.Scale(frame, from_=0.5, to=10.0, resolution=0.1,
                            orient='horizontal', variable=self.stop_loss_var,
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            troughcolor=self.colors['accent_red'])
        stop_scale.pack(fill='x', padx=5, pady=2)
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        tk.Label(frame, text="–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%)", 
               bg=self.colors['bg_secondary'],
               fg=self.colors['text_secondary']).pack(anchor='w', padx=5)
        
        self.take_profit_var = tk.DoubleVar(value=4.0)
        tp_scale = tk.Scale(frame, from_=1.0, to=20.0, resolution=0.1,
                          orient='horizontal', variable=self.take_profit_var,
                          bg=self.colors['bg_secondary'],
                          fg=self.colors['text_primary'],
                          troughcolor=self.colors['accent_green'])
        tp_scale.pack(fill='x', padx=5, pady=2)
    
    def create_positions_panel(self):
        """–ü–∞–Ω–µ–ª—å —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        frame = tk.LabelFrame(self.right_panel, text="–û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        columns = ('Symbol', 'Side', 'Size', 'Entry', 'Current', 'P&L')
        self.positions_tree = ttk.Treeview(frame, columns=columns, show='headings', height=8)
        
        for col in columns:
            self.positions_tree.heading(col, text=col)
            self.positions_tree.column(col, width=70)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        pos_scrollbar = ttk.Scrollbar(frame, orient='vertical', command=self.positions_tree.yview)
        self.positions_tree.configure(yscrollcommand=pos_scrollbar.set)
        
        self.positions_tree.pack(side='left', fill='both', expand=True, padx=5, pady=5)
        pos_scrollbar.pack(side='right', fill='y')
    
    def create_orders_panel(self):
        """–ü–∞–Ω–µ–ª—å –æ—Ä–¥–µ—Ä–æ–≤"""
        frame = tk.LabelFrame(self.right_panel, text="–ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='x', padx=5, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ä–¥–µ—Ä–æ–≤
        columns = ('Symbol', 'Type', 'Side', 'Amount', 'Price', 'Status')
        self.orders_tree = ttk.Treeview(frame, columns=columns, show='headings', height=6)
        
        for col in columns:
            self.orders_tree.heading(col, text=col)
            self.orders_tree.column(col, width=60)
        
        self.orders_tree.pack(fill='x', padx=5, pady=5)
    
    def create_performance_panel(self):
        """–ü–∞–Ω–µ–ª—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        frame = tk.LabelFrame(self.right_panel, text="–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
                            bg=self.colors['bg_secondary'],
                            fg=self.colors['text_primary'],
                            font=self.fonts['subtitle'])
        frame.pack(fill='x', padx=5, pady=5)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics_frame = tk.Frame(frame, bg=self.colors['bg_secondary'])
        metrics_frame.pack(fill='x', padx=5, pady=5)
        
        # –°–µ—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ 2x2
        tk.Label(metrics_frame, text="–û–±—â–∏–π P&L:", 
               bg=self.colors['bg_secondary'], fg=self.colors['text_secondary']).grid(row=0, column=0, sticky='w')
        self.total_pnl_label = tk.Label(metrics_frame, text="$0.00",
                                      bg=self.colors['bg_secondary'], fg=self.colors['accent_green'])
        self.total_pnl_label.grid(row=0, column=1, sticky='e')
        
        tk.Label(metrics_frame, text="–î–Ω–µ–≤–Ω–æ–π P&L:", 
               bg=self.colors['bg_secondary'], fg=self.colors['text_secondary']).grid(row=1, column=0, sticky='w')
        self.daily_pnl_label = tk.Label(metrics_frame, text="$0.00",
                                      bg=self.colors['bg_secondary'], fg=self.colors['accent_green'])
        self.daily_pnl_label.grid(row=1, column=1, sticky='e')
        
        tk.Label(metrics_frame, text="Win Rate:", 
               bg=self.colors['bg_secondary'], fg=self.colors['text_secondary']).grid(row=2, column=0, sticky='w')
        self.win_rate_label = tk.Label(metrics_frame, text="0%",
                                     bg=self.colors['bg_secondary'], fg=self.colors['text_primary'])
        self.win_rate_label.grid(row=2, column=1, sticky='e')
        
        tk.Label(metrics_frame, text="Sharpe Ratio:", 
               bg=self.colors['bg_secondary'], fg=self.colors['text_secondary']).grid(row=3, column=0, sticky='w')
        self.sharpe_label = tk.Label(metrics_frame, text="0.00",
                                   bg=self.colors['bg_secondary'], fg=self.colors['text_primary'])
        self.sharpe_label.grid(row=3, column=1, sticky='e')
        
        metrics_frame.columnconfigure(1, weight=1)
    
    def create_main_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏"""
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.charts_notebook = ttk.Notebook(self.center_panel)
        self.charts_notebook.pack(fill='both', expand=True)
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã
        self.create_price_chart_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ P&L –≥—Ä–∞—Ñ–∏–∫–∞
        self.create_pnl_chart_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        self.create_backtest_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.create_analytics_tab()
    
    def create_price_chart_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω"""
        price_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(price_frame, text="üìà –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω")
        
        # Matplotlib –≥—Ä–∞—Ñ–∏–∫
        self.price_figure = Figure(figsize=(12, 8), facecolor='#1e1e1e')
        self.price_ax = self.price_figure.add_subplot(111, facecolor='#2d2d2d')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        self.price_ax.tick_params(colors='white')
        self.price_ax.spines['bottom'].set_color('white')
        self.price_ax.spines['top'].set_color('white')
        self.price_ax.spines['right'].set_color('white')
        self.price_ax.spines['left'].set_color('white')
        
        self.price_canvas = FigureCanvasTkAgg(self.price_figure, price_frame)
        self.price_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_price_chart()
    
    def create_pnl_chart_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ P&L –≥—Ä–∞—Ñ–∏–∫–∞"""
        pnl_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(pnl_frame, text="üí∞ P&L –ì—Ä–∞—Ñ–∏–∫")
        
        self.pnl_figure = Figure(figsize=(12, 8), facecolor='#1e1e1e')
        self.pnl_ax = self.pnl_figure.add_subplot(111, facecolor='#2d2d2d')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.pnl_ax.tick_params(colors='white')
        self.pnl_ax.spines['bottom'].set_color('white')
        self.pnl_ax.spines['top'].set_color('white')
        self.pnl_ax.spines['right'].set_color('white')
        self.pnl_ax.spines['left'].set_color('white')
        
        self.pnl_canvas = FigureCanvasTkAgg(self.pnl_figure, pnl_frame)
        self.pnl_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        self.update_pnl_chart()
    
    def create_backtest_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        backtest_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(backtest_frame, text="üìä –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥")
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–æ–º
        control_frame = tk.Frame(backtest_frame, bg=self.colors['bg_secondary'], height=60)
        control_frame.pack(fill='x', padx=5, pady=5)
        control_frame.pack_propagate(False)
        
        # –ü–µ—Ä–∏–æ–¥ –±—ç–∫—Ç–µ—Å—Ç–∞
        tk.Label(control_frame, text="–ü–µ—Ä–∏–æ–¥:", 
               bg=self.colors['bg_secondary'], fg=self.colors['text_primary']).pack(side='left', padx=5)
        
        self.backtest_period = ttk.Combobox(control_frame, values=['1M', '3M', '6M', '1Y', '2Y'],
                                          state='readonly', width=10)
        self.backtest_period.set('3M')
        self.backtest_period.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        tk.Button(control_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±—ç–∫—Ç–µ—Å—Ç",
                bg=self.colors['accent_blue'], fg='white',
                relief='flat', command=self.run_backtest).pack(side='left', padx=10)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
        results_frame = tk.Frame(backtest_frame, bg=self.colors['bg_primary'])
        results_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.backtest_figure = Figure(figsize=(12, 6), facecolor='#1e1e1e')
        self.backtest_ax = self.backtest_figure.add_subplot(111, facecolor='#2d2d2d')
        
        self.backtest_canvas = FigureCanvasTkAgg(self.backtest_figure, results_frame)
        self.backtest_canvas.get_tk_widget().pack(fill='both', expand=True)
    
    def create_analytics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_frame = ttk.Frame(self.charts_notebook)
        self.charts_notebook.add(analytics_frame, text="üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ–∫—Ü–∏–∏
        top_frame = tk.Frame(analytics_frame, bg=self.colors['bg_primary'])
        top_frame.pack(fill='x', padx=5, pady=5)
        
        bottom_frame = tk.Frame(analytics_frame, bg=self.colors['bg_primary'])
        bottom_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics_panel = tk.LabelFrame(top_frame, text="–ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏",
                                    bg=self.colors['bg_secondary'],
                                    fg=self.colors['text_primary'])
        metrics_panel.pack(fill='x', padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫
        self.create_analytics_metrics(metrics_panel)
        
        # –ì—Ä–∞—Ñ–∏–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        charts_panel = tk.Frame(bottom_frame, bg=self.colors['bg_primary'])
        charts_panel.pack(fill='both', expand=True)
        
        self.analytics_figure = Figure(figsize=(12, 6), facecolor='#1e1e1e')
        self.analytics_canvas = FigureCanvasTkAgg(self.analytics_figure, charts_panel)
        self.analytics_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        self.update_analytics_charts()
    
    def create_analytics_metrics(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        # –°–µ—Ç–∫–∞ 4x4 –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metrics = [
            ("–û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å", "0.00%", self.colors['text_primary']),
            ("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞", "0.00%", self.colors['accent_red']),
            ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞", "0.00", self.colors['text_primary']),
            ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –°–æ—Ä—Ç–∏–Ω–æ", "0.00", self.colors['text_primary']),
            ("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", "0", self.colors['text_primary']),
            ("–í–∏–Ω—Ä–µ–π—Ç", "0.00%", self.colors['accent_green']),
            ("–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å", "$0.00", self.colors['accent_green']),
            ("–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫", "$0.00", self.colors['accent_red']),
            ("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏", "0.00", self.colors['text_primary']),
            ("–§–∞–∫—Ç–æ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", "0.00", self.colors['text_primary']),
            ("VaR (95%)", "$0.00", self.colors['accent_orange']),
            ("–ö–∞–ª–º–∞—Ä-–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç", "0.00", self.colors['text_primary'])
        ]
        
        for i, (label, value, color) in enumerate(metrics):
            row = i // 4
            col = (i % 4) * 2
            
            tk.Label(parent, text=f"{label}:",
                   bg=self.colors['bg_secondary'],
                   fg=self.colors['text_secondary'],
                   font=self.fonts['small']).grid(row=row, column=col, sticky='w', padx=5, pady=2)
            
            tk.Label(parent, text=value,
                   bg=self.colors['bg_secondary'],
                   fg=color,
                   font=self.fonts['body']).grid(row=row, column=col+1, sticky='e', padx=5, pady=2)
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞"""
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = tk.Label(self.status_frame, text="‚ö´ –û—Ç–∫–ª—é—á–µ–Ω–æ",
                                        bg=self.colors['bg_secondary'],
                                        fg=self.colors['accent_red'],
                                        font=self.fonts['small'])
        self.connection_status.pack(side='left', padx=5)
        
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        self.last_update_label = tk.Label(self.status_frame, 
                                        text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}",
                                        bg=self.colors['bg_secondary'],
                                        fg=self.colors['text_secondary'],
                                        font=self.fonts['small'])
        self.last_update_label.pack(side='right', padx=5)
        
        # –í–µ—Ä—Å–∏—è
        tk.Label(self.status_frame, text="v2.0",
               bg=self.colors['bg_secondary'],
               fg=self.colors['text_secondary'],
               font=self.fonts['small']).pack(side='right', padx=10)
    
    # –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
    def on_mode_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        mode = self.trading_mode_var.get()
        self.state.trading_mode = mode
        
        if mode == 'backtest':
            self.charts_notebook.select(2)  # –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        
        messagebox.showinfo("–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω", f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º: {mode}")
    
    def on_pair_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        selection = self.pairs_listbox.curselection()
        self.state.selected_pairs = [self.pairs_listbox.get(i) for i in selection]
        
        if self.state.selected_pairs:
            # –û–±–Ω–æ–≤–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞—Ä—ã
            self.update_price_chart(self.state.selected_pairs[0])
    
    def filter_pairs(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        search_term = self.pair_search_var.get().upper()
        
        # –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
        self.pairs_listbox.delete(0, 'end')
        
        # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–∏
        all_pairs = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 
                    'SOL/USDT', 'DOT/USDT', 'MATIC/USDT', 'LINK/USDT',
                    'AVAX/USDT', 'UNI/USDT', 'ATOM/USDT', 'FTM/USDT']
        
        for pair in all_pairs:
            if search_term in pair:
                self.pairs_listbox.insert('end', pair)
    
    def update_active_strategies(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        active = []
        for strategy, var in self.strategy_vars.items():
            if var.get():
                active.append(strategy)
        
        self.state.active_strategies = active
        print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: {active}")
    
    def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.state.selected_pairs:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
            return
        
        if not self.state.active_strategies:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return
        
        self.state.is_trading_active = True
        self.start_btn.config(state='disabled')
        self.stop_btn.config(state='normal')
        self.connection_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", fg=self.colors['accent_green'])
        
        messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞", 
                          f"–†–µ–∂–∏–º: {self.state.trading_mode}\n"
                          f"–ü–∞—Ä—ã: {', '.join(self.state.selected_pairs)}\n"
                          f"–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {', '.join(self.state.active_strategies)}")
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        self.state.is_trading_active = False
        self.start_btn.config(state='normal')
        self.stop_btn.config(state='disabled')
        self.connection_status.config(text="‚ö´ –û—Ç–∫–ª—é—á–µ–Ω–æ", fg=self.colors['accent_red'])
        
        messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
    
    def reset_trading(self):
        """–°–±—Ä–æ—Å —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.state.is_trading_active:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤–ª—é")
            return
        
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state.current_pnl = Decimal('0')
        self.state.daily_pnl = Decimal('0')
        self.state.active_positions = 0
        
        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.pnl_history.clear()
        self.equity_curve.clear()
        
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü
        for item in self.positions_tree.get_children():
            self.positions_tree.delete(item)
        
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.update_displays()
        
        messagebox.showinfo("–°–±—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω", "–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")
    
    def run_backtest(self):
        """–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        if not self.state.selected_pairs:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
            return
        
        period = self.backtest_period.get()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞
        messagebox.showinfo("–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–ø—É—â–µ–Ω", f"–ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ –Ω–∞ –ø–µ—Ä–∏–æ–¥ {period}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.generate_backtest_results()
    
    def generate_backtest_results(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞"""
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        dates = pd.date_range(start='2023-01-01', end='2024-01-01', freq='D')
        np.random.seed(42)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏–≤–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        returns = np.random.normal(0.001, 0.02, len(dates))
        equity_curve = (1 + pd.Series(returns).cumsum())
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        self.backtest_ax.clear()
        self.backtest_ax.plot(dates, equity_curve, color=self.colors['accent_green'], linewidth=2)
        self.backtest_ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞', color='white', fontsize=14)
        self.backtest_ax.set_ylabel('–ö—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', color='white')
        self.backtest_ax.tick_params(colors='white')
        self.backtest_ax.grid(True, alpha=0.3)
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        self.backtest_ax.spines['bottom'].set_color('white')
        self.backtest_ax.spines['top'].set_color('white')
        self.backtest_ax.spines['right'].set_color('white')
        self.backtest_ax.spines['left'].set_color('white')
        
        self.backtest_canvas.draw()
    
    def update_price_chart(self, symbol='BTC/USDT'):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        dates = pd.date_range(start=datetime.now() - timedelta(days=30), 
                            end=datetime.now(), freq='H')
        
        # –°–∏–º—É–ª—è—Ü–∏—è —Ü–µ–Ω—ã
        np.random.seed(42)
        base_price = 45000 if symbol == 'BTC/USDT' else 3000
        price_changes = np.random.normal(0, base_price * 0.01, len(dates))
        prices = base_price + np.cumsum(price_changes)
        
        # –û—á–∏—Å—Ç–∫–∞ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ
        self.price_ax.clear()
        self.price_ax.plot(dates, prices, color=self.colors['accent_blue'], linewidth=1.5)
        self.price_ax.set_title(f'–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã {symbol}', color='white', fontsize=14)
        self.price_ax.set_ylabel('–¶–µ–Ω–∞ (USDT)', color='white')
        self.price_ax.tick_params(colors='white')
        self.price_ax.grid(True, alpha=0.3)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
        self.price_ax.xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
        self.price_ax.xaxis.set_major_locator(mdates.DayLocator(interval=5))
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        for spine in self.price_ax.spines.values():
            spine.set_color('white')
        
        self.price_canvas.draw()
    
    def update_pnl_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ P&L –≥—Ä–∞—Ñ–∏–∫–∞"""
        if not self.pnl_history:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            dates = pd.date_range(start=datetime.now() - timedelta(days=7), 
                                end=datetime.now(), freq='15min')
            
            np.random.seed(123)
            pnl_changes = np.random.normal(0, 50, len(dates))
            pnl_curve = np.cumsum(pnl_changes)
            
            self.pnl_history = list(zip(dates, pnl_curve))
        
        if self.pnl_history:
            dates, pnl_values = zip(*self.pnl_history)
            
            self.pnl_ax.clear()
            
            # –¶–≤–µ—Ç –ª–∏–Ω–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç P&L
            colors = [self.colors['accent_green'] if pnl >= 0 else self.colors['accent_red'] 
                     for pnl in pnl_values]
            
            self.pnl_ax.plot(dates, pnl_values, color=self.colors['accent_green'], linewidth=2)
            self.pnl_ax.axhline(y=0, color='white', linestyle='--', alpha=0.5)
            self.pnl_ax.set_title('P&L –ì—Ä–∞—Ñ–∏–∫', color='white', fontsize=14)
            self.pnl_ax.set_ylabel('P&L (USDT)', color='white')
            self.pnl_ax.tick_params(colors='white')
            self.pnl_ax.grid(True, alpha=0.3)
            
            # –ó–∞–ª–∏–≤–∫–∞ –æ–±–ª–∞—Å—Ç–∏
            self.pnl_ax.fill_between(dates, pnl_values, 0, 
                                   where=np.array(pnl_values) >= 0,
                                   color=self.colors['accent_green'], alpha=0.3)
            self.pnl_ax.fill_between(dates, pnl_values, 0,
                                   where=np.array(pnl_values) < 0,
                                   color=self.colors['accent_red'], alpha=0.3)
            
            # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
            for spine in self.pnl_ax.spines.values():
                spine.set_color('white')
            
            self.pnl_canvas.draw()
    
    def update_analytics_charts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        # –°–æ–∑–¥–∞–Ω–∏–µ subplot'–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.analytics_figure.clear()
        
        # 2x2 —Å–µ—Ç–∫–∞ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        ax1 = self.analytics_figure.add_subplot(221, facecolor='#2d2d2d')
        ax2 = self.analytics_figure.add_subplot(222, facecolor='#2d2d2d')
        ax3 = self.analytics_figure.add_subplot(223, facecolor='#2d2d2d')
        ax4 = self.analytics_figure.add_subplot(224, facecolor='#2d2d2d')
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        np.random.seed(42)
        returns = np.random.normal(0.001, 0.02, 1000)
        ax1.hist(returns, bins=50, color=self.colors['accent_blue'], alpha=0.7)
        ax1.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏', color='white', fontsize=10)
        ax1.tick_params(colors='white')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –ü—Ä–æ—Å–∞–¥–∫–∏
        equity = np.cumprod(1 + returns)
        running_max = np.maximum.accumulate(equity)
        drawdown = (equity - running_max) / running_max * 100
        
        ax2.fill_between(range(len(drawdown)), drawdown, 0, 
                        color=self.colors['accent_red'], alpha=0.7)
        ax2.set_title('–ü—Ä–æ—Å–∞–¥–∫–∏ (%)', color='white', fontsize=10)
        ax2.tick_params(colors='white')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        monthly_returns = np.random.normal(0.02, 0.05, 12)
        months = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                 '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        
        colors = [self.colors['accent_green'] if r >= 0 else self.colors['accent_red'] 
                 for r in monthly_returns]
        ax3.bar(months, monthly_returns * 100, color=colors, alpha=0.7)
        ax3.set_title('–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', color='white', fontsize=10)
        ax3.tick_params(colors='white')
        ax3.tick_params(axis='x', rotation=45)
        
        # –ì—Ä–∞—Ñ–∏–∫ 4: Risk-Return scatter
        risks = np.random.uniform(0.1, 0.3, 20)
        returns_annual = np.random.uniform(-0.1, 0.4, 20)
        
        ax4.scatter(risks * 100, returns_annual * 100, 
                   color=self.colors['accent_orange'], alpha=0.7, s=50)
        ax4.set_xlabel('–†–∏—Å–∫ (%)', color='white')
        ax4.set_ylabel('–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)', color='white')
        ax4.set_title('–†–∏—Å–∫-–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å', color='white', fontsize=10)
        ax4.tick_params(colors='white')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –æ—Å–µ–π
        for ax in [ax1, ax2, ax3, ax4]:
            for spine in ax.spines.values():
                spine.set_color('white')
            ax.grid(True, alpha=0.3)
        
        self.analytics_figure.tight_layout()
        self.analytics_canvas.draw()
    
    def update_displays(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Å–ø–ª–µ–µ–≤"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–µ–π–±–ª–æ–≤ –≤ toolbar
        self.balance_label.config(text=f"–ë–∞–ª–∞–Ω—Å: ${self.state.total_balance:,.2f}")
        
        pnl_color = self.colors['accent_green'] if self.state.current_pnl >= 0 else self.colors['accent_red']
        self.pnl_label.config(text=f"P&L: ${self.state.current_pnl:,.2f}", fg=pnl_color)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.total_pnl_label.config(text=f"${self.state.current_pnl:,.2f}")
        self.daily_pnl_label.config(text=f"${self.state.daily_pnl:,.2f}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.last_update_label.config(text=f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}")
    
    def start_data_updates(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        def update_loop():
            if self.state.is_trading_active:
                # –°–∏–º—É–ª—è—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è P&L
                change = np.random.normal(0, 10)
                self.state.current_pnl += Decimal(str(change))
                self.state.daily_pnl += Decimal(str(change))
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –≤ P&L –∏—Å—Ç–æ—Ä–∏—é
                self.pnl_history.append((datetime.now(), float(self.state.current_pnl)))
                
                # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
                if len(self.pnl_history) > 500:
                    self.pnl_history = self.pnl_history[-400:]
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ P&L
                self.update_pnl_chart()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∏—Å–ø–ª–µ–µ–≤
            self.update_displays()
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.root.after(1000, update_loop)
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.root.after(1000, update_loop)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        self.root.mainloop()

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞
    dashboard = ModernTradingDashboard()
    dashboard.run()