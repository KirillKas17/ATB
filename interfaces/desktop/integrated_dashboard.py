"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Ç–æ—Ä–≥–æ–≤–ª–∏ - –ø–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
"""

import sys
import asyncio
import threading
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path

import tkinter as tk
from tkinter import ttk, messagebox

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–∞—à–±–æ—Ä–¥–∞
from interfaces.desktop.trading_dashboard import ModernTradingDashboard
from interfaces.desktop.dashboard_controller import DashboardController

class IntegratedTradingDashboard(ModernTradingDashboard):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é"""
    
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.controller = DashboardController()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
        super().__init__()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.create_advanced_features()
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        self.setup_async_loop()
    
    def create_advanced_features(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        
        # –ú–µ–Ω—é
        self.create_menu_bar()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–Ω–µ–ª–∏
        self.create_alerts_panel()
        self.create_news_panel()
        self.create_portfolio_panel()
        
        # –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏
        self.setup_hotkeys()
    
    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", command=self.new_session)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.load_config)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.save_config)
        file_menu.add_separator()
        file_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self.export_data)
        file_menu.add_command(label="–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", command=self.import_strategies)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –¢–æ—Ä–≥–æ–≤–ª—è
        trading_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–¢–æ—Ä–≥–æ–≤–ª—è", menu=trading_menu)
        trading_menu.add_command(label="–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", command=self.quick_start)
        trading_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", command=self.strategy_settings)
        trading_menu.add_command(label="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", command=self.risk_settings)
        trading_menu.add_separator()
        trading_menu.add_command(label="–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", command=self.close_all_positions)
        trading_menu.add_command(label="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞", command=self.cancel_all_orders)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞", menu=analytics_menu)
        analytics_menu.add_command(label="–û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", command=self.performance_report)
        analytics_menu.add_command(label="–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", command=self.risk_analysis)
        analytics_menu.add_command(label="–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", command=self.strategy_optimization)
        analytics_menu.add_separator()
        analytics_menu.add_command(label="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=self.export_excel)
        analytics_menu.add_command(label="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞", command=self.generate_pdf_report)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π", command=self.position_calculator)
        tools_menu.add_command(label="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", command=self.currency_converter)
        tools_menu.add_command(label="–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", command=self.economic_calendar)
        tools_menu.add_separator()
        tools_menu.add_command(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings)
        
        # –ü–æ–º–æ—â—å
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", command=self.show_manual)
        help_menu.add_command(label="–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_hotkeys)
        help_menu.add_command(label="–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def create_alerts_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        alerts_frame = tk.LabelFrame(self.right_panel, text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                   bg=self.colors['bg_secondary'],
                                   fg=self.colors['text_primary'],
                                   font=self.fonts['subtitle'])
        alerts_frame.pack(fill='x', padx=5, pady=5)
        
        # –°–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.alerts_listbox = tk.Listbox(alerts_frame, height=4,
                                       bg=self.colors['bg_tertiary'],
                                       fg=self.colors['text_primary'],
                                       selectbackground=self.colors['accent_orange'])
        self.alerts_listbox.pack(fill='x', padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        test_alerts = [
            "üü¢ –ü–æ–∑–∏—Ü–∏—è BTC/USDT –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é +$150",
            "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞ ETH/USDT",
            "üî¥ –°—Ç–æ–ø-–ª–æ—Å—Å —Å—Ä–∞–±–æ—Ç–∞–ª –Ω–∞ ADA/USDT -$75"
        ]
        
        for alert in test_alerts:
            self.alerts_listbox.insert('end', alert)
    
    def create_news_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        news_frame = tk.LabelFrame(self.left_panel, text="–†—ã–Ω–æ—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏",
                                 bg=self.colors['bg_secondary'],
                                 fg=self.colors['text_primary'],
                                 font=self.fonts['subtitle'])
        news_frame.pack(fill='x', padx=5, pady=5)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π
        self.news_text = tk.Text(news_frame, height=6, wrap='word',
                               bg=self.colors['bg_tertiary'],
                               fg=self.colors['text_primary'],
                               font=self.fonts['small'])
        self.news_text.pack(fill='x', padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        test_news = """
üî• Bitcoin –ø–æ–¥–Ω—è–ª—Å—è –≤—ã—à–µ $45,000 –Ω–∞ —Ñ–æ–Ω–µ —Ä–∞—Å—Ç—É—â–µ–≥–æ –∏–Ω—Å—Ç–∏—Ç—É—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞

üìà Ethereum –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –æ—á–µ—Ä–µ–¥–Ω–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é —Å–µ—Ç–∏, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

‚ö° –ù–æ–≤—ã–µ —Ä–µ–≥—É–ª—è—Ç–∏–≤–Ω—ã–µ –º–µ—Ä—ã –≤ –ï–° –º–æ–≥—É—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä—ã–Ω–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

üè¶ –ö—Ä—É–ø–Ω—ã–µ –±–∞–Ω–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        """
        
        self.news_text.insert('1.0', test_news.strip())
        self.news_text.config(state='disabled')
    
    def create_portfolio_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_frame = tk.LabelFrame(self.right_panel, text="–ü–æ—Ä—Ç—Ñ–µ–ª—å",
                                      bg=self.colors['bg_secondary'],
                                      fg=self.colors['text_primary'],
                                      font=self.fonts['subtitle'])
        portfolio_frame.pack(fill='x', padx=5, pady=5)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–æ–≤
        assets_frame = tk.Frame(portfolio_frame, bg=self.colors['bg_secondary'])
        assets_frame.pack(fill='x', padx=5, pady=5)
        
        # –ü—Ä–∏–º–µ—Ä –∞–∫—Ç–∏–≤–æ–≤
        assets = [
            ("USDT", "70%", self.colors['text_primary']),
            ("BTC", "20%", self.colors['accent_orange']),
            ("ETH", "8%", self.colors['accent_blue']),
            ("–î—Ä—É–≥–∏–µ", "2%", self.colors['text_secondary'])
        ]
        
        for i, (asset, percentage, color) in enumerate(assets):
            tk.Label(assets_frame, text=f"{asset}:",
                   bg=self.colors['bg_secondary'],
                   fg=self.colors['text_secondary']).grid(row=i, column=0, sticky='w')
            
            tk.Label(assets_frame, text=percentage,
                   bg=self.colors['bg_secondary'],
                   fg=color, font=self.fonts['body']).grid(row=i, column=1, sticky='e')
        
        assets_frame.columnconfigure(1, weight=1)
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.new_session())
        self.root.bind('<Control-s>', lambda e: self.save_config())
        self.root.bind('<Control-o>', lambda e: self.load_config())
        self.root.bind('<F5>', lambda e: self.refresh_data())
        self.root.bind('<F9>', lambda e: self.start_trading())
        self.root.bind('<F10>', lambda e: self.stop_trading())
        self.root.bind('<Escape>', lambda e: self.emergency_stop())
    
    def setup_async_loop(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞"""
        self.loop = asyncio.new_event_loop()
        
        def run_loop():
            asyncio.set_event_loop(self.loop)
            self.loop.run_forever()
        
        self.async_thread = threading.Thread(target=run_loop, daemon=True)
        self.async_thread.start()
    
    def run_async(self, coro):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∫–æ—Ä—É—Ç–∏–Ω—ã"""
        future = asyncio.run_coroutine_threadsafe(coro, self.loop)
        return future.result(timeout=10)
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞
    async def start_trading_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            risk_params = {
                'position_size': self.position_size_var.get(),
                'stop_loss': self.stop_loss_var.get(),
                'take_profit': self.take_profit_var.get()
            }
            
            # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
            session = await self.controller.start_trading_session(
                mode=self.state.trading_mode,
                selected_pairs=self.state.selected_pairs,
                active_strategies=self.state.active_strategies,
                initial_balance=self.state.total_balance,
                risk_params=risk_params
            )
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            self.state.is_trading_active = True
            
            # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
            self.start_real_time_updates()
            
            return True
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
            return False
    
    def start_trading(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.state.selected_pairs:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã")
            return
        
        if not self.state.active_strategies:
            messagebox.showwarning("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            return
        
        # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        try:
            success = self.run_async(self.start_trading_async())
            
            if success:
                self.start_btn.config(state='disabled')
                self.stop_btn.config(state='normal')
                self.connection_status.config(text="üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ", fg=self.colors['accent_green'])
                
                messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞", 
                                  f"–†–µ–∂–∏–º: {self.state.trading_mode}\n"
                                  f"–ü–∞—Ä—ã: {', '.join(self.state.selected_pairs)}\n"
                                  f"–°—Ç—Ä–∞—Ç–µ–≥–∏–∏: {', '.join(self.state.active_strategies)}")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
    
    async def stop_trading_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            await self.controller.stop_trading_session()
            self.state.is_trading_active = False
            return True
            
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
            return False
    
    def stop_trading(self):
        """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        try:
            success = self.run_async(self.stop_trading_async())
            
            if success:
                self.start_btn.config(state='normal')
                self.stop_btn.config(state='disabled')
                self.connection_status.config(text="‚ö´ –û—Ç–∫–ª—é—á–µ–Ω–æ", fg=self.colors['accent_red'])
                
                messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: {e}")
    
    def start_real_time_updates(self):
        """–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        def update_data():
            if self.state.is_trading_active:
                try:
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π
                    positions = self.run_async(self.controller.get_positions())
                    self.update_positions_display(positions)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤
                    orders = self.run_async(self.controller.get_orders())
                    self.update_orders_display(orders)
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    metrics = self.run_async(self.controller.get_performance_metrics())
                    self.update_metrics_display(metrics)
                    
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            
            # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            self.root.after(5000, update_data)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.root.after(1000, update_data)
    
    def update_positions_display(self, positions):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.positions_tree.get_children():
            self.positions_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for position in positions:
            pnl_color = 'green' if position['pnl'] >= 0 else 'red'
            
            self.positions_tree.insert('', 'end', values=(
                position['symbol'],
                position['side'],
                f"{position['size']:.4f}",
                f"${position['entry_price']:.2f}",
                f"${position['current_price']:.2f}",
                f"${position['pnl']:.2f}"
            ), tags=(pnl_color,))
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤
        self.positions_tree.tag_configure('green', foreground=self.colors['accent_green'])
        self.positions_tree.tag_configure('red', foreground=self.colors['accent_red'])
    
    def update_orders_display(self, orders):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        for order in orders:
            self.orders_tree.insert('', 'end', values=(
                order['symbol'],
                order['type'],
                order['side'],
                f"{order['amount']:.4f}",
                f"${order['price']:.2f}",
                order['status']
            ))
    
    def update_metrics_display(self, metrics):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        pnl_color = self.colors['accent_green'] if metrics['total_pnl'] >= 0 else self.colors['accent_red']
        
        self.total_pnl_label.config(text=f"${metrics['total_pnl']:.2f}", fg=pnl_color)
        self.win_rate_label.config(text=f"{metrics['win_rate_pct']:.1f}%")
        self.sharpe_label.config(text=f"{metrics['sharpe_ratio']:.2f}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.state.current_pnl = Decimal(str(metrics['total_pnl']))
        self.state.active_positions = metrics['total_trades']
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–µ–Ω—é
    def new_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if self.state.is_trading_active:
            if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é?"):
                self.stop_trading()
            else:
                return
        
        self.reset_trading()
        messagebox.showinfo("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", "–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from tkinter import filedialog
        
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if filename:
            try:
                import json
                with open(filename, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                self.apply_config(config)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from tkinter import filedialog
        
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            defaultextension=".json",
            filetypes=[("JSON —Ñ–∞–π–ª—ã", "*.json"), ("–í—Å–µ —Ñ–∞–π–ª—ã", "*.*")]
        )
        
        if filename:
            try:
                config = self.get_current_config()
                
                import json
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
                
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def apply_config(self, config):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
            if 'selected_pairs' in config:
                self.state.selected_pairs = config['selected_pairs']
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                self.pairs_listbox.selection_clear(0, 'end')
                for pair in config['selected_pairs']:
                    for i in range(self.pairs_listbox.size()):
                        if self.pairs_listbox.get(i) == pair:
                            self.pairs_listbox.selection_set(i)
            
            # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
            if 'active_strategies' in config:
                for strategy, var in self.strategy_vars.items():
                    var.set(strategy in config['active_strategies'])
                self.update_active_strategies()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
            if 'risk_params' in config:
                risk = config['risk_params']
                self.position_size_var.set(risk.get('position_size', 2.0))
                self.stop_loss_var.set(risk.get('stop_loss', 2.0))
                self.take_profit_var.set(risk.get('take_profit', 4.0))
            
            # –†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
            if 'trading_mode' in config:
                self.trading_mode_var.set(config['trading_mode'])
                self.state.trading_mode = config['trading_mode']
        
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}")
    
    def get_current_config(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return {
            'selected_pairs': self.state.selected_pairs,
            'active_strategies': self.state.active_strategies,
            'trading_mode': self.state.trading_mode,
            'risk_params': {
                'position_size': self.position_size_var.get(),
                'stop_loss': self.stop_loss_var.get(),
                'take_profit': self.take_profit_var.get()
            },
            'created_at': datetime.now().isoformat()
        }
    
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        # –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –ø–∞—Ä
        popular_pairs = ['BTC/USDT', 'ETH/USDT']
        for pair in popular_pairs:
            for i in range(self.pairs_listbox.size()):
                if self.pairs_listbox.get(i) == pair:
                    self.pairs_listbox.selection_set(i)
        
        self.on_pair_select()
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_vars['RSI Bounce'].set(True)
        self.strategy_vars['MACD Cross'].set(True)
        self.update_active_strategies()
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–∞
        self.position_size_var.set(1.0)
        self.stop_loss_var.set(2.0)
        self.take_profit_var.set(4.0)
        
        messagebox.showinfo("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        if self.state.is_trading_active:
            if messagebox.askyesno("–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê", 
                                 "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å—é —Ç–æ—Ä–≥–æ–≤–ª—é?\n"
                                 "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã!"):
                self.stop_trading()
                messagebox.showwarning("–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "–¢–æ—Ä–≥–æ–≤–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if self.state.is_trading_active:
            try:
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                self.start_real_time_updates()
                messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–æ", "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    
    def show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
ATB Trading Dashboard v2.0

–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è –∏ —Å–∏–º—É–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è
‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
‚Ä¢ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥

¬© 2024 ATB Trading Systems
        """
        
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text.strip())
    
    def show_hotkeys(self):
        """–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        hotkeys_text = """
–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:

Ctrl+N - –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é  
Ctrl+O - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
F5 - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
F9 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
F10 - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
Esc - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
        """
        
        messagebox.showinfo("–ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", hotkeys_text.strip())
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            self.root.mainloop()
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            if hasattr(self, 'loop'):
                self.loop.call_soon_threadsafe(self.loop.stop)

if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
    try:
        dashboard = IntegratedTradingDashboard()
        dashboard.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        import traceback
        traceback.print_exc()