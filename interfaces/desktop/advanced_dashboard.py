"""
ATB Trading Dashboard v2.0 - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import sys
import asyncio
import threading
import logging
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Dict, List, Optional, Any
import json

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import tkinter.font as tkFont

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

try:
    import pandas as pd
    import matplotlib.pyplot as plt
    from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
    from matplotlib.figure import Figure
    ADVANCED_FEATURES = True
except ImportError:
    ADVANCED_FEATURES = False

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from interfaces.desktop.dashboard_controller import DashboardController

class AdvancedTradingDashboard:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º"""
    
    def __init__(self):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        self.controller = DashboardController()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.is_trading_active = False
        self.current_session = None
        self.selected_pairs = []
        self.active_strategies = []
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.price_data = {}
        self.performance_data = []
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.theme = "dark"
        self.update_interval = 1000  # ms
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.create_main_window()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.setup_hotkeys()
        
        # –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.start_update_cycles()
        
        self.logger.info("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–∞—à–±–æ—Ä–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)
        
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s | %(name)s | %(levelname)s | %(message)s',
            handlers=[
                logging.FileHandler(log_dir / "dashboard.log", encoding='utf-8'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger("AdvancedDashboard")
    
    def create_main_window(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.root = tk.Tk()
        self.root.title("‚ö° ATB Trading Dashboard v2.0 - Advanced Edition")
        self.root.geometry("1600x1000")
        self.root.minsize(1200, 800)
        
        # –ò–∫–æ–Ω–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫–Ω–∞
        try:
            self.root.iconbitmap(default="assets/icon.ico")
        except:
            pass
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        self.root.configure(bg='#1e1e1e')
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
    
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.create_menu_bar()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.create_toolbar()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —Å –≤–∫–ª–∞–¥–∫–∞–º–∏
        self.create_main_notebook()
        
        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.create_status_bar()
        
        # –ü–∞–Ω–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.create_notifications_panel()
    
    def create_menu_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –º–µ–Ω—é"""
        menubar = tk.Menu(self.root, bg='#2d2d2d', fg='white', 
                         activebackground='#3742fa', activeforeground='white')
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0, bg='#2d2d2d', fg='white')
        menubar.add_cascade(label="üìÅ –§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="üÜï –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", 
                             command=self.new_session, accelerator="Ctrl+N")
        file_menu.add_command(label="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", 
                             command=self.load_config, accelerator="Ctrl+O")
        file_menu.add_command(label="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", 
                             command=self.save_config, accelerator="Ctrl+S")
        file_menu.add_separator()
        file_menu.add_command(label="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", command=self.export_data)
        file_menu.add_command(label="üì• –ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", command=self.import_strategies)
        file_menu.add_separator()
        file_menu.add_command(label="üö™ –í—ã—Ö–æ–¥", command=self.root.quit, accelerator="Alt+F4")
        
        # –¢–æ—Ä–≥–æ–≤–ª—è
        trading_menu = tk.Menu(menubar, tearoff=0, bg='#2d2d2d', fg='white')
        menubar.add_cascade(label="üíº –¢–æ—Ä–≥–æ–≤–ª—è", menu=trading_menu)
        trading_menu.add_command(label="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
                               command=self.start_trading, accelerator="F9")
        trading_menu.add_command(label="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", 
                               command=self.stop_trading, accelerator="F10")
        trading_menu.add_command(label="‚ö° –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", command=self.quick_start)
        trading_menu.add_separator()
        trading_menu.add_command(label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", 
                               command=self.strategy_settings)
        trading_menu.add_command(label="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", 
                               command=self.risk_settings)
        trading_menu.add_separator()
        trading_menu.add_command(label="‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏", 
                               command=self.close_all_positions)
        trading_menu.add_command(label="‚õî –û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ—Ä–¥–µ—Ä–∞", 
                               command=self.cancel_all_orders)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_menu = tk.Menu(menubar, tearoff=0, bg='#2d2d2d', fg='white')
        menubar.add_cascade(label="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", menu=analytics_menu)
        analytics_menu.add_command(label="üìà –û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
                                  command=self.performance_report)
        analytics_menu.add_command(label="‚ö†Ô∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", command=self.risk_analysis)
        analytics_menu.add_command(label="üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", 
                                  command=self.strategy_optimization)
        analytics_menu.add_separator()
        analytics_menu.add_command(label="üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", command=self.export_excel)
        analytics_menu.add_command(label="üìÑ PDF –æ—Ç—á–µ—Ç", command=self.generate_pdf_report)
        
        # –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        tools_menu = tk.Menu(menubar, tearoff=0, bg='#2d2d2d', fg='white')
        menubar.add_cascade(label="üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", menu=tools_menu)
        tools_menu.add_command(label="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π", 
                              command=self.position_calculator)
        tools_menu.add_command(label="üí± –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç", 
                              command=self.currency_converter)
        tools_menu.add_command(label="üìÖ –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å", 
                              command=self.economic_calendar)
        tools_menu.add_separator()
        tools_menu.add_command(label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", command=self.open_settings)
        
        # –ü–æ–º–æ—â—å
        help_menu = tk.Menu(menubar, tearoff=0, bg='#2d2d2d', fg='white')
        menubar.add_cascade(label="‚ùì –ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="üìö –°–ø—Ä–∞–≤–∫–∞", command=self.show_help, accelerator="F1")
        help_menu.add_command(label="üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", command=self.show_hotkeys)
        help_menu.add_command(label="üÜî –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
    
    def create_toolbar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        toolbar_frame = tk.Frame(self.root, bg='#2d2d2d', height=60)
        toolbar_frame.pack(fill='x', pady=(0, 5))
        toolbar_frame.pack_propagate(False)
        
        # –õ–µ–≤–∞—è –≥—Ä—É–ø–ø–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–µ–π
        left_group = tk.Frame(toolbar_frame, bg='#2d2d2d')
        left_group.pack(side='left', padx=10, pady=5)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.trade_button = tk.Button(left_group, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", 
                                     bg='#00ff88', fg='black', font=('Arial', 12, 'bold'),
                                     command=self.toggle_trading, width=12)
        self.trade_button.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        emergency_button = tk.Button(left_group, text="üõë –°–¢–û–ü", 
                                   bg='#ff4757', fg='white', font=('Arial', 10, 'bold'),
                                   command=self.emergency_stop, width=8)
        emergency_button.pack(side='left', padx=5)
        
        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        tk.Label(left_group, text="–†–µ–∂–∏–º:", bg='#2d2d2d', fg='white', 
                font=('Arial', 10)).pack(side='left', padx=(20, 5))
        
        self.mode_var = tk.StringVar(value="simulation")
        mode_combo = ttk.Combobox(left_group, textvariable=self.mode_var, 
                                 values=["simulation", "live", "backtest"], 
                                 state="readonly", width=12)
        mode_combo.pack(side='left', padx=5)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        center_group = tk.Frame(toolbar_frame, bg='#2d2d2d')
        center_group.pack(side='left', expand=True, padx=20)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        stats_frame = tk.Frame(center_group, bg='#2d2d2d')
        stats_frame.pack(fill='x')
        
        # –ë–∞–ª–∞–Ω—Å
        self.balance_label = tk.Label(stats_frame, text="üí∞ –ë–∞–ª–∞–Ω—Å: $10,000.00", 
                                     bg='#2d2d2d', fg='#00ff88', font=('Arial', 12, 'bold'))
        self.balance_label.pack(side='left', padx=10)
        
        # P&L
        self.pnl_label = tk.Label(stats_frame, text="üìä P&L: +$0.00 (0.00%)", 
                                 bg='#2d2d2d', fg='#00ff88', font=('Arial', 12, 'bold'))
        self.pnl_label.pack(side='left', padx=10)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.positions_label = tk.Label(stats_frame, text="üìà –ü–æ–∑–∏—Ü–∏–∏: 0", 
                                       bg='#2d2d2d', fg='white', font=('Arial', 11))
        self.positions_label.pack(side='left', padx=10)
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞
        self.orders_label = tk.Label(stats_frame, text="üìã –û—Ä–¥–µ—Ä–∞: 0", 
                                    bg='#2d2d2d', fg='white', font=('Arial', 11))
        self.orders_label.pack(side='left', padx=10)
        
        # –ü—Ä–∞–≤–∞—è –≥—Ä—É–ø–ø–∞ - –±—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        right_group = tk.Frame(toolbar_frame, bg='#2d2d2d')
        right_group.pack(side='right', padx=10, pady=5)
        
        # –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        refresh_button = tk.Button(right_group, text="üîÑ", bg='#3742fa', fg='white', 
                                  font=('Arial', 12), command=self.refresh_data, width=3)
        refresh_button.pack(side='right', padx=2)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_button = tk.Button(right_group, text="‚öôÔ∏è", bg='#2d2d2d', fg='white', 
                                   font=('Arial', 12), command=self.open_settings, width=3)
        settings_button.pack(side='right', padx=2)
        
        # –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
        fullscreen_button = tk.Button(right_group, text="üî≥", bg='#2d2d2d', fg='white', 
                                     font=('Arial', 12), command=self.toggle_fullscreen, width=3)
        fullscreen_button.pack(side='right', padx=2)
    
    def create_main_notebook(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ —Å –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        # –°–æ–∑–¥–∞–Ω–∏–µ notebook —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        style.configure('TNotebook', background='#1e1e1e', borderwidth=0)
        style.configure('TNotebook.Tab', 
                       background='#2d2d2d', foreground='white', 
                       padding=[12, 8], font=('Arial', 10, 'bold'))
        style.map('TNotebook.Tab',
                 background=[('selected', '#3742fa'), ('active', '#454545')])
        
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_main_tab()
        self.create_analytics_tab()
        self.create_backtest_tab()
        self.create_positions_tab()
        self.create_settings_tab()
    
    def create_main_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏"""
        main_frame = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(main_frame, text='üìä –û—Å–Ω–æ–≤–Ω–æ–µ')
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–Ω–µ–ª–∏
        main_paned = tk.PanedWindow(main_frame, orient='horizontal', 
                                   bg='#1e1e1e', sashwidth=5, relief='flat')
        main_paned.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        self.create_control_panel(main_paned)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫–∏
        self.create_charts_panel(main_paned)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.create_info_panel(main_paned)
    
    def create_control_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        control_frame = tk.Frame(parent, bg='#1e1e1e', width=300)
        parent.add(control_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(control_frame, text="üéõÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", 
                              bg='#1e1e1e', fg='#3742fa', font=('Arial', 14, 'bold'))
        title_label.pack(pady=(10, 20))
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã
        self.create_pairs_section(control_frame)
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self.create_strategies_section(control_frame)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏
        self.create_risk_section(control_frame)
        
        # –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã
        self.create_news_section(control_frame)
    
    def create_pairs_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        pairs_frame = tk.LabelFrame(parent, text="üí± –¢–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã", 
                                   bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'),
                                   borderwidth=2, relief='groove')
        pairs_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–∏—Å–∫ –ø–∞—Ä
        search_frame = tk.Frame(pairs_frame, bg='#1e1e1e')
        search_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(search_frame, text="üîç", bg='#1e1e1e', fg='white').pack(side='left')
        self.pairs_search = tk.Entry(search_frame, bg='#2d2d2d', fg='white', 
                                    insertbackground='white', font=('Arial', 10))
        self.pairs_search.pack(side='left', fill='x', expand=True, padx=(5, 0))
        self.pairs_search.bind('<KeyRelease>', self.filter_pairs)
        
        # –°–ø–∏—Å–æ–∫ –ø–∞—Ä
        pairs_list_frame = tk.Frame(pairs_frame, bg='#1e1e1e')
        pairs_list_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # Scrollbar –¥–ª—è —Å–ø–∏—Å–∫–∞
        pairs_scrollbar = tk.Scrollbar(pairs_list_frame)
        pairs_scrollbar.pack(side='right', fill='y')
        
        self.pairs_listbox = tk.Listbox(pairs_list_frame, 
                                       yscrollcommand=pairs_scrollbar.set,
                                       bg='#2d2d2d', fg='white', 
                                       selectbackground='#3742fa',
                                       font=('Arial', 10), height=8,
                                       selectmode='multiple')
        self.pairs_listbox.pack(side='left', fill='both', expand=True)
        pairs_scrollbar.config(command=self.pairs_listbox.yview)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞—Ä
        self.populate_pairs_list()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–∏
        pairs_buttons = tk.Frame(pairs_frame, bg='#1e1e1e')
        pairs_buttons.pack(fill='x', padx=5, pady=5)
        
        tk.Button(pairs_buttons, text="‚úÖ –í—ã–±—Ä–∞—Ç—å –≤—Å–µ", bg='#00ff88', fg='black',
                 command=self.select_all_pairs, font=('Arial', 9)).pack(side='left', padx=2)
        tk.Button(pairs_buttons, text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å", bg='#ff4757', fg='white',
                 command=self.clear_pairs_selection, font=('Arial', 9)).pack(side='left', padx=2)
    
    def create_strategies_section(self, parent):
        """–°–µ–∫—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        strategies_frame = tk.LabelFrame(parent, text="üß† –¢–æ—Ä–≥–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏", 
                                        bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'),
                                        borderwidth=2, relief='groove')
        strategies_frame.pack(fill='x', padx=10, pady=5)
        
        # –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏
        self.strategy_vars = {}
        strategies = [
            ("RSI Bounce", "–¢–æ—Ä–≥–æ–≤–ª—è –Ω–∞ –æ—Ç—Å–∫–æ–∫–∞—Ö RSI", "medium"),
            ("MACD Cross", "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è MACD", "medium"),
            ("Bollinger Squeeze", "–°–∂–∞—Ç–∏–µ –ø–æ–ª–æ—Å –ë–æ–ª–ª–∏–Ω–¥–∂–µ—Ä–∞", "high"),
            ("Mean Reversion", "–í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ä–µ–¥–Ω–µ–º—É", "low"),
            ("Momentum", "–°–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥—É", "high"),
            ("Grid Trading", "–°–µ—Ç–æ—á–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è", "medium")
        ]
        
        for strategy, description, risk_level in strategies:
            strategy_frame = tk.Frame(strategies_frame, bg='#1e1e1e')
            strategy_frame.pack(fill='x', padx=5, pady=2)
            
            var = tk.BooleanVar()
            self.strategy_vars[strategy] = var
            
            checkbox = tk.Checkbutton(strategy_frame, text=strategy, variable=var,
                                     bg='#1e1e1e', fg='white', selectcolor='#2d2d2d',
                                     font=('Arial', 10), anchor='w')
            checkbox.pack(side='left')
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–∏—Å–∫–∞
            risk_colors = {"low": "#00ff88", "medium": "#ffa500", "high": "#ff4757"}
            risk_label = tk.Label(strategy_frame, text=f"({risk_level})",
                                 bg='#1e1e1e', fg=risk_colors[risk_level], 
                                 font=('Arial', 8))
            risk_label.pack(side='right')
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        strategy_settings_btn = tk.Button(strategies_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
                                         bg='#3742fa', fg='white', 
                                         command=self.strategy_settings)
        strategy_settings_btn.pack(pady=5)
    
    def create_risk_section(self, parent):
        """–°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        risk_frame = tk.LabelFrame(parent, text="üõ°Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", 
                                  bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'),
                                  borderwidth=2, relief='groove')
        risk_frame.pack(fill='x', padx=10, pady=5)
        
        # –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏
        position_frame = tk.Frame(risk_frame, bg='#1e1e1e')
        position_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(position_frame, text="üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏:", 
                bg='#1e1e1e', fg='white', font=('Arial', 10)).pack(anchor='w')
        
        self.position_size_var = tk.StringVar(value="2.0")
        position_scale = tk.Scale(position_frame, from_=0.1, to=10.0, resolution=0.1,
                                 variable=self.position_size_var, orient='horizontal',
                                 bg='#2d2d2d', fg='white', highlightthickness=0,
                                 troughcolor='#3742fa', activebackground='#454545')
        position_scale.pack(fill='x', pady=2)
        
        position_label = tk.Label(position_frame, text="", bg='#1e1e1e', fg='#00ff88')
        position_label.pack()
        
        def update_position_label(val):
            percentage = float(val)
            if percentage <= 1.0:
                risk_level = "–ù–∏–∑–∫–∏–π"
                color = "#00ff88"
            elif percentage <= 3.0:
                risk_level = "–°—Ä–µ–¥–Ω–∏–π"
                color = "#ffa500"
            else:
                risk_level = "–í—ã—Å–æ–∫–∏–π"
                color = "#ff4757"
            
            position_label.config(text=f"{percentage}% –æ—Ç –¥–µ–ø–æ–∑–∏—Ç–∞ ({risk_level})", fg=color)
        
        position_scale.config(command=update_position_label)
        update_position_label("2.0")
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        sl_frame = tk.Frame(risk_frame, bg='#1e1e1e')
        sl_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(sl_frame, text="üõë –°—Ç–æ–ø-–ª–æ—Å—Å:", 
                bg='#1e1e1e', fg='white', font=('Arial', 10)).pack(anchor='w')
        
        self.stop_loss_var = tk.StringVar(value="2.0")
        sl_scale = tk.Scale(sl_frame, from_=0.5, to=10.0, resolution=0.1,
                           variable=self.stop_loss_var, orient='horizontal',
                           bg='#2d2d2d', fg='white', highlightthickness=0,
                           troughcolor='#ff4757', activebackground='#454545')
        sl_scale.pack(fill='x', pady=2)
        
        sl_label = tk.Label(sl_frame, text="2.0% –æ—Ç –≤—Ö–æ–¥–∞", bg='#1e1e1e', fg='#ff4757')
        sl_label.pack()
        
        def update_sl_label(val):
            sl_label.config(text=f"{float(val)}% –æ—Ç –≤—Ö–æ–¥–∞")
        
        sl_scale.config(command=update_sl_label)
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        tp_frame = tk.Frame(risk_frame, bg='#1e1e1e')
        tp_frame.pack(fill='x', padx=5, pady=5)
        
        tk.Label(tp_frame, text="üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç:", 
                bg='#1e1e1e', fg='white', font=('Arial', 10)).pack(anchor='w')
        
        self.take_profit_var = tk.StringVar(value="4.0")
        tp_scale = tk.Scale(tp_frame, from_=1.0, to=20.0, resolution=0.5,
                           variable=self.take_profit_var, orient='horizontal',
                           bg='#2d2d2d', fg='white', highlightthickness=0,
                           troughcolor='#00ff88', activebackground='#454545')
        tp_scale.pack(fill='x', pady=2)
        
        tp_label = tk.Label(tp_frame, text="4.0% –æ—Ç –≤—Ö–æ–¥–∞", bg='#1e1e1e', fg='#00ff88')
        tp_label.pack()
        
        def update_tp_label(val):
            tp_label.config(text=f"{float(val)}% –æ—Ç –≤—Ö–æ–¥–∞")
        
        tp_scale.config(command=update_tp_label)
    
    def create_news_section(self, parent):
        """–°–µ–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        news_frame = tk.LabelFrame(parent, text="üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ —Å–∏–≥–Ω–∞–ª—ã", 
                                  bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'),
                                  borderwidth=2, relief='groove')
        news_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ù–æ–≤–æ—Å—Ç–∏
        news_text = tk.Text(news_frame, bg='#2d2d2d', fg='white', 
                           font=('Arial', 9), height=6, wrap='word',
                           insertbackground='white')
        news_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        sample_news = [
            "üî¥ BTC: –ü—Ä–æ—Ä—ã–≤ —É—Ä–æ–≤–Ω—è —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏—è $45,000",
            "üü° ETH: –ö–æ–Ω—Å–æ–ª–∏–¥–∞—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ $3,000-$3,200",
            "üü¢ Market: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –Ω–∞ 15%",
            "üîµ Signal: RSI oversold –Ω–∞ BTC/USDT 1H",
            "‚ö™ News: Fed meeting —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ 16:00 UTC"
        ]
        
        for news in sample_news:
            news_text.insert('end', f"{datetime.now().strftime('%H:%M')} {news}\n")
        
        news_text.config(state='disabled')
    
    def create_charts_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        charts_frame = tk.Frame(parent, bg='#1e1e1e')
        parent.add(charts_frame)
        
        if ADVANCED_FEATURES:
            self.create_advanced_charts(charts_frame)
        else:
            self.create_simple_charts(charts_frame)
    
    def create_advanced_charts(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å matplotlib"""
        # Notebook –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        charts_notebook = ttk.Notebook(parent)
        charts_notebook.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        self.create_price_chart(charts_notebook)
        
        # –ì—Ä–∞—Ñ–∏–∫ P&L
        self.create_pnl_chart(charts_notebook)
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        self.create_distribution_chart(charts_notebook)
    
    def create_price_chart(self, parent):
        """–ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã"""
        price_frame = tk.Frame(parent, bg='#1e1e1e')
        parent.add(price_frame, text='üìà –¶–µ–Ω–∞')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib —Ñ–∏–≥—É—Ä—ã
        self.price_fig = Figure(figsize=(12, 6), facecolor='#1e1e1e')
        self.price_ax = self.price_fig.add_subplot(111, facecolor='#2d2d2d')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.price_ax.tick_params(colors='white')
        self.price_ax.spines['bottom'].set_color('white')
        self.price_ax.spines['top'].set_color('white')
        self.price_ax.spines['right'].set_color('white')
        self.price_ax.spines['left'].set_color('white')
        
        # Canvas –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.price_canvas = FigureCanvasTkAgg(self.price_fig, price_frame)
        self.price_canvas.draw()
        self.price_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_price_chart()
    
    def create_pnl_chart(self, parent):
        """–ì—Ä–∞—Ñ–∏–∫ P&L"""
        pnl_frame = tk.Frame(parent, bg='#1e1e1e')
        parent.add(pnl_frame, text='üí∞ P&L')
        
        self.pnl_fig = Figure(figsize=(12, 6), facecolor='#1e1e1e')
        self.pnl_ax = self.pnl_fig.add_subplot(111, facecolor='#2d2d2d')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.pnl_ax.tick_params(colors='white')
        self.pnl_ax.spines['bottom'].set_color('white')
        self.pnl_ax.spines['top'].set_color('white')
        self.pnl_ax.spines['right'].set_color('white')
        self.pnl_ax.spines['left'].set_color('white')
        
        self.pnl_canvas = FigureCanvasTkAgg(self.pnl_fig, pnl_frame)
        self.pnl_canvas.draw()
        self.pnl_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        self.update_pnl_chart()
    
    def create_distribution_chart(self, parent):
        """–ì—Ä–∞—Ñ–∏–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
        dist_frame = tk.Frame(parent, bg='#1e1e1e')
        parent.add(dist_frame, text='üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        
        self.dist_fig = Figure(figsize=(12, 6), facecolor='#1e1e1e')
        self.dist_ax = self.dist_fig.add_subplot(111, facecolor='#2d2d2d')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
        self.dist_ax.tick_params(colors='white')
        self.dist_ax.spines['bottom'].set_color('white')
        self.dist_ax.spines['top'].set_color('white')
        self.dist_ax.spines['right'].set_color('white')
        self.dist_ax.spines['left'].set_color('white')
        
        self.dist_canvas = FigureCanvasTkAgg(self.dist_fig, dist_frame)
        self.dist_canvas.draw()
        self.dist_canvas.get_tk_widget().pack(fill='both', expand=True)
        
        self.update_distribution_chart()
    
    def create_simple_charts(self, parent):
        """–ü—Ä–æ—Å—Ç—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –±–µ–∑ matplotlib"""
        simple_frame = tk.Frame(parent, bg='#1e1e1e')
        simple_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        tk.Label(simple_frame, 
                text="üìä –ì–†–ê–§–ò–ö –¶–ï–ù–´\n\n–î–ª—è –ø–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤\n—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ matplotlib:\n\npip install matplotlib",
                bg='#1e1e1e', fg='white', font=('Arial', 14),
                justify='center').pack(expand=True)
    
    def create_info_panel(self, parent):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        info_frame = tk.Frame(parent, bg='#1e1e1e', width=300)
        parent.add(info_frame)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(info_frame, text="üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", 
                              bg='#1e1e1e', fg='#3742fa', font=('Arial', 14, 'bold'))
        title_label.pack(pady=(10, 20))
        
        # –ü–æ–∑–∏—Ü–∏–∏
        self.create_positions_section(info_frame)
        
        # –û—Ä–¥–µ—Ä–∞
        self.create_orders_section(info_frame)
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        self.create_performance_section(info_frame)
    
    def create_positions_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π"""
        pos_frame = tk.LabelFrame(parent, text="üìà –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏", 
                                 bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'))
        pos_frame.pack(fill='x', padx=10, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∑–∏—Ü–∏–π
        pos_tree_frame = tk.Frame(pos_frame, bg='#1e1e1e')
        pos_tree_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        pos_scrollbar = tk.Scrollbar(pos_tree_frame)
        pos_scrollbar.pack(side='right', fill='y')
        
        self.positions_tree = ttk.Treeview(pos_tree_frame, 
                                          yscrollcommand=pos_scrollbar.set,
                                          columns=('Symbol', 'Side', 'Size', 'PnL'),
                                          show='headings', height=6)
        
        self.positions_tree.heading('Symbol', text='–ü–∞—Ä–∞')
        self.positions_tree.heading('Side', text='–°—Ç–æ—Ä–æ–Ω–∞')
        self.positions_tree.heading('Size', text='–†–∞–∑–º–µ—Ä')
        self.positions_tree.heading('PnL', text='P&L')
        
        self.positions_tree.column('Symbol', width=80)
        self.positions_tree.column('Side', width=60)
        self.positions_tree.column('Size', width=80)
        self.positions_tree.column('PnL', width=80)
        
        self.positions_tree.pack(side='left', fill='both', expand=True)
        pos_scrollbar.config(command=self.positions_tree.yview)
    
    def create_orders_section(self, parent):
        """–°–µ–∫—Ü–∏—è –æ—Ä–¥–µ—Ä–æ–≤"""
        orders_frame = tk.LabelFrame(parent, text="üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞", 
                                    bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'))
        orders_frame.pack(fill='x', padx=10, pady=5)
        
        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ä–¥–µ—Ä–æ–≤
        orders_tree_frame = tk.Frame(orders_frame, bg='#1e1e1e')
        orders_tree_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        orders_scrollbar = tk.Scrollbar(orders_tree_frame)
        orders_scrollbar.pack(side='right', fill='y')
        
        self.orders_tree = ttk.Treeview(orders_tree_frame, 
                                       yscrollcommand=orders_scrollbar.set,
                                       columns=('Symbol', 'Type', 'Side', 'Amount'),
                                       show='headings', height=6)
        
        self.orders_tree.heading('Symbol', text='–ü–∞—Ä–∞')
        self.orders_tree.heading('Type', text='–¢–∏–ø')
        self.orders_tree.heading('Side', text='–°—Ç–æ—Ä–æ–Ω–∞')
        self.orders_tree.heading('Amount', text='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        self.orders_tree.column('Symbol', width=80)
        self.orders_tree.column('Type', width=60)
        self.orders_tree.column('Side', width=60)
        self.orders_tree.column('Amount', width=80)
        
        self.orders_tree.pack(side='left', fill='both', expand=True)
        orders_scrollbar.config(command=self.orders_tree.yview)
    
    def create_performance_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        perf_frame = tk.LabelFrame(parent, text="üìä –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", 
                                  bg='#1e1e1e', fg='white', font=('Arial', 11, 'bold'))
        perf_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics_frame = tk.Frame(perf_frame, bg='#1e1e1e')
        metrics_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–æ–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫
        self.metrics_labels = {}
        metrics = [
            ('Total P&L', '$0.00', '#00ff88'),
            ('Win Rate', '0%', '#ffa500'),
            ('Sharpe Ratio', '0.00', '#3742fa'),
            ('Max Drawdown', '0%', '#ff4757'),
            ('Total Trades', '0', 'white')
        ]
        
        for i, (name, value, color) in enumerate(metrics):
            metric_frame = tk.Frame(metrics_frame, bg='#1e1e1e')
            metric_frame.pack(fill='x', pady=2)
            
            label = tk.Label(metric_frame, text=f"{name}:", 
                           bg='#1e1e1e', fg='white', font=('Arial', 10))
            label.pack(side='left')
            
            value_label = tk.Label(metric_frame, text=value, 
                                 bg='#1e1e1e', fg=color, font=('Arial', 10, 'bold'))
            value_label.pack(side='right')
            
            self.metrics_labels[name.lower().replace(' ', '_')] = value_label
    
    def create_analytics_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_frame = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(analytics_frame, text='üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞')
        
        tk.Label(analytics_frame, text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
        tk.Label(analytics_frame, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def create_backtest_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        backtest_frame = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(backtest_frame, text='üß™ –ë—ç–∫—Ç–µ—Å—Ç')
        
        tk.Label(backtest_frame, text="üß™ –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
        tk.Label(backtest_frame, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def create_positions_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ–∑–∏—Ü–∏–π"""
        positions_frame = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(positions_frame, text='üìà –ü–æ—Ä—Ç—Ñ–µ–ª—å')
        
        tk.Label(positions_frame, text="üìà –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
        tk.Label(positions_frame, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_frame = tk.Frame(self.notebook, bg='#1e1e1e')
        self.notebook.add(settings_frame, text='‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        
        tk.Label(settings_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 16, 'bold')).pack(pady=20)
        
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        tk.Label(settings_frame, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def create_status_bar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
        status_frame = tk.Frame(self.root, bg='#2d2d2d', height=25)
        status_frame.pack(fill='x', side='bottom')
        status_frame.pack_propagate(False)
        
        # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status = tk.Label(status_frame, text="üî¥ –û—Ç–∫–ª—é—á–µ–Ω", 
                                         bg='#2d2d2d', fg='#ff4757', font=('Arial', 9))
        self.connection_status.pack(side='left', padx=10)
        
        # –í—Ä–µ–º—è
        self.time_label = tk.Label(status_frame, text="", 
                                  bg='#2d2d2d', fg='white', font=('Arial', 9))
        self.time_label.pack(side='right', padx=10)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
        self.update_time()
    
    def create_notifications_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –≠—Ç–æ –±—É–¥–µ—Ç –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        pass
    
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π"""
        style = ttk.Style()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è Treeview
        style.configure('Treeview', 
                       background='#2d2d2d', 
                       foreground='white',
                       fieldbackground='#2d2d2d',
                       borderwidth=0)
        style.configure('Treeview.Heading', 
                       background='#3742fa', 
                       foreground='white',
                       borderwidth=1)
        style.map('Treeview', 
                 background=[('selected', '#3742fa')])
    
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-n>', lambda e: self.new_session())
        self.root.bind('<Control-s>', lambda e: self.save_config())
        self.root.bind('<Control-o>', lambda e: self.load_config())
        self.root.bind('<F5>', lambda e: self.refresh_data())
        self.root.bind('<F9>', lambda e: self.start_trading())
        self.root.bind('<F10>', lambda e: self.stop_trading())
        self.root.bind('<F1>', lambda e: self.show_help())
        self.root.bind('<F11>', lambda e: self.toggle_fullscreen())
        self.root.bind('<Escape>', lambda e: self.emergency_stop())
    
    def start_update_cycles(self):
        """–ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.update_data_cycle()
        self.update_time()
    
    def update_data_cycle(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if self.is_trading_active:
            self.update_positions()
            self.update_orders()
            self.update_performance_metrics()
            if ADVANCED_FEATURES:
                self.update_charts()
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.root.after(self.update_interval, self.update_data_cycle)
    
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.time_label.config(text=current_time)
        self.root.after(1000, self.update_time)
    
    # –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    def update_positions(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.positions_tree.get_children():
            self.positions_tree.delete(item)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
        positions = [
            ("BTC/USDT", "Long", "0.1", "+$150.00"),
            ("ETH/USDT", "Short", "2.5", "-$75.00")
        ]
        
        for position in positions:
            self.positions_tree.insert('', 'end', values=position)
    
    def update_orders(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        for item in self.orders_tree.get_children():
            self.orders_tree.delete(item)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–æ–≤ (–º–æ–∫-–¥–∞–Ω–Ω—ã–µ)
        orders = [
            ("BTC/USDT", "Limit", "Buy", "0.05"),
            ("ETH/USDT", "Stop", "Sell", "1.0")
        ]
        
        for order in orders:
            self.orders_tree.insert('', 'end', values=order)
    
    def update_performance_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # –ú–æ–∫-–¥–∞–Ω–Ω—ã–µ
        metrics = {
            'total_p&l': '+$150.75',
            'win_rate': '65%',
            'sharpe_ratio': '1.25',
            'max_drawdown': '-5.2%',
            'total_trades': '8'
        }
        
        for key, value in metrics.items():
            if key in self.metrics_labels:
                self.metrics_labels[key].config(text=value)
    
    def update_charts(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        self.update_price_chart()
        self.update_pnl_chart()
        self.update_distribution_chart()
    
    def update_price_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω—ã"""
        if not ADVANCED_FEATURES:
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
        x = np.linspace(0, 100, 100)
        y = 45000 + np.cumsum(np.random.randn(100) * 50)
        
        self.price_ax.clear()
        self.price_ax.plot(x, y, color='#00ff88', linewidth=2)
        self.price_ax.set_title('BTC/USDT Price', color='white', fontsize=12)
        self.price_ax.set_facecolor('#2d2d2d')
        self.price_ax.tick_params(colors='white')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∞–π–Ω–æ–≤
        for spine in self.price_ax.spines.values():
            spine.set_color('white')
        
        self.price_canvas.draw()
    
    def update_pnl_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ P&L"""
        if not ADVANCED_FEATURES:
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
        x = np.linspace(0, 100, 100)
        y = np.cumsum(np.random.randn(100) * 10)
        
        self.pnl_ax.clear()
        colors = ['#ff4757' if val < 0 else '#00ff88' for val in y]
        self.pnl_ax.plot(x, y, color='#3742fa', linewidth=2)
        self.pnl_ax.fill_between(x, y, 0, alpha=0.3, color='#3742fa')
        self.pnl_ax.set_title('P&L History', color='white', fontsize=12)
        self.pnl_ax.set_facecolor('#2d2d2d')
        self.pnl_ax.tick_params(colors='white')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∞–π–Ω–æ–≤
        for spine in self.pnl_ax.spines.values():
            spine.set_color('white')
        
        self.pnl_canvas.draw()
    
    def update_distribution_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π"""
        if not ADVANCED_FEATURES:
            return
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ–∫-–¥–∞–Ω–Ω—ã—Ö
        returns = np.random.normal(0, 1, 1000)
        
        self.dist_ax.clear()
        self.dist_ax.hist(returns, bins=50, color='#3742fa', alpha=0.7, edgecolor='white')
        self.dist_ax.set_title('Returns Distribution', color='white', fontsize=12)
        self.dist_ax.set_facecolor('#2d2d2d')
        self.dist_ax.tick_params(colors='white')
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∞–π–Ω–æ–≤
        for spine in self.dist_ax.spines.values():
            spine.set_color('white')
        
        self.dist_canvas.draw()
    
    # –ú–µ—Ç–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–µ–π
    def toggle_trading(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.is_trading_active:
            self.stop_trading()
        else:
            self.start_trading()
    
    def start_trading(self):
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if not self.is_trading_active:
            self.is_trading_active = True
            self.trade_button.config(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", bg='#ff4757')
            self.connection_status.config(text="üü¢ –ê–∫—Ç–∏–≤–µ–Ω", fg='#00ff88')
            self.logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞")
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
            messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è", "–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        if self.is_trading_active:
            self.is_trading_active = False
            self.trade_button.config(text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å", bg='#00ff88')
            self.connection_status.config(text="üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", fg='#ff4757')
            self.logger.info("–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            messagebox.showinfo("–¢–æ—Ä–≥–æ–≤–ª—è", "–¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def emergency_stop(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        self.stop_trading()
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
        messagebox.showwarning("–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞", 
                              "–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏!\n–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ—Ä–≤–∞–Ω—ã.")
    
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç"""
        # –í—ã–±–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.pairs_listbox.selection_set(0, 2)  # BTC, ETH, BNB
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        self.strategy_vars["RSI Bounce"].set(True)
        self.strategy_vars["MACD Cross"].set(True)
        
        # –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–ª–∏
        self.start_trading()
    
    # –ú–µ—Ç–æ–¥—ã –º–µ–Ω—é
    def new_session(self):
        """–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è"""
        if messagebox.askyesno("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã."):
            # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
            self.stop_trading()
            self.clear_pairs_selection()
            for var in self.strategy_vars.values():
                var.set(False)
            messagebox.showinfo("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", "–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            'selected_pairs': [self.pairs_listbox.get(i) for i in self.pairs_listbox.curselection()],
            'active_strategies': [name for name, var in self.strategy_vars.items() if var.get()],
            'position_size': float(self.position_size_var.get()),
            'stop_loss': float(self.stop_loss_var.get()),
            'take_profit': float(self.take_profit_var.get()),
            'mode': self.mode_var.get()
        }
        
        filename = filedialog.asksaveasfilename(
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(config, f, indent=2, ensure_ascii=False)
                messagebox.showinfo("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n{filename}")
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{e}")
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        filename = filedialog.askopenfilename(
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")],
            title="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
        )
        
        if filename:
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                if 'mode' in config:
                    self.mode_var.set(config['mode'])
                
                if 'position_size' in config:
                    self.position_size_var.set(str(config['position_size']))
                
                if 'stop_loss' in config:
                    self.stop_loss_var.set(str(config['stop_loss']))
                
                if 'take_profit' in config:
                    self.take_profit_var.set(str(config['take_profit']))
                
                messagebox.showinfo("–ó–∞–≥—Ä—É–∑–∫–∞", f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:\n{filename}")
                
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{e}")
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def import_strategies(self):
        """–ò–º–ø–æ—Ä—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        messagebox.showinfo("–ò–º–ø–æ—Ä—Ç", "–§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def strategy_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        messagebox.showinfo("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π", "–î–µ—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def risk_settings(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏"""
        messagebox.showinfo("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏", "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def close_all_positions(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π"""
        if messagebox.askyesno("–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π", "–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏?"):
            messagebox.showinfo("–ü–æ–∑–∏—Ü–∏–∏", "–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫—Ä—ã—Ç—ã")
    
    def cancel_all_orders(self):
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤"""
        if messagebox.askyesno("–û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–æ–≤", "–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞?"):
            messagebox.showinfo("–û—Ä–¥–µ—Ä–∞", "–í—Å–µ –æ—Ä–¥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω—ã")
    
    def performance_report(self):
        """–û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        messagebox.showinfo("–û—Ç—á–µ—Ç", "–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def risk_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤"""
        messagebox.showinfo("–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤", "–ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def strategy_optimization(self):
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        messagebox.showinfo("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def export_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        messagebox.showinfo("Excel", "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def generate_pdf_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
        messagebox.showinfo("PDF", "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def position_calculator(self):
        """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π"""
        calc_window = tk.Toplevel(self.root)
        calc_window.title("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π")
        calc_window.geometry("400x300")
        calc_window.configure(bg='#1e1e1e')
        
        tk.Label(calc_window, text="üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–∑–∏—Ü–∏–π", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 14, 'bold')).pack(pady=20)
        
        tk.Label(calc_window, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def currency_converter(self):
        """–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç"""
        messagebox.showinfo("–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤–∞–ª—é—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def economic_calendar(self):
        """–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
        messagebox.showinfo("–ö–∞–ª–µ–Ω–¥–∞—Ä—å", "–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = tk.Toplevel(self.root)
        settings_window.title("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_window.geometry("500x400")
        settings_window.configure(bg='#1e1e1e')
        
        tk.Label(settings_window, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 14, 'bold')).pack(pady=20)
        
        tk.Label(settings_window, text="–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...", 
                bg='#1e1e1e', fg='white', font=('Arial', 12)).pack()
    
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_window = tk.Toplevel(self.root)
        help_window.title("üìö –°–ø—Ä–∞–≤–∫–∞ ATB Trading Dashboard")
        help_window.geometry("600x500")
        help_window.configure(bg='#1e1e1e')
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–ø—Ä–∞–≤–∫–∏
        help_text = tk.Text(help_window, bg='#2d2d2d', fg='white', 
                           font=('Arial', 11), wrap='word',
                           insertbackground='white')
        help_text.pack(fill='both', expand=True, padx=10, pady=10)
        
        help_content = """
üìö ATB Trading Dashboard v2.0 - –°–ø—Ä–∞–≤–∫–∞

üéØ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò:
‚Ä¢ –¢–æ—Ä–≥–æ–≤–ª—è –≤ —Ä–µ–∂–∏–º–∞—Ö: —Å–∏–º—É–ª—è—Ü–∏—è, —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è, –±—ç–∫—Ç–µ—Å—Ç
‚Ä¢ 6 –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏ –∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º
‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

üéÆ –£–ü–†–ê–í–õ–ï–ù–ò–ï:
‚Ä¢ F9 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
‚Ä¢ F10 - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
‚Ä¢ F5 - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
‚Ä¢ F1 - –°–ø—Ä–∞–≤–∫–∞
‚Ä¢ F11 - –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ Esc - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ê:
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –ø–∞—Ä—ã –≤ –ª–µ–≤–æ–π –ø–∞–Ω–µ–ª–∏
2. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –Ω—É–∂–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞
4. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏
5. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–ø—É—Å—Ç–∏—Ç—å"

üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨:
‚Ä¢ –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π—Ç–µ —Å —Ä–µ–∂–∏–º–∞ "simulation"
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑—É–º–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–æ–∑–∏—Ü–∏–π (1-3%)
‚Ä¢ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
‚Ä¢ Email: support@atb-trading.com
‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: README.md
‚Ä¢ –õ–æ–≥–∏: logs/dashboard.log
        """
        
        help_text.insert('1.0', help_content.strip())
        help_text.config(state='disabled')
    
    def show_hotkeys(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏"""
        hotkeys_window = tk.Toplevel(self.root)
        hotkeys_window.title("üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏")
        hotkeys_window.geometry("400x300")
        hotkeys_window.configure(bg='#1e1e1e')
        
        tk.Label(hotkeys_window, text="üî• –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 14, 'bold')).pack(pady=20)
        
        hotkeys_text = """
F1 - –°–ø—Ä–∞–≤–∫–∞
F5 - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
F9 - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
F10 - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
F11 - –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º
Esc - –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞

Ctrl+N - –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è
Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
Ctrl+O - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

Alt+F4 - –í—ã—Ö–æ–¥
        """
        
        tk.Label(hotkeys_window, text=hotkeys_text.strip(), 
                bg='#1e1e1e', fg='white', font=('Arial', 11), justify='left').pack(pady=10)
    
    def show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_window = tk.Toplevel(self.root)
        about_window.title("üÜî –û –ø—Ä–æ–≥—Ä–∞–º–º–µ")
        about_window.geometry("400x300")
        about_window.configure(bg='#1e1e1e')
        
        tk.Label(about_window, text="‚ö° ATB Trading Dashboard", 
                bg='#1e1e1e', fg='#3742fa', font=('Arial', 16, 'bold')).pack(pady=20)
        
        about_text = """
–í–µ—Ä—Å–∏—è: 2.0 Advanced Edition

–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ —Å –ø–æ–ª–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
—É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

¬© 2024 ATB Trading Systems
–í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º:
‚Ä¢ Python 3.8+
‚Ä¢ Tkinter GUI
‚Ä¢ Matplotlib (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
‚Ä¢ NumPy, Pandas (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        
        tk.Label(about_window, text=about_text.strip(), 
                bg='#1e1e1e', fg='white', font=('Arial', 11), justify='center').pack(pady=10)
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.update_positions()
        self.update_orders()
        self.update_performance_metrics()
        if ADVANCED_FEATURES:
            self.update_charts()
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        self.show_notification("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", "success")
    
    def toggle_fullscreen(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        current_state = self.root.attributes('-fullscreen')
        self.root.attributes('-fullscreen', not current_state)
    
    def show_notification(self, message, type_="info"):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
        colors = {
            "info": "#3742fa",
            "success": "#00ff88",
            "warning": "#ffa500",
            "error": "#ff4757"
        }
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        original_text = self.connection_status.cget('text')
        original_color = self.connection_status.cget('fg')
        
        self.connection_status.config(text=message, fg=colors.get(type_, "#3742fa"))
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        self.root.after(3000, lambda: self.connection_status.config(text=original_text, fg=original_color))
    
    # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    def populate_pairs_list(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        pairs = [
            "BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT",
            "SOL/USDT", "DOT/USDT", "MATIC/USDT", "LINK/USDT",
            "AVAX/USDT", "UNI/USDT", "ATOM/USDT", "FTM/USDT",
            "NEAR/USDT", "ALGO/USDT", "XRP/USDT", "LTC/USDT"
        ]
        
        for pair in pairs:
            self.pairs_listbox.insert('end', pair)
    
    def filter_pairs(self, event=None):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä"""
        search_term = self.pairs_search.get().upper()
        
        # –û—á–∏—Å—Ç–∫–∞ —Å–ø–∏—Å–∫–∞
        self.pairs_listbox.delete(0, 'end')
        
        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
        all_pairs = [
            "BTC/USDT", "ETH/USDT", "BNB/USDT", "ADA/USDT",
            "SOL/USDT", "DOT/USDT", "MATIC/USDT", "LINK/USDT",
            "AVAX/USDT", "UNI/USDT", "ATOM/USDT", "FTM/USDT",
            "NEAR/USDT", "ALGO/USDT", "XRP/USDT", "LTC/USDT"
        ]
        
        for pair in all_pairs:
            if search_term in pair.upper():
                self.pairs_listbox.insert('end', pair)
    
    def select_all_pairs(self):
        """–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä—ã"""
        self.pairs_listbox.selection_set(0, 'end')
    
    def clear_pairs_selection(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—ã–±–æ—Ä –ø–∞—Ä"""
        self.pairs_listbox.selection_clear(0, 'end')
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–ó–∞–∫—Ä—ã—Ç—å ATB Trading Dashboard?"):
            if self.is_trading_active:
                self.stop_trading()
            self.logger.info("–î–∞—à–±–æ—Ä–¥ –∑–∞–∫—Ä—ã—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            self.root.destroy()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞")
            self.root.mainloop()
        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
            messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n{e}")

def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        dashboard = AdvancedTradingDashboard()
        dashboard.run()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()