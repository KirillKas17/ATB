"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ Windows –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ATB Trading —Å –≤–∫–ª–∞–¥–∫–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
–∏ —Ñ–æ—Ä–º–æ–π –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è API –∫–ª—é—á–µ–π –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
"""

import sys
import os
import json
import asyncio
import threading
import time
import random
from datetime import datetime, timedelta
from decimal import Decimal
from pathlib import Path
from typing import Dict, List, Any, Optional
import configparser

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, simpledialog
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.figure import Figure
import numpy as np
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# Apple-style —Ç–µ–º–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞
COLORS = {
    'bg_primary': '#000000',        # –ß–µ—Ä–Ω—ã–π —Ñ–æ–Ω
    'bg_secondary': '#1C1C1E',      # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
    'bg_tertiary': '#2C2C2E',       # –°–µ—Ä—ã–π
    'accent_blue': '#007AFF',       # Apple Blue
    'accent_green': '#30D158',      # Apple Green (–ø—Ä–∏–±—ã–ª—å)
    'accent_red': '#FF453A',        # Apple Red (—É–±—ã—Ç–æ–∫)
    'accent_orange': '#FF9F0A',     # Apple Orange (–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è)
    'accent_purple': '#AF52DE',     # Apple Purple (AI/ML)
    'text_primary': '#FFFFFF',      # –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç
    'text_secondary': '#8E8E93',    # –°–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    'text_tertiary': '#48484A',     # –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ç–µ–∫—Å—Ç
    'separator': '#38383A',         # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
}

class ConfigManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏ API –∫–ª—é—á–µ–π"""
    
    def __init__(self):
        self.config_file = Path("config/atb_settings.json")
        self.config_file.parent.mkdir(exist_ok=True)
        self.config = self.load_config()
        
    def load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        default_config = {
            "api_settings": {
                "bybit_api_key": "",
                "bybit_secret_key": "",
                "binance_api_key": "",
                "binance_secret_key": "",
                "coinbase_api_key": "",
                "coinbase_secret_key": "",
                "telegram_bot_token": "",
                "telegram_chat_id": "",
                "discord_webhook_url": ""
            },
            "trading_settings": {
                "default_risk_percentage": 2.0,
                "max_positions": 5,
                "stop_loss_percentage": 2.5,
                "take_profit_percentage": 5.0,
                "enable_trailing_stop": True,
                "trailing_stop_percentage": 1.0
            },
            "dashboard_settings": {
                "update_interval_ms": 500,
                "show_animations": True,
                "theme": "dark",
                "auto_save_charts": True,
                "chart_history_length": 100
            },
            "notification_settings": {
                "enable_sound": True,
                "enable_popup": True,
                "enable_telegram": False,
                "enable_discord": False,
                "sound_file": "sounds/notification.wav"
            },
            "demo_data": {
                "portfolio_value": 50000.0,
                "daily_pnl": 1250.0,
                "win_rate": 68.5,
                "active_positions": 8,
                "ai_confidence": 87.3,
                "market_sentiment": 65.2,
                "volatility": 23.4
            }
        }
        
        if self.config_file.exists():
            try:
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    loaded_config = json.load(f)
                    # Merge with default config to add missing keys
                    for section, values in default_config.items():
                        if section not in loaded_config:
                            loaded_config[section] = values
                        else:
                            for key, value in values.items():
                                if key not in loaded_config[section]:
                                    loaded_config[section][key] = value
                    return loaded_config
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
        
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(self.config, f, indent=4, ensure_ascii=False)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
            
    def get(self, section: str, key: str, default=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self.config.get(section, {}).get(key, default)
        
    def set(self, section: str, key: str, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        if section not in self.config:
            self.config[section] = {}
        self.config[section][key] = value
        
    def get_section(self, section: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ–π —Å–µ–∫—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return self.config.get(section, {})

class SettingsWindow:
    """–û–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ API –∫–ª—é—á–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    
    def __init__(self, parent, config_manager: ConfigManager):
        self.parent = parent
        self.config_manager = config_manager
        self.window = None
        self.widgets = {}
        
    def show(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.window is not None:
            self.window.lift()
            return
            
        self.window = tk.Toplevel(self.parent)
        self.window.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ATB Trading")
        self.window.geometry("800x700")
        self.window.configure(bg=COLORS['bg_secondary'])
        
        # –î–µ–ª–∞–µ–º –æ–∫–Ω–æ –º–æ–¥–∞–ª—å–Ω—ã–º
        self.window.transient(self.parent)
        self.window.grab_set()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.window.protocol("WM_DELETE_WINDOW", self.on_close)
        
        self.create_widgets()
        
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.window, bg=COLORS['bg_secondary'])
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ATB Trading System",
                             bg=COLORS['bg_secondary'], fg=COLORS['text_primary'],
                             font=('Arial', 16, 'bold'))
        title_label.pack(pady=(0, 20))
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TNotebook', background=COLORS['bg_secondary'])
        style.configure('TNotebook.Tab', background=COLORS['bg_tertiary'], 
                       foreground=COLORS['text_primary'])
        
        # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.create_api_tab()
        self.create_trading_tab()
        self.create_dashboard_tab()
        self.create_notifications_tab()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(main_frame, bg=COLORS['bg_secondary'])
        buttons_frame.pack(fill='x', pady=(20, 0))
        
        tk.Button(buttons_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_settings,
                 bg=COLORS['accent_blue'], fg='white', font=('Arial', 10, 'bold'),
                 padx=20, pady=5).pack(side='left', padx=(0, 10))
                 
        tk.Button(buttons_frame, text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å", command=self.reset_settings,
                 bg=COLORS['accent_orange'], fg='white', font=('Arial', 10, 'bold'),
                 padx=20, pady=5).pack(side='left', padx=(0, 10))
                 
        tk.Button(buttons_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=self.on_close,
                 bg=COLORS['accent_red'], fg='white', font=('Arial', 10, 'bold'),
                 padx=20, pady=5).pack(side='right')
        
    def create_api_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API"""
        api_frame = tk.Frame(self.notebook, bg=COLORS['bg_secondary'])
        self.notebook.add(api_frame, text="üîë API –ö–ª—é—á–∏")
        
        # Scrollable frame
        canvas = tk.Canvas(api_frame, bg=COLORS['bg_secondary'])
        scrollbar = ttk.Scrollbar(api_frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg=COLORS['bg_secondary'])
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        api_settings = self.config_manager.get_section("api_settings")
        
        # Bybit
        self.create_api_section(scrollable_frame, "Bybit", "bybit", {
            "api_key": api_settings.get("bybit_api_key", ""),
            "secret_key": api_settings.get("bybit_secret_key", "")
        })
        
        # Binance
        self.create_api_section(scrollable_frame, "Binance", "binance", {
            "api_key": api_settings.get("binance_api_key", ""),
            "secret_key": api_settings.get("binance_secret_key", "")
        })
        
        # Coinbase
        self.create_api_section(scrollable_frame, "Coinbase Pro", "coinbase", {
            "api_key": api_settings.get("coinbase_api_key", ""),
            "secret_key": api_settings.get("coinbase_secret_key", "")
        })
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.create_notification_section(scrollable_frame, api_settings)
        
    def create_api_section(self, parent, exchange_name, key_prefix, values):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –±–∏—Ä–∂–∏"""
        # –†–∞–º–∫–∞ –¥–ª—è –±–∏—Ä–∂–∏
        exchange_frame = tk.LabelFrame(parent, text=f"üìà {exchange_name}",
                                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                                      font=('Arial', 11, 'bold'), pady=10)
        exchange_frame.pack(fill='x', padx=10, pady=10)
        
        # API Key
        tk.Label(exchange_frame, text="API Key:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary'], font=('Arial', 9)).grid(row=0, column=0, sticky='w', padx=10)
        
        api_key_var = tk.StringVar(value=values.get("api_key", ""))
        api_key_entry = tk.Entry(exchange_frame, textvariable=api_key_var, width=50,
                               show="*" if values.get("api_key") else None)
        api_key_entry.grid(row=0, column=1, padx=10, pady=5, sticky='ew')
        self.widgets[f"{key_prefix}_api_key"] = api_key_var
        
        # Secret Key
        tk.Label(exchange_frame, text="Secret Key:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary'], font=('Arial', 9)).grid(row=1, column=0, sticky='w', padx=10)
        
        secret_key_var = tk.StringVar(value=values.get("secret_key", ""))
        secret_key_entry = tk.Entry(exchange_frame, textvariable=secret_key_var, width=50,
                                  show="*" if values.get("secret_key") else None)
        secret_key_entry.grid(row=1, column=1, padx=10, pady=5, sticky='ew')
        self.widgets[f"{key_prefix}_secret_key"] = secret_key_var
        
        # –ö–Ω–æ–ø–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        tk.Button(exchange_frame, text="üß™ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                 command=lambda: self.test_api_connection(exchange_name),
                 bg=COLORS['accent_blue'], fg='white', font=('Arial', 8)).grid(row=2, column=1, pady=5, sticky='e')
        
        exchange_frame.grid_columnconfigure(1, weight=1)
        
    def create_notification_section(self, parent, api_settings):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notif_frame = tk.LabelFrame(parent, text="üì¨ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                                   bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                                   font=('Arial', 11, 'bold'), pady=10)
        notif_frame.pack(fill='x', padx=10, pady=10)
        
        # Telegram
        tk.Label(notif_frame, text="Telegram Bot Token:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=0, column=0, sticky='w', padx=10)
        
        telegram_token_var = tk.StringVar(value=api_settings.get("telegram_bot_token", ""))
        tk.Entry(notif_frame, textvariable=telegram_token_var, width=50).grid(row=0, column=1, padx=10, pady=2, sticky='ew')
        self.widgets["telegram_bot_token"] = telegram_token_var
        
        tk.Label(notif_frame, text="Telegram Chat ID:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=1, column=0, sticky='w', padx=10)
        
        telegram_chat_var = tk.StringVar(value=api_settings.get("telegram_chat_id", ""))
        tk.Entry(notif_frame, textvariable=telegram_chat_var, width=50).grid(row=1, column=1, padx=10, pady=2, sticky='ew')
        self.widgets["telegram_chat_id"] = telegram_chat_var
        
        # Discord
        tk.Label(notif_frame, text="Discord Webhook URL:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=2, column=0, sticky='w', padx=10)
        
        discord_webhook_var = tk.StringVar(value=api_settings.get("discord_webhook_url", ""))
        tk.Entry(notif_frame, textvariable=discord_webhook_var, width=50).grid(row=2, column=1, padx=10, pady=2, sticky='ew')
        self.widgets["discord_webhook_url"] = discord_webhook_var
        
        notif_frame.grid_columnconfigure(1, weight=1)
        
    def create_trading_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        trading_frame = tk.Frame(self.notebook, bg=COLORS['bg_secondary'])
        self.notebook.add(trading_frame, text="üí∞ –¢–æ—Ä–≥–æ–≤–ª—è")
        
        trading_settings = self.config_manager.get_section("trading_settings")
        
        # –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç
        risk_frame = tk.LabelFrame(trading_frame, text="‚öñÔ∏è –†–∏—Å–∫-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç",
                                  bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                                  font=('Arial', 11, 'bold'))
        risk_frame.pack(fill='x', padx=10, pady=10)
        
        # –†–∞–∑–º–µ—Ä —Ä–∏—Å–∫–∞
        tk.Label(risk_frame, text="–†–∏—Å–∫ –Ω–∞ —Å–¥–µ–ª–∫—É (%):", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=0, column=0, sticky='w', padx=10, pady=5)
        
        risk_var = tk.DoubleVar(value=trading_settings.get("default_risk_percentage", 2.0))
        risk_spinbox = tk.Spinbox(risk_frame, from_=0.1, to=10.0, increment=0.1, 
                                 textvariable=risk_var, width=10)
        risk_spinbox.grid(row=0, column=1, padx=10, pady=5, sticky='w')
        self.widgets["default_risk_percentage"] = risk_var
        
        # –ú–∞–∫—Å–∏–º—É–º –ø–æ–∑–∏—Ü–∏–π
        tk.Label(risk_frame, text="–ú–∞–∫—Å. –ø–æ–∑–∏—Ü–∏–π:", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=1, column=0, sticky='w', padx=10, pady=5)
        
        max_positions_var = tk.IntVar(value=trading_settings.get("max_positions", 5))
        tk.Spinbox(risk_frame, from_=1, to=20, textvariable=max_positions_var, width=10).grid(row=1, column=1, padx=10, pady=5, sticky='w')
        self.widgets["max_positions"] = max_positions_var
        
        # –°—Ç–æ–ø-–ª–æ—Å—Å
        tk.Label(risk_frame, text="–°—Ç–æ–ø-–ª–æ—Å—Å (%):", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=2, column=0, sticky='w', padx=10, pady=5)
        
        stop_loss_var = tk.DoubleVar(value=trading_settings.get("stop_loss_percentage", 2.5))
        tk.Spinbox(risk_frame, from_=0.5, to=10.0, increment=0.1, 
                  textvariable=stop_loss_var, width=10).grid(row=2, column=1, padx=10, pady=5, sticky='w')
        self.widgets["stop_loss_percentage"] = stop_loss_var
        
        # –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        tk.Label(risk_frame, text="–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç (%):", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=3, column=0, sticky='w', padx=10, pady=5)
        
        take_profit_var = tk.DoubleVar(value=trading_settings.get("take_profit_percentage", 5.0))
        tk.Spinbox(risk_frame, from_=1.0, to=20.0, increment=0.1, 
                  textvariable=take_profit_var, width=10).grid(row=3, column=1, padx=10, pady=5, sticky='w')
        self.widgets["take_profit_percentage"] = take_profit_var
        
        # –¢—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø
        trailing_var = tk.BooleanVar(value=trading_settings.get("enable_trailing_stop", True))
        tk.Checkbutton(risk_frame, text="–í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–π–ª–∏–Ω–≥ —Å—Ç–æ–ø", variable=trailing_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).grid(row=4, column=0, columnspan=2, sticky='w', padx=10, pady=5)
        self.widgets["enable_trailing_stop"] = trailing_var
        
    def create_dashboard_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–∞—à–±–æ—Ä–¥–∞"""
        dashboard_frame = tk.Frame(self.notebook, bg=COLORS['bg_secondary'])
        self.notebook.add(dashboard_frame, text="üìä –î–∞—à–±–æ—Ä–¥")
        
        dashboard_settings = self.config_manager.get_section("dashboard_settings")
        
        # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        ui_frame = tk.LabelFrame(dashboard_frame, text="üé® –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                                bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                                font=('Arial', 11, 'bold'))
        ui_frame.pack(fill='x', padx=10, pady=10)
        
        # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        tk.Label(ui_frame, text="–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º—Å):", bg=COLORS['bg_tertiary'],
                fg=COLORS['text_secondary']).grid(row=0, column=0, sticky='w', padx=10, pady=5)
        
        update_interval_var = tk.IntVar(value=dashboard_settings.get("update_interval_ms", 500))
        tk.Spinbox(ui_frame, from_=100, to=5000, increment=100, 
                  textvariable=update_interval_var, width=10).grid(row=0, column=1, padx=10, pady=5, sticky='w')
        self.widgets["update_interval_ms"] = update_interval_var
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏
        animations_var = tk.BooleanVar(value=dashboard_settings.get("show_animations", True))
        tk.Checkbutton(ui_frame, text="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏", variable=animations_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).grid(row=1, column=0, columnspan=2, sticky='w', padx=10, pady=5)
        self.widgets["show_animations"] = animations_var
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        auto_save_var = tk.BooleanVar(value=dashboard_settings.get("auto_save_charts", True))
        tk.Checkbutton(ui_frame, text="–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤", variable=auto_save_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).grid(row=2, column=0, columnspan=2, sticky='w', padx=10, pady=5)
        self.widgets["auto_save_charts"] = auto_save_var
        
    def create_notifications_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notif_frame = tk.Frame(self.notebook, bg=COLORS['bg_secondary'])
        self.notebook.add(notif_frame, text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        
        notif_settings = self.config_manager.get_section("notification_settings")
        
        # –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        types_frame = tk.LabelFrame(notif_frame, text="üîä –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                                   bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                                   font=('Arial', 11, 'bold'))
        types_frame.pack(fill='x', padx=10, pady=10)
        
        # –ó–≤—É–∫
        sound_var = tk.BooleanVar(value=notif_settings.get("enable_sound", True))
        tk.Checkbutton(types_frame, text="üîä –ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", variable=sound_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).pack(anchor='w', padx=10, pady=2)
        self.widgets["enable_sound"] = sound_var
        
        # Popup
        popup_var = tk.BooleanVar(value=notif_settings.get("enable_popup", True))
        tk.Checkbutton(types_frame, text="üí¨ –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞", variable=popup_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).pack(anchor='w', padx=10, pady=2)
        self.widgets["enable_popup"] = popup_var
        
        # Telegram
        telegram_var = tk.BooleanVar(value=notif_settings.get("enable_telegram", False))
        tk.Checkbutton(types_frame, text="üì± Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", variable=telegram_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).pack(anchor='w', padx=10, pady=2)
        self.widgets["enable_telegram"] = telegram_var
        
        # Discord
        discord_var = tk.BooleanVar(value=notif_settings.get("enable_discord", False))
        tk.Checkbutton(types_frame, text="üéÆ Discord —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", variable=discord_var,
                      bg=COLORS['bg_tertiary'], fg=COLORS['text_primary'],
                      selectcolor=COLORS['bg_secondary']).pack(anchor='w', padx=10, pady=2)
        self.widgets["enable_discord"] = discord_var
        
    def test_api_connection(self, exchange_name):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API"""
        messagebox.showinfo("–¢–µ—Å—Ç API", f"–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {exchange_name}...\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
    def save_settings(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            # API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            self.config_manager.set("api_settings", "bybit_api_key", self.widgets["bybit_api_key"].get())
            self.config_manager.set("api_settings", "bybit_secret_key", self.widgets["bybit_secret_key"].get())
            self.config_manager.set("api_settings", "binance_api_key", self.widgets["binance_api_key"].get())
            self.config_manager.set("api_settings", "binance_secret_key", self.widgets["binance_secret_key"].get())
            self.config_manager.set("api_settings", "coinbase_api_key", self.widgets["coinbase_api_key"].get())
            self.config_manager.set("api_settings", "coinbase_secret_key", self.widgets["coinbase_secret_key"].get())
            self.config_manager.set("api_settings", "telegram_bot_token", self.widgets["telegram_bot_token"].get())
            self.config_manager.set("api_settings", "telegram_chat_id", self.widgets["telegram_chat_id"].get())
            self.config_manager.set("api_settings", "discord_webhook_url", self.widgets["discord_webhook_url"].get())
            
            # –¢–æ—Ä–≥–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if "default_risk_percentage" in self.widgets:
                self.config_manager.set("trading_settings", "default_risk_percentage", self.widgets["default_risk_percentage"].get())
                self.config_manager.set("trading_settings", "max_positions", self.widgets["max_positions"].get())
                self.config_manager.set("trading_settings", "stop_loss_percentage", self.widgets["stop_loss_percentage"].get())
                self.config_manager.set("trading_settings", "take_profit_percentage", self.widgets["take_profit_percentage"].get())
                self.config_manager.set("trading_settings", "enable_trailing_stop", self.widgets["enable_trailing_stop"].get())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∞—à–±–æ—Ä–¥–∞
            if "update_interval_ms" in self.widgets:
                self.config_manager.set("dashboard_settings", "update_interval_ms", self.widgets["update_interval_ms"].get())
                self.config_manager.set("dashboard_settings", "show_animations", self.widgets["show_animations"].get())
                self.config_manager.set("dashboard_settings", "auto_save_charts", self.widgets["auto_save_charts"].get())
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if "enable_sound" in self.widgets:
                self.config_manager.set("notification_settings", "enable_sound", self.widgets["enable_sound"].get())
                self.config_manager.set("notification_settings", "enable_popup", self.widgets["enable_popup"].get())
                self.config_manager.set("notification_settings", "enable_telegram", self.widgets["enable_telegram"].get())
                self.config_manager.set("notification_settings", "enable_discord", self.widgets["enable_discord"].get())
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
            if self.config_manager.save_config():
                messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                self.on_close()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
            
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        if messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?"):
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º
            if self.config_manager.config_file.exists():
                self.config_manager.config_file.unlink()
            self.config_manager.config = self.config_manager.load_config()
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            self.on_close()
            
    def on_close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        if self.window:
            self.window.grab_release()
            self.window.destroy()
            self.window = None

class LiveDemoTab:
    """–í–∫–ª–∞–¥–∫–∞ —Å live-–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è Twitch"""
    
    def __init__(self, parent_notebook, config_manager: ConfigManager):
        self.parent_notebook = parent_notebook
        self.config_manager = config_manager
        self.is_running = False
        self.update_thread = None
        
        # Live –¥–∞–Ω–Ω—ã–µ
        demo_data = config_manager.get_section("demo_data")
        self.live_data = {
            'portfolio_value': demo_data.get('portfolio_value', 50000.0),
            'daily_pnl': demo_data.get('daily_pnl', 1250.0),
            'total_trades': 127,
            'win_rate': demo_data.get('win_rate', 68.5),
            'active_positions': demo_data.get('active_positions', 8),
            'ai_confidence': demo_data.get('ai_confidence', 87.3),
            'market_sentiment': demo_data.get('market_sentiment', 65.2),
            'volatility': demo_data.get('volatility', 23.4),
            'prices': {
                'BTCUSDT': 42150.0,
                'ETHUSDT': 2580.0,
                'ADAUSDT': 0.485,
                'SOLUSDT': 98.45,
            },
            'orderbook_data': [],
            'trade_history': [],
            'ai_signals': [],
        }
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.price_history = {symbol: [] for symbol in self.live_data['prices']}
        self.pnl_history = []
        
        self.create_tab()
        
    def create_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ demo –¥–∞—à–±–æ—Ä–¥–∞"""
        # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        self.demo_frame = tk.Frame(self.parent_notebook, bg=COLORS['bg_primary'])
        self.parent_notebook.add(self.demo_frame, text="üì∫ Live Demo")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å controls
        self.create_header()
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        self.create_main_content()
        
    def create_header(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        header_frame = tk.Frame(self.demo_frame, bg=COLORS['bg_primary'], height=60)
        header_frame.pack(fill='x', padx=20, pady=(20, 0))
        header_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(header_frame, text="üì∫ ATB Trading System - Live Demo",
                              bg=COLORS['bg_primary'], fg=COLORS['text_primary'],
                              font=('Arial', 18, 'bold'))
        title_label.pack(side='left', pady=15)
        
        # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_frame = tk.Frame(header_frame, bg=COLORS['bg_primary'])
        controls_frame.pack(side='right', pady=15)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self.start_stop_btn = tk.Button(controls_frame, text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å Demo",
                                       command=self.toggle_demo, bg=COLORS['accent_green'],
                                       fg='white', font=('Arial', 10, 'bold'), padx=15)
        self.start_stop_btn.pack(side='left', padx=(0, 10))
        
        # Live –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        self.live_indicator = tk.Label(controls_frame, text="‚ö´ OFFLINE",
                                     bg=COLORS['bg_primary'], fg=COLORS['text_secondary'],
                                     font=('Arial', 10, 'bold'))
        self.live_indicator.pack(side='left', padx=(0, 10))
        
        # –í—Ä–µ–º—è
        self.time_label = tk.Label(controls_frame, text="",
                                 bg=COLORS['bg_primary'], fg=COLORS['text_secondary'],
                                 font=('Courier', 10))
        self.time_label.pack(side='left')
        
        self.update_time()
        
    def create_main_content(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–∞—à–±–æ—Ä–¥–∞"""
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.demo_frame, bg=COLORS['bg_primary'])
        main_frame.pack(fill='both', expand=True, padx=20, pady=20)
        
        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 3 –∫–æ–ª–æ–Ω–∫–∏
        # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        left_frame = tk.Frame(main_frame, bg=COLORS['bg_primary'], width=280)
        left_frame.pack(side='left', fill='y', padx=(0, 10))
        left_frame.pack_propagate(False)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –∫–æ–ª–æ–Ω–∫–∞
        center_frame = tk.Frame(main_frame, bg=COLORS['bg_primary'])
        center_frame.pack(side='left', fill='both', expand=True, padx=10)
        
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        right_frame = tk.Frame(main_frame, bg=COLORS['bg_primary'], width=280)
        right_frame.pack(side='right', fill='y', padx=(10, 0))
        right_frame.pack_propagate(False)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–π
        self.create_metrics_section(left_frame)
        self.create_portfolio_section(left_frame)
        self.create_ai_section(left_frame)
        
        self.create_charts_section(center_frame)
        self.create_analysis_section(center_frame)
        
        self.create_orderbook_section(right_frame)
        self.create_trades_section(right_frame)
        self.create_signals_section(right_frame)
        
    def create_card(self, parent, title: str, height: int = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ —Å—Ç–∏–ª–µ Apple"""
        card_frame = tk.Frame(parent, bg=COLORS['bg_secondary'], relief='flat', bd=1)
        card_frame.pack(fill='x', pady=(0, 10))
        
        if height:
            card_frame.configure(height=height)
            card_frame.pack_propagate(False)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(card_frame, bg=COLORS['bg_secondary'], height=30)
        title_frame.pack(fill='x', padx=15, pady=(15, 5))
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, text=title, bg=COLORS['bg_secondary'],
                              fg=COLORS['text_primary'], font=('Arial', 12, 'bold'))
        title_label.pack(side='left', anchor='w')
        
        # –ö–æ–Ω—Ç–µ–Ω—Ç
        content_frame = tk.Frame(card_frame, bg=COLORS['bg_secondary'])
        content_frame.pack(fill='both', expand=True, padx=15, pady=(0, 15))
        
        return content_frame
        
    def create_metrics_section(self, parent):
        """–°–µ–∫—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        metrics_frame = self.create_card(parent, "üìä Performance Metrics", height=180)
        
        # Grid –¥–ª—è –º–µ—Ç—Ä–∏–∫ 2x2
        metrics = [
            ("Portfolio Value", "portfolio_value", "$", COLORS['accent_blue']),
            ("Daily P&L", "daily_pnl", "$", COLORS['accent_green']),
            ("Win Rate", "win_rate", "%", COLORS['accent_green']),
            ("Active Trades", "active_positions", "", COLORS['accent_orange']),
        ]
        
        self.metric_labels = {}
        
        for i, (name, key, suffix, color) in enumerate(metrics):
            row = i // 2
            col = i % 2
            
            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
            metric_container = tk.Frame(metrics_frame, bg=COLORS['bg_tertiary'])
            metric_container.grid(row=row, column=col, padx=5, pady=5, sticky='ew')
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ
            name_label = tk.Label(metric_container, text=name, bg=COLORS['bg_tertiary'],
                                fg=COLORS['text_secondary'], font=('Arial', 8))
            name_label.pack()
            
            # –ó–Ω–∞—á–µ–Ω–∏–µ
            value_label = tk.Label(metric_container, text=f"{suffix}{self.live_data[key]:.0f}",
                                 bg=COLORS['bg_tertiary'], fg=color,
                                 font=('Arial', 14, 'bold'))
            value_label.pack()
            
            self.metric_labels[key] = (value_label, suffix, color)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ grid
        metrics_frame.grid_columnconfigure(0, weight=1)
        metrics_frame.grid_columnconfigure(1, weight=1)
        
    def create_portfolio_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        portfolio_frame = self.create_card(parent, "üíº Portfolio Holdings", height=200)
        
        # Scrollable –æ–±–ª–∞—Å—Ç—å
        canvas = tk.Canvas(portfolio_frame, bg=COLORS['bg_secondary'], highlightthickness=0)
        scrollbar = ttk.Scrollbar(portfolio_frame, orient="vertical", command=canvas.yview)
        self.portfolio_content = tk.Frame(canvas, bg=COLORS['bg_secondary'])
        
        self.portfolio_content.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=self.portfolio_content, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")
        
        self.update_portfolio()
        
    def create_ai_section(self, parent):
        """–°–µ–∫—Ü–∏—è AI –º–µ—Ç—Ä–∏–∫"""
        ai_frame = self.create_card(parent, "ü§ñ AI Intelligence", height=150)
        
        ai_metrics = [
            ("AI Confidence", "ai_confidence", COLORS['accent_purple']),
            ("Market Sentiment", "market_sentiment", COLORS['accent_blue']),
            ("Volatility", "volatility", COLORS['accent_orange']),
        ]
        
        self.ai_progress_bars = {}
        
        for i, (name, key, color) in enumerate(ai_metrics):
            # Container –¥–ª—è –º–µ—Ç—Ä–∏–∫–∏
            container = tk.Frame(ai_frame, bg=COLORS['bg_secondary'])
            container.pack(fill='x', padx=5, pady=8)
            
            # Header —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –∑–Ω–∞—á–µ–Ω–∏–µ–º
            header_frame = tk.Frame(container, bg=COLORS['bg_secondary'])
            header_frame.pack(fill='x')
            
            tk.Label(header_frame, text=name, bg=COLORS['bg_secondary'],
                    fg=COLORS['text_secondary'], font=('Arial', 9)).pack(side='left')
            
            value_label = tk.Label(header_frame, text=f"{self.live_data[key]:.1f}%",
                                 bg=COLORS['bg_secondary'], fg=color,
                                 font=('Arial', 9, 'bold'))
            value_label.pack(side='right')
            
            # Progress bar
            progress_bg = tk.Frame(container, bg=COLORS['separator'], height=4)
            progress_bg.pack(fill='x', pady=(3, 0))
            
            progress_fill = tk.Frame(progress_bg, bg=color, height=4)
            progress_fill.place(relwidth=self.live_data[key]/100)
            
            self.ai_progress_bars[key] = (value_label, progress_fill, color)
            
    def create_charts_section(self, parent):
        """–°–µ–∫—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤"""
        charts_frame = self.create_card(parent, "üìà Live Market Data", height=350)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ matplotlib figure
        self.fig = Figure(figsize=(10, 6), facecolor=COLORS['bg_secondary'])
        self.fig.patch.set_facecolor(COLORS['bg_secondary'])
        
        # –ì—Ä–∞—Ñ–∏–∫ —Ü–µ–Ω—ã
        self.price_ax = self.fig.add_subplot(111)
        self.price_ax.set_facecolor(COLORS['bg_primary'])
        self.price_ax.set_title('BTC/USDT Price', color=COLORS['text_primary'], fontsize=12)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.price_ax.tick_params(colors=COLORS['text_secondary'], labelsize=8)
        for spine in self.price_ax.spines.values():
            spine.set_color(COLORS['separator'])
        self.price_ax.grid(True, alpha=0.1, color=COLORS['text_tertiary'])
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å tkinter
        self.canvas = FigureCanvasTkAgg(self.fig, charts_frame)
        self.canvas.get_tk_widget().pack(fill='both', expand=True)
        
    def create_analysis_section(self, parent):
        """–°–µ–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        analysis_frame = self.create_card(parent, "üìä Market Analysis", height=120)
        
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.analysis_text = tk.Text(analysis_frame, bg=COLORS['bg_primary'],
                                   fg=COLORS['text_primary'], font=('Courier', 8),
                                   wrap=tk.WORD, state='disabled', height=6)
        self.analysis_text.pack(fill='both', expand=True)
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(analysis_frame, command=self.analysis_text.yview)
        scrollbar.pack(side='right', fill='y')
        self.analysis_text.configure(yscrollcommand=scrollbar.set)
        
    def create_orderbook_section(self, parent):
        """–°–µ–∫—Ü–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        orderbook_frame = self.create_card(parent, "üìã Order Book", height=250)
        
        # Headers
        headers_frame = tk.Frame(orderbook_frame, bg=COLORS['bg_secondary'])
        headers_frame.pack(fill='x', pady=(0, 5))
        
        tk.Label(headers_frame, text="Size", bg=COLORS['bg_secondary'],
                fg=COLORS['text_secondary'], font=('Arial', 8)).pack(side='left')
        tk.Label(headers_frame, text="Price", bg=COLORS['bg_secondary'],
                fg=COLORS['text_secondary'], font=('Arial', 8)).pack()
        tk.Label(headers_frame, text="Size", bg=COLORS['bg_secondary'],
                fg=COLORS['text_secondary'], font=('Arial', 8)).pack(side='right')
        
        # Scrollable content
        canvas = tk.Canvas(orderbook_frame, bg=COLORS['bg_secondary'], highlightthickness=0)
        self.orderbook_content = tk.Frame(canvas, bg=COLORS['bg_secondary'])
        
        canvas.create_window((0, 0), window=self.orderbook_content, anchor="nw")
        canvas.pack(fill='both', expand=True)
        
        self.orderbook_canvas = canvas
        
    def create_trades_section(self, parent):
        """–°–µ–∫—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫"""
        trades_frame = self.create_card(parent, "üîÑ Recent Trades", height=180)
        
        # Headers
        headers = ["Time", "Side", "Price", "Size"]
        headers_frame = tk.Frame(trades_frame, bg=COLORS['bg_secondary'])
        headers_frame.pack(fill='x', pady=(0, 5))
        
        for header in headers:
            tk.Label(headers_frame, text=header, bg=COLORS['bg_secondary'],
                    fg=COLORS['text_secondary'], font=('Arial', 8)).pack(side='left', expand=True)
        
        # Scrollable content
        canvas = tk.Canvas(trades_frame, bg=COLORS['bg_secondary'], highlightthickness=0)
        self.trades_content = tk.Frame(canvas, bg=COLORS['bg_secondary'])
        
        canvas.create_window((0, 0), window=self.trades_content, anchor="nw")
        canvas.pack(fill='both', expand=True)
        
        self.trades_canvas = canvas
        
    def create_signals_section(self, parent):
        """–°–µ–∫—Ü–∏—è AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signals_frame = self.create_card(parent, "ü§ñ AI Signals", height=150)
        
        # Scrollable content
        canvas = tk.Canvas(signals_frame, bg=COLORS['bg_secondary'], highlightthickness=0)
        self.signals_content = tk.Frame(canvas, bg=COLORS['bg_secondary'])
        
        canvas.create_window((0, 0), window=self.signals_content, anchor="nw")
        canvas.pack(fill='both', expand=True)
        
        self.signals_canvas = canvas
        
    def toggle_demo(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        if self.is_running:
            self.stop_demo()
        else:
            self.start_demo()
            
    def start_demo(self):
        """–ó–∞–ø—É—Å–∫ live –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.is_running = True
        self.start_stop_btn.configure(text="‚è∏ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Demo", bg=COLORS['accent_red'])
        self.live_indicator.configure(text="üî¥ LIVE", fg=COLORS['accent_red'])
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.update_thread = threading.Thread(target=self._live_update_loop, daemon=True)
        self.update_thread.start()
        
        # –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        self.update_ui()
        
    def stop_demo(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ live –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        self.is_running = False
        self.start_stop_btn.configure(text="‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å Demo", bg=COLORS['accent_green'])
        self.live_indicator.configure(text="‚ö´ OFFLINE", fg=COLORS['text_secondary'])
        
    def _live_update_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è live –¥–∞–Ω–Ω—ã—Ö"""
        while self.is_running:
            self._simulate_market_data()
            self._simulate_trading_activity()
            self._simulate_ai_analysis()
            
            # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            interval = self.config_manager.get("dashboard_settings", "update_interval_ms", 500)
            time.sleep(interval / 1000.0)
            
    def _simulate_market_data(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
        for symbol in self.live_data['prices']:
            current_price = self.live_data['prices'][symbol]
            change = random.uniform(-0.02, 0.02)
            new_price = current_price * (1 + change)
            self.live_data['prices'][symbol] = new_price
            
            # –ò—Å—Ç–æ—Ä–∏—è —Ü–µ–Ω
            if len(self.price_history[symbol]) > 100:
                self.price_history[symbol].pop(0)
            self.price_history[symbol].append(new_price)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        self.live_data['daily_pnl'] += random.uniform(-50, 100)
        self.live_data['portfolio_value'] = 50000 + self.live_data['daily_pnl']
        self.live_data['ai_confidence'] = max(0, min(100,
            self.live_data['ai_confidence'] + random.uniform(-2, 2)))
        self.live_data['market_sentiment'] = max(0, min(100,
            self.live_data['market_sentiment'] + random.uniform(-3, 3)))
        self.live_data['volatility'] = max(0, min(100,
            self.live_data['volatility'] + random.uniform(-1, 1)))
            
    def _simulate_trading_activity(self):
        """–°–∏–º—É–ª—è—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
        if random.random() < 0.3:
            trade = {
                'time': datetime.now().strftime('%H:%M:%S'),
                'side': random.choice(['BUY', 'SELL']),
                'price': self.live_data['prices']['BTCUSDT'] + random.uniform(-10, 10),
                'size': random.uniform(0.001, 0.1)
            }
            
            if len(self.live_data['trade_history']) > 20:
                self.live_data['trade_history'].pop(0)
            self.live_data['trade_history'].append(trade)
            
    def _simulate_ai_analysis(self):
        """–°–∏–º—É–ª—è—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞"""
        if random.random() < 0.1:
            signals = [
                "üî¥ Strong resistance at $42,500",
                "üü¢ Bullish divergence detected",
                "üü° High volatility period starting",
                "üîµ Volume spike in BTC",
                "üü¢ Long signal: BTC/USDT",
                "üî¥ Risk management: Reduce position",
            ]
            
            signal = {
                'time': datetime.now().strftime('%H:%M:%S'),
                'message': random.choice(signals),
                'confidence': random.uniform(60, 95)
            }
            
            if len(self.live_data['ai_signals']) > 10:
                self.live_data['ai_signals'].pop(0)
            self.live_data['ai_signals'].append(signal)
            
    def update_time(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        current_time = datetime.now().strftime('%H:%M:%S')
        self.time_label.configure(text=current_time)
        self.demo_frame.after(1000, self.update_time)
        
    def update_ui(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        if not self.is_running:
            return
            
        try:
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            self._update_metrics()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –º–µ—Ç—Ä–∏–∫
            self._update_ai_metrics()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            self._update_chart()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞
            self._update_orderbook()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫
            self._update_trades()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
            self._update_signals()
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
            self._update_analysis()
            
        except Exception as e:
            print(f"UI Update Error: {e}")
        
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        interval = self.config_manager.get("dashboard_settings", "update_interval_ms", 500)
        self.demo_frame.after(interval, self.update_ui)
        
    def _update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        for key, (label, suffix, color) in self.metric_labels.items():
            value = self.live_data[key]
            if key == 'daily_pnl':
                text = f"{'+' if value >= 0 else ''}{suffix}{value:.0f}"
                color = COLORS['accent_green'] if value >= 0 else COLORS['accent_red']
            else:
                text = f"{suffix}{value:.1f}" if key == 'win_rate' else f"{suffix}{value:.0f}"
            
            label.configure(text=text, fg=color)
            
    def _update_ai_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI –º–µ—Ç—Ä–∏–∫"""
        for key, (label, progress_fill, color) in self.ai_progress_bars.items():
            value = self.live_data[key]
            label.configure(text=f"{value:.1f}%")
            progress_fill.place(relwidth=value/100)
            
    def _update_chart(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞"""
        try:
            if self.price_history['BTCUSDT']:
                self.price_ax.clear()
                
                x_data = range(len(self.price_history['BTCUSDT']))
                y_data = self.price_history['BTCUSDT']
                
                self.price_ax.plot(x_data, y_data, color=COLORS['accent_blue'], linewidth=2)
                self.price_ax.set_title('BTC/USDT Price', color=COLORS['text_primary'], fontsize=12)
                self.price_ax.set_facecolor(COLORS['bg_primary'])
                
                # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
                self.price_ax.tick_params(colors=COLORS['text_secondary'], labelsize=8)
                for spine in self.price_ax.spines.values():
                    spine.set_color(COLORS['separator'])
                self.price_ax.grid(True, alpha=0.1, color=COLORS['text_tertiary'])
                
                self.canvas.draw()
                
        except Exception as e:
            print(f"Chart update error: {e}")
            
    def _update_orderbook(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞"""
        # –û—á–∏—Å—Ç–∫–∞
        for widget in self.orderbook_content.winfo_children():
            widget.destroy()
            
        base_price = self.live_data['prices']['BTCUSDT']
        
        # Asks (–ø—Ä–æ–¥–∞–∂–∏)
        for i in range(5):
            price = base_price + (i + 1) * random.uniform(1, 5)
            size = random.uniform(0.1, 2.0)
            
            row = tk.Frame(self.orderbook_content, bg=COLORS['bg_secondary'])
            row.pack(fill='x', pady=1)
            
            tk.Label(row, text="", bg=COLORS['bg_secondary'], width=8).pack(side='left')
            tk.Label(row, text=f"{price:.1f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['accent_red'], font=('Courier', 8)).pack()
            tk.Label(row, text=f"{size:.3f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Courier', 8), width=8).pack(side='right')
        
        # Spread
        separator = tk.Frame(self.orderbook_content, bg=COLORS['accent_orange'], height=2)
        separator.pack(fill='x', pady=2)
        
        # Bids (–ø–æ–∫—É–ø–∫–∏)
        for i in range(5):
            price = base_price - (i + 1) * random.uniform(1, 5)
            size = random.uniform(0.1, 2.0)
            
            row = tk.Frame(self.orderbook_content, bg=COLORS['bg_secondary'])
            row.pack(fill='x', pady=1)
            
            tk.Label(row, text=f"{size:.3f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Courier', 8), width=8).pack(side='left')
            tk.Label(row, text=f"{price:.1f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['accent_green'], font=('Courier', 8)).pack()
            tk.Label(row, text="", bg=COLORS['bg_secondary'], width=8).pack(side='right')
            
    def _update_trades(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫"""
        # –û—á–∏—Å—Ç–∫–∞
        for widget in self.trades_content.winfo_children():
            widget.destroy()
            
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        for trade in self.live_data['trade_history'][-8:]:
            row = tk.Frame(self.trades_content, bg=COLORS['bg_secondary'])
            row.pack(fill='x', pady=1)
            
            side_color = COLORS['accent_green'] if trade['side'] == 'BUY' else COLORS['accent_red']
            
            tk.Label(row, text=trade['time'], bg=COLORS['bg_secondary'],
                    fg=COLORS['text_secondary'], font=('Courier', 7), width=8).pack(side='left')
            tk.Label(row, text=trade['side'], bg=COLORS['bg_secondary'],
                    fg=side_color, font=('Courier', 7, 'bold'), width=4).pack(side='left')
            tk.Label(row, text=f"{trade['price']:.1f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Courier', 7), width=8).pack(side='left')
            tk.Label(row, text=f"{trade['size']:.3f}", bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Courier', 7), width=8).pack(side='left')
                    
    def _update_signals(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ AI —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –û—á–∏—Å—Ç–∫–∞
        for widget in self.signals_content.winfo_children():
            widget.destroy()
            
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–≥–Ω–∞–ª—ã
        for signal in self.live_data['ai_signals'][-5:]:
            row = tk.Frame(self.signals_content, bg=COLORS['bg_tertiary'], pady=5)
            row.pack(fill='x', pady=2, padx=2)
            
            # –í—Ä–µ–º—è –∏ confidence
            header = tk.Frame(row, bg=COLORS['bg_tertiary'])
            header.pack(fill='x')
            
            tk.Label(header, text=signal['time'], bg=COLORS['bg_tertiary'],
                    fg=COLORS['text_secondary'], font=('Courier', 7)).pack(side='left')
            tk.Label(header, text=f"{signal['confidence']:.0f}%", bg=COLORS['bg_tertiary'],
                    fg=COLORS['accent_purple'], font=('Courier', 7, 'bold')).pack(side='right')
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ
            tk.Label(row, text=signal['message'], bg=COLORS['bg_tertiary'],
                    fg=COLORS['text_primary'], font=('Arial', 8), wraplength=200, justify='left').pack(fill='x')
                    
    def _update_analysis(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–∫–∞"""
        if random.random() < 0.05:
            analyses = [
                "üîç Detecting bullish pattern formation...",
                "üìä Volume analysis shows strong buying pressure",
                "‚ö° High-frequency trading detected",
                "üéØ Target price: $43,200 (R/R: 2.5)",
                "üõ°Ô∏è Stop loss adjusted to $41,800",
                "üìà RSI approaching oversold levels",
            ]
            
            timestamp = datetime.now().strftime('%H:%M:%S')
            new_text = f"[{timestamp}] {random.choice(analyses)}\n"
            
            self.analysis_text.configure(state='normal')
            self.analysis_text.insert(tk.END, new_text)
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
            lines = self.analysis_text.get('1.0', tk.END).split('\n')
            if len(lines) > 15:
                self.analysis_text.delete('1.0', '2.0')
                
            self.analysis_text.configure(state='disabled')
            self.analysis_text.see(tk.END)
            
    def update_portfolio(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        # –û—á–∏—Å—Ç–∫–∞
        for widget in self.portfolio_content.winfo_children():
            widget.destroy()
            
        holdings = [
            ("BTC", "0.5432", "$22,890", "+$1,250"),
            ("ETH", "8.7654", "$21,456", "+$890"),
            ("ADA", "15,432", "$7,456", "-$123"),
            ("SOL", "45.23", "$4,456", "+$234"),
        ]
        
        for asset, amount, value, pnl in holdings:
            item = tk.Frame(self.portfolio_content, bg=COLORS['bg_secondary'])
            item.pack(fill='x', pady=2)
            
            # Asset info
            info_frame = tk.Frame(item, bg=COLORS['bg_secondary'])
            info_frame.pack(side='left', fill='x', expand=True)
            
            tk.Label(info_frame, text=asset, bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Arial', 9, 'bold')).pack(anchor='w')
            tk.Label(info_frame, text=amount, bg=COLORS['bg_secondary'],
                    fg=COLORS['text_secondary'], font=('Arial', 8)).pack(anchor='w')
            
            # Value info
            value_frame = tk.Frame(item, bg=COLORS['bg_secondary'])
            value_frame.pack(side='right')
            
            tk.Label(value_frame, text=value, bg=COLORS['bg_secondary'],
                    fg=COLORS['text_primary'], font=('Arial', 9)).pack(anchor='e')
            
            pnl_color = COLORS['accent_green'] if '+' in pnl else COLORS['accent_red']
            tk.Label(value_frame, text=pnl, bg=COLORS['bg_secondary'],
                    fg=pnl_color, font=('Arial', 8, 'bold')).pack(anchor='e')

class MainApplication:
    """–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ATB Trading —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞—à–±–æ—Ä–¥–æ–º"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("ATB Trading System v3.0 - Apple Style")
        self.root.geometry("1400x900")
        self.root.configure(bg=COLORS['bg_primary'])
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config_manager = ConfigManager()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        self.setup_styles()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_interface()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à
        self.setup_hotkeys()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã"""
        style = ttk.Style()
        style.theme_use('clam')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
        style.configure('TNotebook', background=COLORS['bg_primary'], borderwidth=0)
        style.configure('TNotebook.Tab', background=COLORS['bg_tertiary'],
                       foreground=COLORS['text_primary'], padding=[12, 8])
        style.map('TNotebook.Tab', background=[('selected', COLORS['accent_blue'])])
        
    def create_interface(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ú–µ–Ω—é
        self.create_menu()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg=COLORS['bg_primary'])
        main_frame.pack(fill='both', expand=True)
        
        # Notebook –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        self.notebook = ttk.Notebook(main_frame)
        self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
        self.create_tabs()
        
    def create_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        menubar = tk.Menu(self.root, bg=COLORS['bg_secondary'], fg=COLORS['text_primary'])
        self.root.config(menu=menubar)
        
        # –§–∞–π–ª
        file_menu = tk.Menu(menubar, tearoff=0, bg=COLORS['bg_secondary'], fg=COLORS['text_primary'])
        menubar.add_cascade(label="–§–∞–π–ª", menu=file_menu)
        file_menu.add_command(label="–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", command=self.new_session)
        file_menu.add_command(label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.load_config)
        file_menu.add_command(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", command=self.save_config)
        file_menu.add_separator()
        file_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –¢–æ—Ä–≥–æ–≤–ª—è
        trading_menu = tk.Menu(menubar, tearoff=0, bg=COLORS['bg_secondary'], fg=COLORS['text_primary'])
        menubar.add_cascade(label="–¢–æ—Ä–≥–æ–≤–ª—è", menu=trading_menu)
        trading_menu.add_command(label="–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", command=self.quick_start)
        trading_menu.add_command(label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é", command=self.stop_trading)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_menu = tk.Menu(menubar, tearoff=0, bg=COLORS['bg_secondary'], fg=COLORS['text_primary'])
        menubar.add_cascade(label="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", menu=settings_menu)
        settings_menu.add_command(label="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", command=self.open_settings)
        settings_menu.add_command(label="üîë API –∫–ª—é—á–∏", command=self.open_api_settings)
        
        # –ü–æ–º–æ—â—å
        help_menu = tk.Menu(menubar, tearoff=0, bg=COLORS['bg_secondary'], fg=COLORS['text_primary'])
        menubar.add_cascade(label="–ü–æ–º–æ—â—å", menu=help_menu)
        help_menu.add_command(label="üìö –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", command=self.show_help)
        help_menu.add_command(label="‚ÑπÔ∏è –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", command=self.show_about)
        
    def create_tabs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞
        self.create_main_trading_tab()
        
        # Live Demo –≤–∫–ª–∞–¥–∫–∞
        self.live_demo_tab = LiveDemoTab(self.notebook, self.config_manager)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        self.create_analytics_tab()
        
        # –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥
        self.create_backtest_tab()
        
    def create_main_trading_tab(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –≤–∫–ª–∞–¥–∫–∞"""
        trading_frame = tk.Frame(self.notebook, bg=COLORS['bg_primary'])
        self.notebook.add(trading_frame, text="üí∞ –¢–æ—Ä–≥–æ–≤–ª—è")
        
        # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        tk.Label(trading_frame, text="üöß –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞–Ω–µ–ª—å\n(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                bg=COLORS['bg_primary'], fg=COLORS['text_secondary'],
                font=('Arial', 16), pady=50).pack(expand=True)
        
    def create_analytics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_frame = tk.Frame(self.notebook, bg=COLORS['bg_primary'])
        self.notebook.add(analytics_frame, text="üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        
        tk.Label(analytics_frame, text="üìà –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                bg=COLORS['bg_primary'], fg=COLORS['text_secondary'],
                font=('Arial', 16), pady=50).pack(expand=True)
        
    def create_backtest_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞"""
        backtest_frame = tk.Frame(self.notebook, bg=COLORS['bg_primary'])
        self.notebook.add(backtest_frame, text="‚èÆ –ë—ç–∫—Ç–µ—Å—Ç")
        
        tk.Label(backtest_frame, text="üß™ –ü–∞–Ω–µ–ª—å –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞\n(–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)",
                bg=COLORS['bg_primary'], fg=COLORS['text_secondary'],
                font=('Arial', 16), pady=50).pack(expand=True)
        
    def setup_hotkeys(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ—Ä—è—á–∏—Ö –∫–ª–∞–≤–∏—à"""
        self.root.bind('<Control-s>', lambda e: self.save_config())
        self.root.bind('<Control-o>', lambda e: self.load_config())
        self.root.bind('<Control-comma>', lambda e: self.open_settings())
        self.root.bind('<F5>', lambda e: self.refresh_data())
        self.root.bind('<F9>', lambda e: self.quick_start())
        self.root.bind('<F10>', lambda e: self.stop_trading())
        
    def open_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        settings_window = SettingsWindow(self.root, self.config_manager)
        settings_window.show()
        
    def open_api_settings(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ API (–±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø)"""
        settings_window = SettingsWindow(self.root, self.config_manager)
        settings_window.show()
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É API –∫–ª—é—á–µ–π
        if hasattr(settings_window, 'notebook'):
            settings_window.notebook.select(0)
            
    def new_session(self):
        """–ù–æ–≤–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è"""
        if messagebox.askyesno("–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è", "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Å—Å–∏—é?\n–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã."):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "‚úÖ –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!")
            
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        filename = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {filename}")
            
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        filename = filedialog.asksaveasfilename(
            title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
        )
        if filename:
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {filename}")
            
    def quick_start(self):
        """–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        messagebox.showinfo("–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç", "üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ç–æ—Ä–≥–æ–≤–ª–∏\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏"""
        messagebox.showinfo("–û—Å—Ç–∞–Ω–æ–≤–∫–∞", "‚èπ –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        messagebox.showinfo("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ", "üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
        
    def show_help(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üìö ATB Trading System - –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ üì∫ Live Demo - –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ –¥–ª—è —Å—Ç—Ä–∏–º–æ–≤
‚Ä¢ üí∞ –¢–æ—Ä–≥–æ–≤–ª—è - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
‚Ä¢ üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
‚Ä¢ ‚èÆ –ë—ç–∫—Ç–µ—Å—Ç - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π

‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
‚Ä¢ Ctrl+, - –û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ üîë API –∫–ª—é—á–∏ –¥–ª—è –±–∏—Ä–∂ (Bybit, Binance, Coinbase)
‚Ä¢ üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–∞—à–±–æ—Ä–¥–∞
‚Ä¢ üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üéÆ –ì–æ—Ä—è—á–∏–µ –∫–ª–∞–≤–∏—à–∏:
‚Ä¢ Ctrl+S - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
‚Ä¢ Ctrl+O - –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
‚Ä¢ F5 - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
‚Ä¢ F9 - –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
‚Ä¢ F10 - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é

üí° –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ Twitch –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∫–ª–∞–¥–∫—É "üì∫ Live Demo"
        """
        
        messagebox.showinfo("–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ", help_text)
        
    def show_about(self):
        """–û –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
üöÄ ATB Trading System v3.0
Apple-style Dark Theme Edition

üí´ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–∞—à–±–æ—Ä–¥
üì∫ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è Twitch –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π
üé® –î–∏–∑–∞–π–Ω –≤ —Å—Ç–∏–ª–µ Apple
üî¥ Live –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏

–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤
–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–º–µ–π–∫–µ—Ä–æ–≤.

¬© 2024 ATB Trading Systems
        """
        
        messagebox.showinfo("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
        
    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ ATB Trading System...")
        print("üí´ Apple-style Dark Theme")
        print("üì∫ Twitch Demo Ready")
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é")
        
        self.root.mainloop()

if __name__ == "__main__":
    try:
        app = MainApplication()
        app.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        messagebox.showerror("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n{e}")